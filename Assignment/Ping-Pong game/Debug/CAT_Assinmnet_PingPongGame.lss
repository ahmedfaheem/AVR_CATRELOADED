
CAT_Assinmnet_PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000023ac  00002440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800098  00800098  00002478  2**0
                  ALLOC
  3 .stab         00002004  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb4  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007229  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000092b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_1>
       8:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_2>
       c:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <main>
      8a:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSetHalfDataPort>:
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

#if CLCD_u8BIT_MODE == FOUR_BIT

static void voidSetHalfDataPort(uint8 Copy_u8Data){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01


	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D4, GET_BIT(Copy_u8Data, 0));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	98 2f       	mov	r25, r24
     b56:	91 70       	andi	r25, 0x01	; 1
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	49 2f       	mov	r20, r25
     b5e:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D5, GET_BIT(Copy_u8Data, 1));
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	86 95       	lsr	r24
     b66:	98 2f       	mov	r25, r24
     b68:	91 70       	andi	r25, 0x01	; 1
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D6, GET_BIT(Copy_u8Data, 2));
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	49 2f       	mov	r20, r25
     b84:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D7, GET_BIT(Copy_u8Data, 3));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	98 2f       	mov	r25, r24
     b92:	91 70       	andi	r25, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	49 2f       	mov	r20, r25
     b9a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>

}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <voidSendEnablePulse>:


#endif

static void voidSendEnablePulse(void){
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2e 97       	sbiw	r28, 0x0e	; 14
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_HIGH);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e4       	ldi	r27, 0x40	; 64
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9c 87       	std	Y+12, r25	; 0x0c
     bd0:	ad 87       	std	Y+13, r26	; 0x0d
     bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	55 e4       	ldi	r21, 0x45	; 69
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	a9 87       	std	Y+9, r26	; 0x09
     bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf4:	6f 81       	ldd	r22, Y+7	; 0x07
     bf6:	78 85       	ldd	r23, Y+8	; 0x08
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <voidSendEnablePulse+0xd0>
     c58:	80 e9       	ldi	r24, 0x90	; 144
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <voidSendEnablePulse+0xbe>
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <voidSendEnablePulse+0xb2>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <voidSendEnablePulse+0xfa>
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_LOW);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd){
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS pin to Low for command */
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
#endif

	/* Send Command */
#if CLCD_u8BIT_MODE == FOUR_BIT
	/* Send the 4 most significant bit of the command */
	voidSetHalfDataPort(Copy_u8Cmd>>4);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	/* Send the 4 least significant bit of the command */
	voidSetHalfDataPort(Copy_u8Cmd);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error Wrong CLCD_u8BIT_MODE Configuration
#endif

}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data){
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS pin to Low for Data */

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_u8SetPinValue>
#endif

	/* Send Data */
#if CLCD_u8BIT_MODE == FOUR_BIT
	/* Send the 4 most significant bit of the command */
	voidSetHalfDataPort(Copy_u8Data>>4);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	/* Send the 4 least significant bit of the command */
	voidSetHalfDataPort(Copy_u8Data);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
#else
#error Wrong CLCD_u8BIT_MODE Configuration
#endif


}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <CLCD_voidInit>:


void CLCD_voidInit(void){
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e2       	ldi	r26, 0x20	; 32
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	55 e4       	ldi	r21, 0x45	; 69
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <CLCD_voidInit+0x66>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <CLCD_voidInit+0xc6>
     dd8:	80 e9       	ldi	r24, 0x90	; 144
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <CLCD_voidInit+0xb4>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <CLCD_voidInit+0xa8>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_voidInit+0xf0>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01



#elif CLCD_u8BIT_MODE == FOUR_BIT

	voidSetHalfDataPort(0b0010);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e38:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>


#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
	CLCD_voidSendCmd(0b00001100);
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	/*Clear display*/
	CLCD_voidSendCmd(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
     e52:	2e 96       	adiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char *Copy_pcharString){
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CLCD_u8SendString+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CLCD_u8SendString+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Local_u8ErrState = OK;
     e74:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Copy_u8Counter = 0u;
     e76:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcharString != NULL){
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	f1 f0       	breq	.+60     	; 0xebc <CLCD_u8SendString+0x58>
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <CLCD_u8SendString+0x3c>

		while(Copy_pcharString[Copy_u8Counter] != NULL){

			CLCD_voidSendData(Copy_pcharString[Copy_u8Counter++]);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	90 81       	ld	r25, Z
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 2f       	mov	r24, r25
     e9c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>

	uint8 Local_u8ErrState = OK;
	uint8 Copy_u8Counter = 0u;
	if(Copy_pcharString != NULL){

		while(Copy_pcharString[Copy_u8Counter] != NULL){
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	fc 01       	movw	r30, r24
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19
     eb0:	80 81       	ld	r24, Z
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	21 f7       	brne	.-56     	; 0xe82 <CLCD_u8SendString+0x1e>
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <CLCD_u8SendString+0x5c>


	}else{


		Local_u8ErrState = NULL_PTR_ERR;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_u8ErrState;
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <CLCD_u8SendNumber>:


void CLCD_u8SendNumber(sint32 Copy_s32Number){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	2f 97       	sbiw	r28, 0x0f	; 15
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	6c 87       	std	Y+12, r22	; 0x0c
     ee6:	7d 87       	std	Y+13, r23	; 0x0d
     ee8:	8e 87       	std	Y+14, r24	; 0x0e
     eea:	9f 87       	std	Y+15, r25	; 0x0f


	uint8  Local_u8NumberOfDigits = 0u;
     eec:	1b 86       	std	Y+11, r1	; 0x0b
	uint8 Local_u32Digits;
	uint32 Local_u32OriginalNumber;
	uint32 Local_u32Divider = 1u;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	uint8 Copy_u8Counter = 0u;
     efe:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Number == 0){
     f00:	8c 85       	ldd	r24, Y+12	; 0x0c
     f02:	9d 85       	ldd	r25, Y+13	; 0x0d
     f04:	ae 85       	ldd	r26, Y+14	; 0x0e
     f06:	bf 85       	ldd	r27, Y+15	; 0x0f
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	a1 05       	cpc	r26, r1
     f0c:	b1 05       	cpc	r27, r1
     f0e:	21 f4       	brne	.+8      	; 0xf18 <CLCD_u8SendNumber+0x48>
		CLCD_voidSendData('0');
     f10:	80 e3       	ldi	r24, 0x30	; 48
     f12:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     f16:	a7 c0       	rjmp	.+334    	; 0x1066 <CLCD_u8SendNumber+0x196>
	}else{

		if(Copy_s32Number < 0){
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1c:	ae 85       	ldd	r26, Y+14	; 0x0e
     f1e:	bf 85       	ldd	r27, Y+15	; 0x0f
     f20:	bb 23       	and	r27, r27
     f22:	94 f4       	brge	.+36     	; 0xf48 <CLCD_u8SendNumber+0x78>
			CLCD_voidSendData('-');
     f24:	8d e2       	ldi	r24, 0x2D	; 45
     f26:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			Copy_s32Number*=-1;
     f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f2e:	ae 85       	ldd	r26, Y+14	; 0x0e
     f30:	bf 85       	ldd	r27, Y+15	; 0x0f
     f32:	b0 95       	com	r27
     f34:	a0 95       	com	r26
     f36:	90 95       	com	r25
     f38:	81 95       	neg	r24
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	af 4f       	sbci	r26, 0xFF	; 255
     f3e:	bf 4f       	sbci	r27, 0xFF	; 255
     f40:	8c 87       	std	Y+12, r24	; 0x0c
     f42:	9d 87       	std	Y+13, r25	; 0x0d
     f44:	ae 87       	std	Y+14, r26	; 0x0e
     f46:	bf 87       	std	Y+15, r27	; 0x0f
		}

		Local_u32OriginalNumber = Copy_s32Number;
     f48:	8c 85       	ldd	r24, Y+12	; 0x0c
     f4a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f4c:	ae 85       	ldd	r26, Y+14	; 0x0e
     f4e:	bf 85       	ldd	r27, Y+15	; 0x0f
     f50:	8e 83       	std	Y+6, r24	; 0x06
     f52:	9f 83       	std	Y+7, r25	; 0x07
     f54:	a8 87       	std	Y+8, r26	; 0x08
     f56:	b9 87       	std	Y+9, r27	; 0x09
     f58:	15 c0       	rjmp	.+42     	; 0xf84 <CLCD_u8SendNumber+0xb4>
		/*get number of digits */
		while(Local_u32OriginalNumber> 0){
			Local_u8NumberOfDigits++;
     f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	8b 87       	std	Y+11, r24	; 0x0b
			Local_u32OriginalNumber/=10;
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	a8 85       	ldd	r26, Y+8	; 0x08
     f66:	b9 85       	ldd	r27, Y+9	; 0x09
     f68:	2a e0       	ldi	r18, 0x0A	; 10
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
     f78:	da 01       	movw	r26, r20
     f7a:	c9 01       	movw	r24, r18
     f7c:	8e 83       	std	Y+6, r24	; 0x06
     f7e:	9f 83       	std	Y+7, r25	; 0x07
     f80:	a8 87       	std	Y+8, r26	; 0x08
     f82:	b9 87       	std	Y+9, r27	; 0x09
			Copy_s32Number*=-1;
		}

		Local_u32OriginalNumber = Copy_s32Number;
		/*get number of digits */
		while(Local_u32OriginalNumber> 0){
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	a8 85       	ldd	r26, Y+8	; 0x08
     f8a:	b9 85       	ldd	r27, Y+9	; 0x09
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	19 f7       	brne	.-58     	; 0xf5a <CLCD_u8SendNumber+0x8a>
			Local_u8NumberOfDigits++;
			Local_u32OriginalNumber/=10;
		}

		/*get 10 multiplied number of digits */
		for(Copy_u8Counter = 0;Copy_u8Counter <Local_u8NumberOfDigits-1;Copy_u8Counter++){
     f94:	19 82       	std	Y+1, r1	; 0x01
     f96:	15 c0       	rjmp	.+42     	; 0xfc2 <CLCD_u8SendNumber+0xf2>
			Local_u32Divider*=10;
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	ac 81       	ldd	r26, Y+4	; 0x04
     f9e:	bd 81       	ldd	r27, Y+5	; 0x05
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsi3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8a 83       	std	Y+2, r24	; 0x02
     fb6:	9b 83       	std	Y+3, r25	; 0x03
     fb8:	ac 83       	std	Y+4, r26	; 0x04
     fba:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8NumberOfDigits++;
			Local_u32OriginalNumber/=10;
		}

		/*get 10 multiplied number of digits */
		for(Copy_u8Counter = 0;Copy_u8Counter <Local_u8NumberOfDigits-1;Copy_u8Counter++){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	28 17       	cp	r18, r24
     fd2:	39 07       	cpc	r19, r25
     fd4:	0c f3       	brlt	.-62     	; 0xf98 <CLCD_u8SendNumber+0xc8>
			Local_u32Divider*=10;
		}
		Local_u32OriginalNumber = Copy_s32Number;
     fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fda:	ae 85       	ldd	r26, Y+14	; 0x0e
     fdc:	bf 85       	ldd	r27, Y+15	; 0x0f
     fde:	8e 83       	std	Y+6, r24	; 0x06
     fe0:	9f 83       	std	Y+7, r25	; 0x07
     fe2:	a8 87       	std	Y+8, r26	; 0x08
     fe4:	b9 87       	std	Y+9, r27	; 0x09
     fe6:	37 c0       	rjmp	.+110    	; 0x1056 <CLCD_u8SendNumber+0x186>

		/*get digits form first, divide by Local_u32Divider, and Local_u32Divider/10 on each step */
		while(Local_u32Divider > 0){
			/*48 is Ascci of zero*/
			Local_u32Digits =  (Local_u32OriginalNumber/Local_u32Divider)+48;
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	a8 85       	ldd	r26, Y+8	; 0x08
     fee:	b9 85       	ldd	r27, Y+9	; 0x09
     ff0:	2a 81       	ldd	r18, Y+2	; 0x02
     ff2:	3b 81       	ldd	r19, Y+3	; 0x03
     ff4:	4c 81       	ldd	r20, Y+4	; 0x04
     ff6:	5d 81       	ldd	r21, Y+5	; 0x05
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    1000:	da 01       	movw	r26, r20
    1002:	c9 01       	movw	r24, r18
    1004:	80 5d       	subi	r24, 0xD0	; 208
    1006:	8a 87       	std	Y+10, r24	; 0x0a
			CLCD_voidSendData(Local_u32Digits);
    1008:	8a 85       	ldd	r24, Y+10	; 0x0a
    100a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			Local_u32OriginalNumber%=Local_u32Divider;
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	9f 81       	ldd	r25, Y+7	; 0x07
    1012:	a8 85       	ldd	r26, Y+8	; 0x08
    1014:	b9 85       	ldd	r27, Y+9	; 0x09
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	3b 81       	ldd	r19, Y+3	; 0x03
    101a:	4c 81       	ldd	r20, Y+4	; 0x04
    101c:	5d 81       	ldd	r21, Y+5	; 0x05
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8e 83       	std	Y+6, r24	; 0x06
    102c:	9f 83       	std	Y+7, r25	; 0x07
    102e:	a8 87       	std	Y+8, r26	; 0x08
    1030:	b9 87       	std	Y+9, r27	; 0x09
			Local_u32Divider/=10;
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	9b 81       	ldd	r25, Y+3	; 0x03
    1036:	ac 81       	ldd	r26, Y+4	; 0x04
    1038:	bd 81       	ldd	r27, Y+5	; 0x05
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    104a:	da 01       	movw	r26, r20
    104c:	c9 01       	movw	r24, r18
    104e:	8a 83       	std	Y+2, r24	; 0x02
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	ac 83       	std	Y+4, r26	; 0x04
    1054:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Divider*=10;
		}
		Local_u32OriginalNumber = Copy_s32Number;

		/*get digits form first, divide by Local_u32Divider, and Local_u32Divider/10 on each step */
		while(Local_u32Divider > 0){
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	ac 81       	ldd	r26, Y+4	; 0x04
    105c:	bd 81       	ldd	r27, Y+5	; 0x05
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	a1 05       	cpc	r26, r1
    1062:	b1 05       	cpc	r27, r1
    1064:	09 f6       	brne	.-126    	; 0xfe8 <CLCD_u8SendNumber+0x118>
			Local_u32Divider/=10;

		}

	}
}
    1066:	2f 96       	adiw	r28, 0x0f	; 15
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <CLCD_voidGoToXY+0x6>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8Adress;
	if(Copy_u8YPos == 0u){
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 23       	and	r24, r24
    108c:	19 f4       	brne	.+6      	; 0x1094 <CLCD_voidGoToXY+0x1c>

		Local_u8Adress = Copy_u8XPos;
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <CLCD_voidGoToXY+0x28>
	}else if(Copy_u8YPos == 1u){
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	19 f4       	brne	.+6      	; 0x10a0 <CLCD_voidGoToXY+0x28>

		Local_u8Adress = 0x40 + Copy_u8XPos;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 5c       	subi	r24, 0xC0	; 192
    109e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* 		Local_u8Adress = 0x40 * Copy_u8YPos  + Copy_u8XPos; */

	/*Set bit 7 for SetDDRAM Address command (on CLCD memory) */
	SET_BIT(Local_u8Adress, 7);
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	89 83       	std	Y+1, r24	; 0x01

	/*Execute Set DDRAM Address command (on CLCD memory)*/
	CLCD_voidSendCmd(Local_u8Adress);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <CLCD_u8SendSpecialCharacter>:


uint8 CLCD_u8SendSpecialCharacter(uint8 Copy_u8LocationNum, uint8 *Copy_pu8Pattern, uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	28 97       	sbiw	r28, 0x08	; 8
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	8c 83       	std	Y+4, r24	; 0x04
    10ce:	7e 83       	std	Y+6, r23	; 0x06
    10d0:	6d 83       	std	Y+5, r22	; 0x05
    10d2:	4f 83       	std	Y+7, r20	; 0x07
    10d4:	28 87       	std	Y+8, r18	; 0x08

	uint8 Local_u8ErrorState = OK;
    10d6:	1b 82       	std	Y+3, r1	; 0x03

	if(Copy_pu8Pattern != NULL){
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	59 f1       	breq	.+86     	; 0x1136 <CLCD_u8SendSpecialCharacter+0x7e>

		uint8 Local_u8LocationAddress = Copy_u8LocationNum * 8;
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8Counter;
		/*Set Bit 6 on CGRAM */
		SET_BIT(Local_u8LocationAddress, 6);
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 64       	ori	r24, 0x40	; 64
    10f8:	8a 83       	std	Y+2, r24	; 0x02

		/* Set CGRAM address in address counter.   */
		CLCD_voidSendCmd(Local_u8LocationAddress);
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

		/* Write data into internal CGRAM). */

		for(Local_u8Counter = 0; Local_u8Counter < 8u;Local_u8Counter++){
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <CLCD_u8SendSpecialCharacter+0x68>
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);  /* Send byte by byte to location */
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	fc 01       	movw	r30, r24
    1110:	e2 0f       	add	r30, r18
    1112:	f3 1f       	adc	r31, r19
    1114:	80 81       	ld	r24, Z
    1116:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		/* Set CGRAM address in address counter.   */
		CLCD_voidSendCmd(Local_u8LocationAddress);

		/* Write data into internal CGRAM). */

		for(Local_u8Counter = 0; Local_u8Counter < 8u;Local_u8Counter++){
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	88 30       	cpi	r24, 0x08	; 8
    1124:	78 f3       	brcs	.-34     	; 0x1104 <CLCD_u8SendSpecialCharacter+0x4c>
		}


		/* Set DDRAM address in address counter to display pattern   */

		CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	68 85       	ldd	r22, Y+8	; 0x08
    112a:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>

		/* * Display the special pattern inside CGRAM
           * send location of pattern, 0 - 7 */

		CLCD_voidSendData(Copy_u8LocationNum);
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    1134:	02 c0       	rjmp	.+4      	; 0x113a <CLCD_u8SendSpecialCharacter+0x82>


	}else{
		Local_u8ErrorState = NULL_PTR_ERR;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	8b 83       	std	Y+3, r24	; 0x03
	}


	return Local_u8ErrorState;
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    113c:	28 96       	adiw	r28, 0x08	; 8
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_cfg.h"



uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	28 97       	sbiw	r28, 0x08	; 8
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	6b 83       	std	Y+3, r22	; 0x03
    1166:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
    1168:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	08 f0       	brcs	.+2      	; 0x1172 <DIO_u8SetPinDirection+0x24>
    1170:	eb c0       	rjmp	.+470    	; 0x1348 <DIO_u8SetPinDirection+0x1fa>


		if(Copy_u8Direction == DIO_u8PIN_OUTPUT){
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	09 f0       	breq	.+2      	; 0x117a <DIO_u8SetPinDirection+0x2c>
    1178:	6e c0       	rjmp	.+220    	; 0x1256 <DIO_u8SetPinDirection+0x108>

			switch(Copy_u8Port){
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	38 87       	std	Y+8, r19	; 0x08
    1182:	2f 83       	std	Y+7, r18	; 0x07
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
    1186:	98 85       	ldd	r25, Y+8	; 0x08
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	41 f1       	breq	.+80     	; 0x11de <DIO_u8SetPinDirection+0x90>
    118e:	2f 81       	ldd	r18, Y+7	; 0x07
    1190:	38 85       	ldd	r19, Y+8	; 0x08
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <DIO_u8SetPinDirection+0x54>
    1198:	8f 81       	ldd	r24, Y+7	; 0x07
    119a:	98 85       	ldd	r25, Y+8	; 0x08
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <DIO_u8SetPinDirection+0x6a>
    11a0:	57 c0       	rjmp	.+174    	; 0x1250 <DIO_u8SetPinDirection+0x102>
    11a2:	2f 81       	ldd	r18, Y+7	; 0x07
    11a4:	38 85       	ldd	r19, Y+8	; 0x08
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	61 f1       	breq	.+88     	; 0x1204 <DIO_u8SetPinDirection+0xb6>
    11ac:	8f 81       	ldd	r24, Y+7	; 0x07
    11ae:	98 85       	ldd	r25, Y+8	; 0x08
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	d1 f1       	breq	.+116    	; 0x122a <DIO_u8SetPinDirection+0xdc>
    11b6:	4c c0       	rjmp	.+152    	; 0x1250 <DIO_u8SetPinDirection+0x102>

			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    11b8:	aa e3       	ldi	r26, 0x3A	; 58
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	40 81       	ld	r20, Z
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_u8SetPinDirection+0x86>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_u8SetPinDirection+0x82>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	b7 c0       	rjmp	.+366    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
    11de:	a7 e3       	ldi	r26, 0x37	; 55
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e7 e3       	ldi	r30, 0x37	; 55
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	40 81       	ld	r20, Z
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8SetPinDirection+0xac>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8SetPinDirection+0xa8>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	a4 c0       	rjmp	.+328    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    1204:	a4 e3       	ldi	r26, 0x34	; 52
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e4 e3       	ldi	r30, 0x34	; 52
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	40 81       	ld	r20, Z
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_u8SetPinDirection+0xd2>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_u8SetPinDirection+0xce>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	91 c0       	rjmp	.+290    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    122a:	a1 e3       	ldi	r26, 0x31	; 49
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	40 81       	ld	r20, Z
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8SetPinDirection+0xf8>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8SetPinDirection+0xf4>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	7e c0       	rjmp	.+252    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK; break;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	7b c0       	rjmp	.+246    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			}

		}else if(Copy_u8Direction == DIO_u8PIN_INPUT){
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	88 23       	and	r24, r24
    125a:	09 f0       	breq	.+2      	; 0x125e <DIO_u8SetPinDirection+0x110>
    125c:	72 c0       	rjmp	.+228    	; 0x1342 <DIO_u8SetPinDirection+0x1f4>

			switch(Copy_u8Port){
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3e 83       	std	Y+6, r19	; 0x06
    1266:	2d 83       	std	Y+5, r18	; 0x05
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	49 f1       	breq	.+82     	; 0x12c4 <DIO_u8SetPinDirection+0x176>
    1272:	2d 81       	ldd	r18, Y+5	; 0x05
    1274:	3e 81       	ldd	r19, Y+6	; 0x06
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <DIO_u8SetPinDirection+0x138>
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <DIO_u8SetPinDirection+0x14e>
    1284:	5b c0       	rjmp	.+182    	; 0x133c <DIO_u8SetPinDirection+0x1ee>
    1286:	2d 81       	ldd	r18, Y+5	; 0x05
    1288:	3e 81       	ldd	r19, Y+6	; 0x06
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	71 f1       	breq	.+92     	; 0x12ec <DIO_u8SetPinDirection+0x19e>
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	e9 f1       	breq	.+122    	; 0x1314 <DIO_u8SetPinDirection+0x1c6>
    129a:	50 c0       	rjmp	.+160    	; 0x133c <DIO_u8SetPinDirection+0x1ee>

			case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	40 81       	ld	r20, Z
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8SetPinDirection+0x16a>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8SetPinDirection+0x166>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	44 c0       	rjmp	.+136    	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	40 81       	ld	r20, Z
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_u8SetPinDirection+0x192>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_u8SetPinDirection+0x18e>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	30 c0       	rjmp	.+96     	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    12ec:	a4 e3       	ldi	r26, 0x34	; 52
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	40 81       	ld	r20, Z
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_u8SetPinDirection+0x1ba>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_u8SetPinDirection+0x1b6>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	1c c0       	rjmp	.+56     	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    1314:	a1 e3       	ldi	r26, 0x31	; 49
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	40 81       	ld	r20, Z
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8SetPinDirection+0x1e2>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_u8SetPinDirection+0x1de>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	08 c0       	rjmp	.+16     	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	05 c0       	rjmp	.+10     	; 0x134c <DIO_u8SetPinDirection+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_u8SetPinDirection+0x1fe>
		}

	}else{

		Local_u8ErrState = NOK;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrState;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
}
    134e:	28 96       	adiw	r28, 0x08	; 8
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	28 97       	sbiw	r28, 0x08	; 8
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	6b 83       	std	Y+3, r22	; 0x03
    1378:	4c 83       	std	Y+4, r20	; 0x04


	uint8 Local_u8ErrState = OK;
    137a:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin <= DIO_u8PIN7){
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	08 f0       	brcs	.+2      	; 0x1384 <DIO_u8SetPinValue+0x24>
    1382:	eb c0       	rjmp	.+470    	; 0x155a <DIO_u8SetPinValue+0x1fa>


		if(Copy_u8Value == DIO_u8PIN_HIGH){
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	09 f0       	breq	.+2      	; 0x138c <DIO_u8SetPinValue+0x2c>
    138a:	6e c0       	rjmp	.+220    	; 0x1468 <DIO_u8SetPinValue+0x108>
			switch(Copy_u8Port){
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	38 87       	std	Y+8, r19	; 0x08
    1394:	2f 83       	std	Y+7, r18	; 0x07
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	41 f1       	breq	.+80     	; 0x13f0 <DIO_u8SetPinValue+0x90>
    13a0:	2f 81       	ldd	r18, Y+7	; 0x07
    13a2:	38 85       	ldd	r19, Y+8	; 0x08
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <DIO_u8SetPinValue+0x54>
    13aa:	8f 81       	ldd	r24, Y+7	; 0x07
    13ac:	98 85       	ldd	r25, Y+8	; 0x08
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <DIO_u8SetPinValue+0x6a>
    13b2:	57 c0       	rjmp	.+174    	; 0x1462 <DIO_u8SetPinValue+0x102>
    13b4:	2f 81       	ldd	r18, Y+7	; 0x07
    13b6:	38 85       	ldd	r19, Y+8	; 0x08
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	61 f1       	breq	.+88     	; 0x1416 <DIO_u8SetPinValue+0xb6>
    13be:	8f 81       	ldd	r24, Y+7	; 0x07
    13c0:	98 85       	ldd	r25, Y+8	; 0x08
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	91 05       	cpc	r25, r1
    13c6:	d1 f1       	breq	.+116    	; 0x143c <DIO_u8SetPinValue+0xdc>
    13c8:	4c c0       	rjmp	.+152    	; 0x1462 <DIO_u8SetPinValue+0x102>

			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    13ca:	ab e3       	ldi	r26, 0x3B	; 59
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e3       	ldi	r30, 0x3B	; 59
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	40 81       	ld	r20, Z
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_u8SetPinValue+0x86>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_u8SetPinValue+0x82>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	b7 c0       	rjmp	.+366    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
    13f0:	a8 e3       	ldi	r26, 0x38	; 56
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e8 e3       	ldi	r30, 0x38	; 56
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	40 81       	ld	r20, Z
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8SetPinValue+0xac>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8SetPinValue+0xa8>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	a4 c0       	rjmp	.+328    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	40 81       	ld	r20, Z
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8SetPinValue+0xd2>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8SetPinValue+0xce>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	91 c0       	rjmp	.+290    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	40 81       	ld	r20, Z
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8SetPinValue+0xf8>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8SetPinValue+0xf4>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	7e c0       	rjmp	.+252    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	7b c0       	rjmp	.+246    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			}
		}else if(Copy_u8Value == DIO_u8PIN_LOW ){
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	88 23       	and	r24, r24
    146c:	09 f0       	breq	.+2      	; 0x1470 <DIO_u8SetPinValue+0x110>
    146e:	72 c0       	rjmp	.+228    	; 0x1554 <DIO_u8SetPinValue+0x1f4>

			switch(Copy_u8Port){
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3e 83       	std	Y+6, r19	; 0x06
    1478:	2d 83       	std	Y+5, r18	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	49 f1       	breq	.+82     	; 0x14d6 <DIO_u8SetPinValue+0x176>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <DIO_u8SetPinValue+0x138>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <DIO_u8SetPinValue+0x14e>
    1496:	5b c0       	rjmp	.+182    	; 0x154e <DIO_u8SetPinValue+0x1ee>
    1498:	2d 81       	ldd	r18, Y+5	; 0x05
    149a:	3e 81       	ldd	r19, Y+6	; 0x06
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	71 f1       	breq	.+92     	; 0x14fe <DIO_u8SetPinValue+0x19e>
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <DIO_u8SetPinValue+0x1c6>
    14ac:	50 c0       	rjmp	.+160    	; 0x154e <DIO_u8SetPinValue+0x1ee>

			case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	40 81       	ld	r20, Z
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_u8SetPinValue+0x16a>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_u8SetPinValue+0x166>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	44 c0       	rjmp	.+136    	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
    14d6:	a8 e3       	ldi	r26, 0x38	; 56
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	40 81       	ld	r20, Z
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_u8SetPinValue+0x192>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_u8SetPinValue+0x18e>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	30 c0       	rjmp	.+96     	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    14fe:	a5 e3       	ldi	r26, 0x35	; 53
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	40 81       	ld	r20, Z
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 2e       	mov	r0, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_u8SetPinValue+0x1ba>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0a 94       	dec	r0
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_u8SetPinValue+0x1b6>
    151e:	80 95       	com	r24
    1520:	84 23       	and	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	1c c0       	rjmp	.+56     	; 0x155e <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	40 81       	ld	r20, Z
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_u8SetPinValue+0x1e2>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_u8SetPinValue+0x1de>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	08 c0       	rjmp	.+16     	; 0x155e <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	05 c0       	rjmp	.+10     	; 0x155e <DIO_u8SetPinValue+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_u8SetPinValue+0x1fe>
		}
	}else{
		Local_u8ErrState = NOK;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1560:	28 96       	adiw	r28, 0x08	; 8
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value){
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	27 97       	sbiw	r28, 0x07	; 7
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	6b 83       	std	Y+3, r22	; 0x03
    158a:	5d 83       	std	Y+5, r21	; 0x05
    158c:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
    158e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 30       	cpi	r24, 0x08	; 8
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_u8ReadPinValue+0x26>
    1596:	7c c0       	rjmp	.+248    	; 0x1690 <DIO_u8ReadPinValue+0x11e>

		if(Copy_pu8Value != NULL){
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	09 f4       	brne	.+2      	; 0x15a2 <DIO_u8ReadPinValue+0x30>
    15a0:	74 c0       	rjmp	.+232    	; 0x168a <DIO_u8ReadPinValue+0x118>

			switch(Copy_u8Port){
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3f 83       	std	Y+7, r19	; 0x07
    15aa:	2e 83       	std	Y+6, r18	; 0x06
    15ac:	4e 81       	ldd	r20, Y+6	; 0x06
    15ae:	5f 81       	ldd	r21, Y+7	; 0x07
    15b0:	41 30       	cpi	r20, 0x01	; 1
    15b2:	51 05       	cpc	r21, r1
    15b4:	59 f1       	breq	.+86     	; 0x160c <DIO_u8ReadPinValue+0x9a>
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	34 f4       	brge	.+12     	; 0x15cc <DIO_u8ReadPinValue+0x5a>
    15c0:	2e 81       	ldd	r18, Y+6	; 0x06
    15c2:	3f 81       	ldd	r19, Y+7	; 0x07
    15c4:	21 15       	cp	r18, r1
    15c6:	31 05       	cpc	r19, r1
    15c8:	69 f0       	breq	.+26     	; 0x15e4 <DIO_u8ReadPinValue+0x72>
    15ca:	5c c0       	rjmp	.+184    	; 0x1684 <DIO_u8ReadPinValue+0x112>
    15cc:	4e 81       	ldd	r20, Y+6	; 0x06
    15ce:	5f 81       	ldd	r21, Y+7	; 0x07
    15d0:	42 30       	cpi	r20, 0x02	; 2
    15d2:	51 05       	cpc	r21, r1
    15d4:	79 f1       	breq	.+94     	; 0x1634 <DIO_u8ReadPinValue+0xc2>
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_u8ReadPinValue+0x70>
    15e0:	3d c0       	rjmp	.+122    	; 0x165c <DIO_u8ReadPinValue+0xea>
    15e2:	50 c0       	rjmp	.+160    	; 0x1684 <DIO_u8ReadPinValue+0x112>

			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_u8ReadPinValue+0x8a>
    15f8:	55 95       	asr	r21
    15fa:	47 95       	ror	r20
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_u8ReadPinValue+0x86>
    1600:	ca 01       	movw	r24, r20
    1602:	81 70       	andi	r24, 0x01	; 1
    1604:	ec 81       	ldd	r30, Y+4	; 0x04
    1606:	fd 81       	ldd	r31, Y+5	; 0x05
    1608:	80 83       	st	Z, r24
    160a:	44 c0       	rjmp	.+136    	; 0x1694 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    160c:	e6 e3       	ldi	r30, 0x36	; 54
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_u8ReadPinValue+0xb2>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_u8ReadPinValue+0xae>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	ec 81       	ldd	r30, Y+4	; 0x04
    162e:	fd 81       	ldd	r31, Y+5	; 0x05
    1630:	80 83       	st	Z, r24
    1632:	30 c0       	rjmp	.+96     	; 0x1694 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    1634:	e3 e3       	ldi	r30, 0x33	; 51
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8ReadPinValue+0xda>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8ReadPinValue+0xd6>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	ec 81       	ldd	r30, Y+4	; 0x04
    1656:	fd 81       	ldd	r31, Y+5	; 0x05
    1658:	80 83       	st	Z, r24
    165a:	1c c0       	rjmp	.+56     	; 0x1694 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    165c:	e0 e3       	ldi	r30, 0x30	; 48
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8ReadPinValue+0x102>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8ReadPinValue+0xfe>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	ec 81       	ldd	r30, Y+4	; 0x04
    167e:	fd 81       	ldd	r31, Y+5	; 0x05
    1680:	80 83       	st	Z, r24
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <DIO_u8ReadPinValue+0x122>
			default: Local_u8ErrState = NOK; break;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <DIO_u8ReadPinValue+0x122>
			}
		}else{
			Local_u8ErrState = NULL_PTR_ERR;
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8ReadPinValue+0x122>

		}
	}else{
		Local_u8ErrState = NOK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
	}
	// check if valid pin

	return Local_u8ErrState;
    1694:	89 81       	ldd	r24, Y+1	; 0x01

}
    1696:	27 96       	adiw	r28, 0x07	; 7
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction){
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_u8SetPortDirection+0x6>
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_u8SetPortDirection+0x8>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    16ba:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3d 83       	std	Y+5, r19	; 0x05
    16c4:	2c 83       	std	Y+4, r18	; 0x04
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	d1 f0       	breq	.+52     	; 0x1704 <DIO_u8SetPortDirection+0x5c>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <DIO_u8SetPortDirection+0x3c>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO_u8SetPortDirection+0x52>
    16e2:	1f c0       	rjmp	.+62     	; 0x1722 <DIO_u8SetPortDirection+0x7a>
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <DIO_u8SetPortDirection+0x66>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <DIO_u8SetPortDirection+0x70>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <DIO_u8SetPortDirection+0x7a>

	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    16fa:	ea e3       	ldi	r30, 0x3A	; 58
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	80 83       	st	Z, r24
    1702:	11 c0       	rjmp	.+34     	; 0x1726 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    1704:	e7 e3       	ldi	r30, 0x37	; 55
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	80 83       	st	Z, r24
    170c:	0c c0       	rjmp	.+24     	; 0x1726 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    170e:	e4 e3       	ldi	r30, 0x34	; 52
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	80 83       	st	Z, r24
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    1718:	e1 e3       	ldi	r30, 0x31	; 49
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	80 83       	st	Z, r24
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrState = NOK;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrState;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <DIO_u8SetPortValue>:
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_u8SetPortValue+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_u8SetPortValue+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    174a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	3d 83       	std	Y+5, r19	; 0x05
    1754:	2c 83       	std	Y+4, r18	; 0x04
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	d1 f0       	breq	.+52     	; 0x1794 <DIO_u8SetPortValue+0x5c>
    1760:	2c 81       	ldd	r18, Y+4	; 0x04
    1762:	3d 81       	ldd	r19, Y+5	; 0x05
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	2c f4       	brge	.+10     	; 0x1774 <DIO_u8SetPortValue+0x3c>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	61 f0       	breq	.+24     	; 0x178a <DIO_u8SetPortValue+0x52>
    1772:	1f c0       	rjmp	.+62     	; 0x17b2 <DIO_u8SetPortValue+0x7a>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	81 f0       	breq	.+32     	; 0x179e <DIO_u8SetPortValue+0x66>
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	81 f0       	breq	.+32     	; 0x17a8 <DIO_u8SetPortValue+0x70>
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <DIO_u8SetPortValue+0x7a>

	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    178a:	eb e3       	ldi	r30, 0x3B	; 59
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	80 83       	st	Z, r24
    1792:	11 c0       	rjmp	.+34     	; 0x17b6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	80 83       	st	Z, r24
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	80 83       	st	Z, r24
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	80 83       	st	Z, r24
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrState = NOK;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <DIO_u8TogglePinValue>:
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <DIO_u8TogglePinValue+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DIO_u8TogglePinValue+0x8>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    17d8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    17da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <DIO_u8TogglePinValue+0x1c>
    17e2:	6e c0       	rjmp	.+220    	; 0x18c0 <DIO_u8TogglePinValue+0xf8>


		switch(Copy_u8Port){
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3d 83       	std	Y+5, r19	; 0x05
    17ec:	2c 83       	std	Y+4, r18	; 0x04
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	41 f1       	breq	.+80     	; 0x1848 <DIO_u8TogglePinValue+0x80>
    17f8:	2c 81       	ldd	r18, Y+4	; 0x04
    17fa:	3d 81       	ldd	r19, Y+5	; 0x05
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	2c f4       	brge	.+10     	; 0x180c <DIO_u8TogglePinValue+0x44>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	61 f0       	breq	.+24     	; 0x1822 <DIO_u8TogglePinValue+0x5a>
    180a:	57 c0       	rjmp	.+174    	; 0x18ba <DIO_u8TogglePinValue+0xf2>
    180c:	2c 81       	ldd	r18, Y+4	; 0x04
    180e:	3d 81       	ldd	r19, Y+5	; 0x05
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	61 f1       	breq	.+88     	; 0x186e <DIO_u8TogglePinValue+0xa6>
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	9d 81       	ldd	r25, Y+5	; 0x05
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	91 05       	cpc	r25, r1
    181e:	d1 f1       	breq	.+116    	; 0x1894 <DIO_u8TogglePinValue+0xcc>
    1820:	4c c0       	rjmp	.+152    	; 0x18ba <DIO_u8TogglePinValue+0xf2>

		case DIO_u8PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
    1822:	ab e3       	ldi	r26, 0x3B	; 59
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	eb e3       	ldi	r30, 0x3B	; 59
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	40 81       	ld	r20, Z
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_u8TogglePinValue+0x76>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_u8TogglePinValue+0x72>
    1842:	84 27       	eor	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	3e c0       	rjmp	.+124    	; 0x18c4 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTB: TOG_BIT(PORTB, Copy_u8Pin); break;
    1848:	a8 e3       	ldi	r26, 0x38	; 56
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	40 81       	ld	r20, Z
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8TogglePinValue+0x9c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_u8TogglePinValue+0x98>
    1868:	84 27       	eor	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	2b c0       	rjmp	.+86     	; 0x18c4 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
    186e:	a5 e3       	ldi	r26, 0x35	; 53
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	40 81       	ld	r20, Z
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_u8TogglePinValue+0xc2>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_u8TogglePinValue+0xbe>
    188e:	84 27       	eor	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	18 c0       	rjmp	.+48     	; 0x18c4 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
    1894:	a2 e3       	ldi	r26, 0x32	; 50
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	40 81       	ld	r20, Z
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8TogglePinValue+0xe8>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8TogglePinValue+0xe4>
    18b4:	84 27       	eor	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <DIO_u8TogglePinValue+0xfc>
		default: Local_u8ErrState = NOK;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_u8TogglePinValue+0xfc>
		}
	}else{
		Local_u8ErrState = NOK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <EXTI_voidInit>:
#include "EXTI_cfg.h"   /*Should be on this order because depend on enum on interface.h, and macros on prv */
#include "EXTI_reg.h"

static void (*EXTI_pvCallBackFunc[3])(void) = {0};

void EXTI_voidInit(void){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR, MCUCR_ISC00);
	SET_BIT(MCUCR, MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE

	CLR_BIT(MCUCR, MCUCR_ISC00);
    18de:	a5 e5       	ldi	r26, 0x55	; 85
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e5 e5       	ldi	r30, 0x55	; 85
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8e 7f       	andi	r24, 0xFE	; 254
    18ea:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
    18ec:	a5 e5       	ldi	r26, 0x55	; 85
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e5       	ldi	r30, 0x55	; 85
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	82 60       	ori	r24, 0x02	; 2
    18f8:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC10);
	SET_BIT(MCUCR, MCUCR_ISC11);

#elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE

	CLR_BIT(MCUCR, MCUCR_ISC10);
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8b 7f       	andi	r24, 0xFB	; 251
    1906:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC11);
    1908:	a5 e5       	ldi	r26, 0x55	; 85
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e5       	ldi	r30, 0x55	; 85
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	88 60       	ori	r24, 0x08	; 8
    1914:	8c 93       	st	X, r24

	SET_BIT(MCUCSR, MCUCSR_ISC2);

#elif INT2_SENSE_CTRL == EXTI_FALLING_EDGE

	CLR_BIT(MCUCSR, MCUCSR_ISC2);
    1916:	a4 e5       	ldi	r26, 0x54	; 84
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e4 e5       	ldi	r30, 0x54	; 84
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8f 7b       	andi	r24, 0xBF	; 191
    1922:	8c 93       	st	X, r24
#endif



#if INT0_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    1924:	ab e5       	ldi	r26, 0x5B	; 91
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	eb e5       	ldi	r30, 0x5B	; 91
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 64       	ori	r24, 0x40	; 64
    1930:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#else  #error Wrong  INT0_INIT_STATE  Configuration
#endif

#if INT1_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    1932:	ab e5       	ldi	r26, 0x5B	; 91
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	eb e5       	ldi	r30, 0x5B	; 91
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 68       	ori	r24, 0x80	; 128
    193e:	8c 93       	st	X, r24
#else  #error Wrong INT1_INIT_STATE  Configuration
#endif


#if INT2_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    1940:	ab e5       	ldi	r26, 0x5B	; 91
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	eb e5       	ldi	r30, 0x5B	; 91
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	80 62       	ori	r24, 0x20	; 32
    194c:	8c 93       	st	X, r24
#else  #error Wrong  INT2_INIT_STATE  Configuration
#endif



}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <EXTI_u8SetSenseCtrl>:

uint8 EXTI_u8SetSenseCtrl(EXTI_IntChannel_t Copy_IntCh, EXTI_SenceCtrl_t Copy_SenceCtrl){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	29 97       	sbiw	r28, 0x09	; 9
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    196c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_IntCh == INT0){
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	88 23       	and	r24, r24
    1972:	09 f0       	breq	.+2      	; 0x1976 <EXTI_u8SetSenseCtrl+0x22>
    1974:	5e c0       	rjmp	.+188    	; 0x1a32 <EXTI_u8SetSenseCtrl+0xde>


		switch(Copy_SenceCtrl){
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	39 87       	std	Y+9, r19	; 0x09
    197e:	28 87       	std	Y+8, r18	; 0x08
    1980:	88 85       	ldd	r24, Y+8	; 0x08
    1982:	99 85       	ldd	r25, Y+9	; 0x09
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	21 f1       	breq	.+72     	; 0x19d2 <EXTI_u8SetSenseCtrl+0x7e>
    198a:	28 85       	ldd	r18, Y+8	; 0x08
    198c:	39 85       	ldd	r19, Y+9	; 0x09
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	2c f4       	brge	.+10     	; 0x199e <EXTI_u8SetSenseCtrl+0x4a>
    1994:	88 85       	ldd	r24, Y+8	; 0x08
    1996:	99 85       	ldd	r25, Y+9	; 0x09
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 f0       	breq	.+24     	; 0x19b4 <EXTI_u8SetSenseCtrl+0x60>
    199c:	47 c0       	rjmp	.+142    	; 0x1a2c <EXTI_u8SetSenseCtrl+0xd8>
    199e:	28 85       	ldd	r18, Y+8	; 0x08
    19a0:	39 85       	ldd	r19, Y+9	; 0x09
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	21 f1       	breq	.+72     	; 0x19f0 <EXTI_u8SetSenseCtrl+0x9c>
    19a8:	88 85       	ldd	r24, Y+8	; 0x08
    19aa:	99 85       	ldd	r25, Y+9	; 0x09
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	71 f1       	breq	.+92     	; 0x1a0e <EXTI_u8SetSenseCtrl+0xba>
    19b2:	3c c0       	rjmp	.+120    	; 0x1a2c <EXTI_u8SetSenseCtrl+0xd8>
		case LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    19b4:	a5 e5       	ldi	r26, 0x55	; 85
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e5       	ldi	r30, 0x55	; 85
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8e 7f       	andi	r24, 0xFE	; 254
    19c0:	8c 93       	st	X, r24
    19c2:	a5 e5       	ldi	r26, 0x55	; 85
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e5 e5       	ldi	r30, 0x55	; 85
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8d 7f       	andi	r24, 0xFD	; 253
    19ce:	8c 93       	st	X, r24
    19d0:	b7 c0       	rjmp	.+366    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case ON_CHANE: SET_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    19d2:	a5 e5       	ldi	r26, 0x55	; 85
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e5 e5       	ldi	r30, 0x55	; 85
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	8c 93       	st	X, r24
    19e0:	a5 e5       	ldi	r26, 0x55	; 85
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e5 e5       	ldi	r30, 0x55	; 85
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8d 7f       	andi	r24, 0xFD	; 253
    19ec:	8c 93       	st	X, r24
    19ee:	a8 c0       	rjmp	.+336    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    19f0:	a5 e5       	ldi	r26, 0x55	; 85
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e5 e5       	ldi	r30, 0x55	; 85
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8e 7f       	andi	r24, 0xFE	; 254
    19fc:	8c 93       	st	X, r24
    19fe:	a5 e5       	ldi	r26, 0x55	; 85
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e5 e5       	ldi	r30, 0x55	; 85
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	82 60       	ori	r24, 0x02	; 2
    1a0a:	8c 93       	st	X, r24
    1a0c:	99 c0       	rjmp	.+306    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    1a0e:	a5 e5       	ldi	r26, 0x55	; 85
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e5       	ldi	r30, 0x55	; 85
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	81 60       	ori	r24, 0x01	; 1
    1a1a:	8c 93       	st	X, r24
    1a1c:	a5 e5       	ldi	r26, 0x55	; 85
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e5       	ldi	r30, 0x55	; 85
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	82 60       	ori	r24, 0x02	; 2
    1a28:	8c 93       	st	X, r24
    1a2a:	8a c0       	rjmp	.+276    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	87 c0       	rjmp	.+270    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		}

	}else if(Copy_IntCh == INT1){
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <EXTI_u8SetSenseCtrl+0xe6>
    1a38:	5e c0       	rjmp	.+188    	; 0x1af6 <EXTI_u8SetSenseCtrl+0x1a2>


		switch(Copy_SenceCtrl){
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3f 83       	std	Y+7, r19	; 0x07
    1a42:	2e 83       	std	Y+6, r18	; 0x06
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	21 f1       	breq	.+72     	; 0x1a96 <EXTI_u8SetSenseCtrl+0x142>
    1a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a50:	3f 81       	ldd	r19, Y+7	; 0x07
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <EXTI_u8SetSenseCtrl+0x10e>
    1a58:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <EXTI_u8SetSenseCtrl+0x124>
    1a60:	47 c0       	rjmp	.+142    	; 0x1af0 <EXTI_u8SetSenseCtrl+0x19c>
    1a62:	2e 81       	ldd	r18, Y+6	; 0x06
    1a64:	3f 81       	ldd	r19, Y+7	; 0x07
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	21 f1       	breq	.+72     	; 0x1ab4 <EXTI_u8SetSenseCtrl+0x160>
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	71 f1       	breq	.+92     	; 0x1ad2 <EXTI_u8SetSenseCtrl+0x17e>
    1a76:	3c c0       	rjmp	.+120    	; 0x1af0 <EXTI_u8SetSenseCtrl+0x19c>
		case LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    1a78:	a5 e5       	ldi	r26, 0x55	; 85
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e5 e5       	ldi	r30, 0x55	; 85
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8b 7f       	andi	r24, 0xFB	; 251
    1a84:	8c 93       	st	X, r24
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	87 7f       	andi	r24, 0xF7	; 247
    1a92:	8c 93       	st	X, r24
    1a94:	55 c0       	rjmp	.+170    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case ON_CHANE:  SET_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    1a96:	a5 e5       	ldi	r26, 0x55	; 85
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e5 e5       	ldi	r30, 0x55	; 85
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	84 60       	ori	r24, 0x04	; 4
    1aa2:	8c 93       	st	X, r24
    1aa4:	a5 e5       	ldi	r26, 0x55	; 85
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e5       	ldi	r30, 0x55	; 85
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	87 7f       	andi	r24, 0xF7	; 247
    1ab0:	8c 93       	st	X, r24
    1ab2:	46 c0       	rjmp	.+140    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    1ab4:	a5 e5       	ldi	r26, 0x55	; 85
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e5       	ldi	r30, 0x55	; 85
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8b 7f       	andi	r24, 0xFB	; 251
    1ac0:	8c 93       	st	X, r24
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 60       	ori	r24, 0x08	; 8
    1ace:	8c 93       	st	X, r24
    1ad0:	37 c0       	rjmp	.+110    	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    1ad2:	a5 e5       	ldi	r26, 0x55	; 85
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e5       	ldi	r30, 0x55	; 85
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	84 60       	ori	r24, 0x04	; 4
    1ade:	8c 93       	st	X, r24
    1ae0:	a5 e5       	ldi	r26, 0x55	; 85
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e5       	ldi	r30, 0x55	; 85
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8c 93       	st	X, r24
    1aee:	28 c0       	rjmp	.+80     	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	25 c0       	rjmp	.+74     	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		}

	}else if(Copy_IntCh == INT2){
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	11 f5       	brne	.+68     	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>


		switch(Copy_SenceCtrl){
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3d 83       	std	Y+5, r19	; 0x05
    1b04:	2c 83       	std	Y+4, r18	; 0x04
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	31 f0       	breq	.+12     	; 0x1b1c <EXTI_u8SetSenseCtrl+0x1c8>
    1b10:	2c 81       	ldd	r18, Y+4	; 0x04
    1b12:	3d 81       	ldd	r19, Y+5	; 0x05
    1b14:	23 30       	cpi	r18, 0x03	; 3
    1b16:	31 05       	cpc	r19, r1
    1b18:	49 f0       	breq	.+18     	; 0x1b2c <EXTI_u8SetSenseCtrl+0x1d8>
    1b1a:	10 c0       	rjmp	.+32     	; 0x1b3c <EXTI_u8SetSenseCtrl+0x1e8>
		case FALLING_EDGE: CLR_BIT(MCUCSR, MCUCSR_ISC2); break;
    1b1c:	a4 e5       	ldi	r26, 0x54	; 84
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e4 e5       	ldi	r30, 0x54	; 84
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 7b       	andi	r24, 0xBF	; 191
    1b28:	8c 93       	st	X, r24
    1b2a:	0a c0       	rjmp	.+20     	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCSR, MCUCSR_ISC2); break;
    1b2c:	a4 e5       	ldi	r26, 0x54	; 84
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e4 e5       	ldi	r30, 0x54	; 84
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 64       	ori	r24, 0x40	; 64
    1b38:	8c 93       	st	X, r24
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return Local_u8ErrorState;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b42:	29 96       	adiw	r28, 0x09	; 9
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <EXTI_u8EnableIntChannel>:
uint8 EXTI_u8EnableIntChannel(EXTI_IntChannel_t Copy_IntCh){
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <EXTI_u8EnableIntChannel+0x6>
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <EXTI_u8EnableIntChannel+0x8>
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1b62:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh){
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3c 83       	std	Y+4, r19	; 0x04
    1b6c:	2b 83       	std	Y+3, r18	; 0x03
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	89 f0       	breq	.+34     	; 0x1b9a <EXTI_u8EnableIntChannel+0x46>
    1b78:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	a1 f0       	breq	.+40     	; 0x1baa <EXTI_u8EnableIntChannel+0x56>
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	c1 f4       	brne	.+48     	; 0x1bba <EXTI_u8EnableIntChannel+0x66>
	case INT0: SET_BIT(GICR,GICR_INT0); break;
    1b8a:	ab e5       	ldi	r26, 0x5B	; 91
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	eb e5       	ldi	r30, 0x5B	; 91
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 64       	ori	r24, 0x40	; 64
    1b96:	8c 93       	st	X, r24
    1b98:	12 c0       	rjmp	.+36     	; 0x1bbe <EXTI_u8EnableIntChannel+0x6a>
	case INT1: SET_BIT(GICR,GICR_INT1); break;
    1b9a:	ab e5       	ldi	r26, 0x5B	; 91
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e5       	ldi	r30, 0x5B	; 91
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 68       	ori	r24, 0x80	; 128
    1ba6:	8c 93       	st	X, r24
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <EXTI_u8EnableIntChannel+0x6a>
	case INT2: SET_BIT(GICR,GICR_INT2); break;
    1baa:	ab e5       	ldi	r26, 0x5B	; 91
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e5       	ldi	r30, 0x5B	; 91
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 62       	ori	r24, 0x20	; 32
    1bb6:	8c 93       	st	X, r24
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <EXTI_u8EnableIntChannel+0x6a>
	default: Local_u8ErrorState = NOK; break;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <EXTI_u8DisableIntChannel>:

uint8 EXTI_u8DisableIntChannel(EXTI_IntChannel_t Copy_IntCh){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <EXTI_u8DisableIntChannel+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <EXTI_u8DisableIntChannel+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1bdc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh){
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	3c 83       	std	Y+4, r19	; 0x04
    1be6:	2b 83       	std	Y+3, r18	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	89 f0       	breq	.+34     	; 0x1c14 <EXTI_u8DisableIntChannel+0x46>
    1bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	a1 f0       	breq	.+40     	; 0x1c24 <EXTI_u8DisableIntChannel+0x56>
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	c1 f4       	brne	.+48     	; 0x1c34 <EXTI_u8DisableIntChannel+0x66>
	case INT0: CLR_BIT(GICR,GICR_INT0); break;
    1c04:	ab e5       	ldi	r26, 0x5B	; 91
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e5       	ldi	r30, 0x5B	; 91
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	8c 93       	st	X, r24
    1c12:	12 c0       	rjmp	.+36     	; 0x1c38 <EXTI_u8DisableIntChannel+0x6a>
	case INT1: CLR_BIT(GICR,GICR_INT1); break;
    1c14:	ab e5       	ldi	r26, 0x5B	; 91
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	eb e5       	ldi	r30, 0x5B	; 91
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	8c 93       	st	X, r24
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <EXTI_u8DisableIntChannel+0x6a>
	case INT2: CLR_BIT(GICR,GICR_INT2); break;
    1c24:	ab e5       	ldi	r26, 0x5B	; 91
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	eb e5       	ldi	r30, 0x5B	; 91
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 7d       	andi	r24, 0xDF	; 223
    1c30:	8c 93       	st	X, r24
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <EXTI_u8DisableIntChannel+0x6a>
	default: Local_u8ErrorState = NOK; break;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <EXTI_u8SetCallBack>:

/* ISR CODE (callback form App layer) */

uint8 EXTI_u8SetCallBack(EXTI_IntChannel_t Copy_IntCh, void (*Copy_pvCallBackFunc)(void)){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <EXTI_u8SetCallBack+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <EXTI_u8SetCallBack+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	7c 83       	std	Y+4, r23	; 0x04
    1c58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c5a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL){
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	c9 f0       	breq	.+50     	; 0x1c96 <EXTI_u8SetCallBack+0x4e>

		if(Copy_IntCh == INT0 || Copy_IntCh == INT1 || Copy_IntCh == INT2 ){
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 23       	and	r24, r24
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <EXTI_u8SetCallBack+0x2e>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	19 f0       	breq	.+6      	; 0x1c76 <EXTI_u8SetCallBack+0x2e>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	69 f4       	brne	.+26     	; 0x1c90 <EXTI_u8SetCallBack+0x48>
		EXTI_pvCallBackFunc[Copy_IntCh] = Copy_pvCallBackFunc;
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	fc 01       	movw	r30, r24
    1c82:	e8 56       	subi	r30, 0x68	; 104
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <EXTI_u8SetCallBack+0x52>
		}else{
			Local_u8ErrorState = NOK;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <EXTI_u8SetCallBack+0x52>
		}

	}else{
		Local_u8ErrorState = NULL_PTR_ERR;
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <__vector_1>:



__attribute__((signal)) void  __vector_1(void);

void  __vector_1(void){ /* INT0 ISR*/
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	2f 93       	push	r18
    1cb6:	3f 93       	push	r19
    1cb8:	4f 93       	push	r20
    1cba:	5f 93       	push	r21
    1cbc:	6f 93       	push	r22
    1cbe:	7f 93       	push	r23
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
    1cc8:	ef 93       	push	r30
    1cca:	ff 93       	push	r31
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_pvCallBackFunc[INT0] != NULL){
    1cd4:	80 91 98 00 	lds	r24, 0x0098
    1cd8:	90 91 99 00 	lds	r25, 0x0099
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	29 f0       	breq	.+10     	; 0x1cea <__vector_1+0x40>
		EXTI_pvCallBackFunc[INT0]();
    1ce0:	e0 91 98 00 	lds	r30, 0x0098
    1ce4:	f0 91 99 00 	lds	r31, 0x0099
    1ce8:	09 95       	icall
	}
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <__vector_2>:

__attribute__((signal)) void  __vector_2(void);

void  __vector_2(void){ /* INT1 ISR*/
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	2f 93       	push	r18
    1d1c:	3f 93       	push	r19
    1d1e:	4f 93       	push	r20
    1d20:	5f 93       	push	r21
    1d22:	6f 93       	push	r22
    1d24:	7f 93       	push	r23
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	af 93       	push	r26
    1d2c:	bf 93       	push	r27
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_pvCallBackFunc[INT1] != NULL){
    1d3a:	80 91 9a 00 	lds	r24, 0x009A
    1d3e:	90 91 9b 00 	lds	r25, 0x009B
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <__vector_2+0x40>
		EXTI_pvCallBackFunc[INT1]();
    1d46:	e0 91 9a 00 	lds	r30, 0x009A
    1d4a:	f0 91 9b 00 	lds	r31, 0x009B
    1d4e:	09 95       	icall
	}
}
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	ff 91       	pop	r31
    1d56:	ef 91       	pop	r30
    1d58:	bf 91       	pop	r27
    1d5a:	af 91       	pop	r26
    1d5c:	9f 91       	pop	r25
    1d5e:	8f 91       	pop	r24
    1d60:	7f 91       	pop	r23
    1d62:	6f 91       	pop	r22
    1d64:	5f 91       	pop	r21
    1d66:	4f 91       	pop	r20
    1d68:	3f 91       	pop	r19
    1d6a:	2f 91       	pop	r18
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f 90       	pop	r0
    1d72:	1f 90       	pop	r1
    1d74:	18 95       	reti

00001d76 <__vector_3>:


__attribute__((signal)) void  __vector_3(void);

void  __vector_3(void){ /* INT2 ISR*/
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[INT2] != NULL){
    1da0:	80 91 9c 00 	lds	r24, 0x009C
    1da4:	90 91 9d 00 	lds	r25, 0x009D
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	29 f0       	breq	.+10     	; 0x1db6 <__vector_3+0x40>

		EXTI_pvCallBackFunc[INT2]();
    1dac:	e0 91 9c 00 	lds	r30, 0x009C
    1db0:	f0 91 9d 00 	lds	r31, 0x009D
    1db4:	09 95       	icall
	}
}
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <GIE_voidEnableGlobal>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_reg.h"

void GIE_voidEnableGlobal(void){
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62

      __asm volatile("SEI");   /* inline assembly Set I-Bit */
    1de4:	78 94       	sei
	/* SET_BIT(SREG, SREG_I);*/
	 
}
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void){
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
	
	   __asm volatile("CLI");  /* inline assembly Clear I-Bit */
    1df4:	f8 94       	cli

	/* CLR_BIT(SREG, SREG_I);*/
		 
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = PORTA_DIR;
    1e04:	ea e3       	ldi	r30, 0x3A	; 58
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1e0c:	e7 e3       	ldi	r30, 0x37	; 55
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    1e12:	e4 e3       	ldi	r30, 0x34	; 52
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    1e18:	e1 e3       	ldi	r30, 0x31	; 49
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 e3       	ldi	r24, 0x30	; 48
    1e1e:	80 83       	st	Z, r24
	
	PORTA = PORTA_INIT_VAL;
    1e20:	eb e3       	ldi	r30, 0x3B	; 59
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1e2e:	e5 e3       	ldi	r30, 0x35	; 53
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    1e36:	e2 e3       	ldi	r30, 0x32	; 50
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	80 83       	st	Z, r24

}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <main>:
void vChangePlayerOnePos();
void vChangePlayerTwoPos();
static uint8 Local_u8PlayrOneLine = 0;
static uint8 Local_u8PlayrTwoLine = 0;

void main(void){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	6e 97       	sbiw	r28, 0x1e	; 30
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61


	PORT_voidInit();
    1e58:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <PORT_voidInit>
	CLCD_voidInit();
    1e5c:	0e 94 98 06 	call	0xd30	; 0xd30 <CLCD_voidInit>
	GIE_voidEnableGlobal();
    1e60:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GIE_voidEnableGlobal>

	EXTI_voidInit();
    1e64:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <EXTI_voidInit>

	EXTI_u8SetCallBack(INT0, &vChangePlayerOnePos);
    1e68:	2b ec       	ldi	r18, 0xCB	; 203
    1e6a:	30 e1       	ldi	r19, 0x10	; 16
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	b9 01       	movw	r22, r18
    1e70:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(INT1, &vChangePlayerTwoPos);
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	31 e1       	ldi	r19, 0x11	; 17
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <EXTI_u8SetCallBack>

	CLCD_voidGoToXY(0, Local_u8PlayrOneLine);
    1e80:	90 91 9e 00 	lds	r25, 0x009E
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	69 2f       	mov	r22, r25
    1e88:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
	CLCD_u8SendString("|");
    1e8c:	80 e6       	ldi	r24, 0x60	; 96
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>


	CLCD_voidGoToXY(15, Local_u8PlayrTwoLine);
    1e94:	90 91 9f 00 	lds	r25, 0x009F
    1e98:	8f e0       	ldi	r24, 0x0F	; 15
    1e9a:	69 2f       	mov	r22, r25
    1e9c:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
	CLCD_u8SendString("|");
    1ea0:	80 e6       	ldi	r24, 0x60	; 96
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>


	static uint8 Local_u8PatternRun[8] ={0, 0, 0, 0b00001110, 0b00001110,0,0,0};

	uint8 Local_u8RandomLevel = 0;
    1ea8:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 Local_u8Counter1 = u8BALL_START_POS;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	8d 8f       	std	Y+29, r24	; 0x1d
    1eae:	9d c0       	rjmp	.+314    	; 0x1fea <main+0x1a6>


		/* move ball to right*/
		for(; Local_u8Counter1 < u8BALL_END_POS;Local_u8Counter1++){

			GIE_voidDisableGlobal();
    1eb0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <GIE_voidDisableGlobal>
			Local_u8RandomLevel = ((Local_u8Counter1) >>Local_u8PlayrTwoLine)%2;
    1eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	80 91 9f 00 	lds	r24, 0x009F
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a9 01       	movw	r20, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <main+0x86>
    1ec6:	55 95       	asr	r21
    1ec8:	47 95       	ror	r20
    1eca:	8a 95       	dec	r24
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <main+0x82>
    1ece:	ca 01       	movw	r24, r20
    1ed0:	22 e0       	ldi	r18, 0x02	; 2
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	b9 01       	movw	r22, r18
    1ed6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__divmodhi4>
    1eda:	8e 8f       	std	Y+30, r24	; 0x1e

			CLCD_u8SendSpecialCharacter(2,Local_u8PatternRun,Local_u8Counter1,Local_u8RandomLevel);
    1edc:	20 e9       	ldi	r18, 0x90	; 144
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1ee6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1ee8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <CLCD_u8SendSpecialCharacter>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ef2:	b3 e4       	ldi	r27, 0x43	; 67
    1ef4:	89 8f       	std	Y+25, r24	; 0x19
    1ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    1efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	69 8d       	ldd	r22, Y+25	; 0x19
    1efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	55 e4       	ldi	r21, 0x45	; 69
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8d 8b       	std	Y+21, r24	; 0x15
    1f16:	9e 8b       	std	Y+22, r25	; 0x16
    1f18:	af 8b       	std	Y+23, r26	; 0x17
    1f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <main+0xfa>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <main+0x178>
	else if (__tmp > 65535)
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	8f 89       	ldd	r24, Y+23	; 0x17
    1f44:	98 8d       	ldd	r25, Y+24	; 0x18
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <main+0x15a>
    1f80:	80 e9       	ldi	r24, 0x90	; 144
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <main+0x148>
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <main+0x13c>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	98 89       	ldd	r25, Y+16	; 0x10
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <main+0x184>
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(400);


			CLCD_voidGoToXY(Local_u8Counter1,Local_u8RandomLevel);
    1fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1fd4:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
			CLCD_u8SendString(" ");
    1fd8:	82 e6       	ldi	r24, 0x62	; 98
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
			GIE_voidEnableGlobal();
    1fe0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GIE_voidEnableGlobal>

	while(1){


		/* move ball to right*/
		for(; Local_u8Counter1 < u8BALL_END_POS;Local_u8Counter1++){
    1fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	8d 8f       	std	Y+29, r24	; 0x1d
    1fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fec:	8e 30       	cpi	r24, 0x0E	; 14
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <main+0x1ae>
    1ff0:	5f cf       	rjmp	.-322    	; 0x1eb0 <main+0x6c>


		}

		/*Check if player 2 block the ball  */
		if(Local_u8RandomLevel != Local_u8PlayrTwoLine){
    1ff2:	90 91 9f 00 	lds	r25, 0x009F
    1ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff8:	89 17       	cp	r24, r25
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <main+0x1d0>

			CLCD_voidSendCmd(CLCD_u8CLEAR_LCD);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
			CLCD_voidGoToXY(0, 0);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
			CLCD_u8SendString("Player One Win !!");
    200a:	84 e6       	ldi	r24, 0x64	; 100
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    2012:	b8 c0       	rjmp	.+368    	; 0x2184 <main+0x340>

		}else{


			/* move ball to left */
			for(Local_u8Counter1 = u8BALL_END_POS -1; Local_u8Counter1 >= u8BALL_START_POS;Local_u8Counter1--){
    2014:	8d e0       	ldi	r24, 0x0D	; 13
    2016:	8d 8f       	std	Y+29, r24	; 0x1d
    2018:	9d c0       	rjmp	.+314    	; 0x2154 <main+0x310>

				GIE_voidDisableGlobal();
    201a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <GIE_voidDisableGlobal>
				Local_u8RandomLevel = ((Local_u8Counter1) >>Local_u8PlayrOneLine)%2;
    201e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	80 91 9e 00 	lds	r24, 0x009E
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a9 01       	movw	r20, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <main+0x1f0>
    2030:	55 95       	asr	r21
    2032:	47 95       	ror	r20
    2034:	8a 95       	dec	r24
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <main+0x1ec>
    2038:	ca 01       	movw	r24, r20
    203a:	22 e0       	ldi	r18, 0x02	; 2
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__divmodhi4>
    2044:	8e 8f       	std	Y+30, r24	; 0x1e

				CLCD_u8SendSpecialCharacter(2,Local_u8PatternRun,Local_u8Counter1,Local_u8RandomLevel);
    2046:	20 e9       	ldi	r18, 0x90	; 144
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	b9 01       	movw	r22, r18
    204e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2050:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2052:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <CLCD_u8SendSpecialCharacter>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a8 ec       	ldi	r26, 0xC8	; 200
    205c:	b3 e4       	ldi	r27, 0x43	; 67
    205e:	8b 87       	std	Y+11, r24	; 0x0b
    2060:	9c 87       	std	Y+12, r25	; 0x0c
    2062:	ad 87       	std	Y+13, r26	; 0x0d
    2064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a e7       	ldi	r20, 0x7A	; 122
    2074:	55 e4       	ldi	r21, 0x45	; 69
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8f 83       	std	Y+7, r24	; 0x07
    2080:	98 87       	std	Y+8, r25	; 0x08
    2082:	a9 87       	std	Y+9, r26	; 0x09
    2084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <main+0x264>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <main+0x2e2>
	else if (__tmp > 65535)
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <main+0x2c4>
    20ea:	80 e9       	ldi	r24, 0x90	; 144
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <main+0x2b2>
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <main+0x2a6>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <main+0x2ee>
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(400);


				CLCD_voidGoToXY(Local_u8Counter1,Local_u8RandomLevel);
    213a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    213e:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
				CLCD_u8SendString(" ");
    2142:	82 e6       	ldi	r24, 0x62	; 98
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
				GIE_voidEnableGlobal();
    214a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GIE_voidEnableGlobal>

		}else{


			/* move ball to left */
			for(Local_u8Counter1 = u8BALL_END_POS -1; Local_u8Counter1 >= u8BALL_START_POS;Local_u8Counter1--){
    214e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	8d 8f       	std	Y+29, r24	; 0x1d
    2154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2156:	88 23       	and	r24, r24
    2158:	09 f0       	breq	.+2      	; 0x215c <main+0x318>
    215a:	5f cf       	rjmp	.-322    	; 0x201a <main+0x1d6>

			}

			/*Check if player 1 block the ball  */

			if(Local_u8RandomLevel != Local_u8PlayrOneLine){
    215c:	90 91 9e 00 	lds	r25, 0x009E
    2160:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2162:	89 17       	cp	r24, r25
    2164:	61 f0       	breq	.+24     	; 0x217e <main+0x33a>

				CLCD_voidSendCmd(CLCD_u8CLEAR_LCD);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
				CLCD_voidGoToXY(0, 0);
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
				CLCD_u8SendString("Player Two Win !!");
    2174:	86 e7       	ldi	r24, 0x76	; 118
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <main+0x340>
				break;
			}else{
				Local_u8Counter1 = u8BALL_START_POS + 1;
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	8d 8f       	std	Y+29, r24	; 0x1d
    2182:	33 cf       	rjmp	.-410    	; 0x1fea <main+0x1a6>

	}



}
    2184:	6e 96       	adiw	r28, 0x1e	; 30
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <vChangePlayerOnePos>:


void vChangePlayerOnePos(void){
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8PlayrOneLine == 1){
    219e:	80 91 9e 00 	lds	r24, 0x009E
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	99 f4       	brne	.+38     	; 0x21cc <vChangePlayerOnePos+0x36>
		Local_u8PlayrOneLine = 0;
    21a6:	10 92 9e 00 	sts	0x009E, r1
		CLCD_voidGoToXY(0, 1);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString(" ");
    21b2:	82 e6       	ldi	r24, 0x62	; 98
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
		CLCD_voidGoToXY(0, 0);
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString("|");
    21c2:	80 e6       	ldi	r24, 0x60	; 96
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    21ca:	17 c0       	rjmp	.+46     	; 0x21fa <vChangePlayerOnePos+0x64>

	}else if (Local_u8PlayrOneLine == 0){
    21cc:	80 91 9e 00 	lds	r24, 0x009E
    21d0:	88 23       	and	r24, r24
    21d2:	99 f4       	brne	.+38     	; 0x21fa <vChangePlayerOnePos+0x64>
		Local_u8PlayrOneLine = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 9e 00 	sts	0x009E, r24
		CLCD_voidGoToXY(0, 0);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString(" ");
    21e2:	82 e6       	ldi	r24, 0x62	; 98
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
		CLCD_voidGoToXY(0, 1);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString("|");
    21f2:	80 e6       	ldi	r24, 0x60	; 96
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>

	}

}
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <vChangePlayerTwoPos>:

void vChangePlayerTwoPos(void){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8PlayrTwoLine == 1){
    2208:	80 91 9f 00 	lds	r24, 0x009F
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	99 f4       	brne	.+38     	; 0x2236 <vChangePlayerTwoPos+0x36>
		Local_u8PlayrTwoLine = 0;
    2210:	10 92 9f 00 	sts	0x009F, r1
		CLCD_voidGoToXY(15, 1);
    2214:	8f e0       	ldi	r24, 0x0F	; 15
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString(" ");
    221c:	82 e6       	ldi	r24, 0x62	; 98
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
		CLCD_voidGoToXY(15, 0);
    2224:	8f e0       	ldi	r24, 0x0F	; 15
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString("|");
    222c:	80 e6       	ldi	r24, 0x60	; 96
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    2234:	17 c0       	rjmp	.+46     	; 0x2264 <vChangePlayerTwoPos+0x64>

	}else if (Local_u8PlayrTwoLine == 0){
    2236:	80 91 9f 00 	lds	r24, 0x009F
    223a:	88 23       	and	r24, r24
    223c:	99 f4       	brne	.+38     	; 0x2264 <vChangePlayerTwoPos+0x64>
		Local_u8PlayrTwoLine = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	80 93 9f 00 	sts	0x009F, r24
		CLCD_voidGoToXY(15, 0);
    2244:	8f e0       	ldi	r24, 0x0F	; 15
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString(" ");
    224c:	82 e6       	ldi	r24, 0x62	; 98
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
		CLCD_voidGoToXY(15, 1);
    2254:	8f e0       	ldi	r24, 0x0F	; 15
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	0e 94 3c 08 	call	0x1078	; 0x1078 <CLCD_voidGoToXY>
		CLCD_u8SendString("|");
    225c:	80 e6       	ldi	r24, 0x60	; 96
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>

	}

}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <__mulsi3>:
    226a:	62 9f       	mul	r22, r18
    226c:	d0 01       	movw	r26, r0
    226e:	73 9f       	mul	r23, r19
    2270:	f0 01       	movw	r30, r0
    2272:	82 9f       	mul	r24, r18
    2274:	e0 0d       	add	r30, r0
    2276:	f1 1d       	adc	r31, r1
    2278:	64 9f       	mul	r22, r20
    227a:	e0 0d       	add	r30, r0
    227c:	f1 1d       	adc	r31, r1
    227e:	92 9f       	mul	r25, r18
    2280:	f0 0d       	add	r31, r0
    2282:	83 9f       	mul	r24, r19
    2284:	f0 0d       	add	r31, r0
    2286:	74 9f       	mul	r23, r20
    2288:	f0 0d       	add	r31, r0
    228a:	65 9f       	mul	r22, r21
    228c:	f0 0d       	add	r31, r0
    228e:	99 27       	eor	r25, r25
    2290:	72 9f       	mul	r23, r18
    2292:	b0 0d       	add	r27, r0
    2294:	e1 1d       	adc	r30, r1
    2296:	f9 1f       	adc	r31, r25
    2298:	63 9f       	mul	r22, r19
    229a:	b0 0d       	add	r27, r0
    229c:	e1 1d       	adc	r30, r1
    229e:	f9 1f       	adc	r31, r25
    22a0:	bd 01       	movw	r22, r26
    22a2:	cf 01       	movw	r24, r30
    22a4:	11 24       	eor	r1, r1
    22a6:	08 95       	ret

000022a8 <__divmodhi4>:
    22a8:	97 fb       	bst	r25, 7
    22aa:	09 2e       	mov	r0, r25
    22ac:	07 26       	eor	r0, r23
    22ae:	0a d0       	rcall	.+20     	; 0x22c4 <__divmodhi4_neg1>
    22b0:	77 fd       	sbrc	r23, 7
    22b2:	04 d0       	rcall	.+8      	; 0x22bc <__divmodhi4_neg2>
    22b4:	2e d0       	rcall	.+92     	; 0x2312 <__udivmodhi4>
    22b6:	06 d0       	rcall	.+12     	; 0x22c4 <__divmodhi4_neg1>
    22b8:	00 20       	and	r0, r0
    22ba:	1a f4       	brpl	.+6      	; 0x22c2 <__divmodhi4_exit>

000022bc <__divmodhi4_neg2>:
    22bc:	70 95       	com	r23
    22be:	61 95       	neg	r22
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255

000022c2 <__divmodhi4_exit>:
    22c2:	08 95       	ret

000022c4 <__divmodhi4_neg1>:
    22c4:	f6 f7       	brtc	.-4      	; 0x22c2 <__divmodhi4_exit>
    22c6:	90 95       	com	r25
    22c8:	81 95       	neg	r24
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	08 95       	ret

000022ce <__udivmodsi4>:
    22ce:	a1 e2       	ldi	r26, 0x21	; 33
    22d0:	1a 2e       	mov	r1, r26
    22d2:	aa 1b       	sub	r26, r26
    22d4:	bb 1b       	sub	r27, r27
    22d6:	fd 01       	movw	r30, r26
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <__udivmodsi4_ep>

000022da <__udivmodsi4_loop>:
    22da:	aa 1f       	adc	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	ee 1f       	adc	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	a2 17       	cp	r26, r18
    22e4:	b3 07       	cpc	r27, r19
    22e6:	e4 07       	cpc	r30, r20
    22e8:	f5 07       	cpc	r31, r21
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <__udivmodsi4_ep>
    22ec:	a2 1b       	sub	r26, r18
    22ee:	b3 0b       	sbc	r27, r19
    22f0:	e4 0b       	sbc	r30, r20
    22f2:	f5 0b       	sbc	r31, r21

000022f4 <__udivmodsi4_ep>:
    22f4:	66 1f       	adc	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	1a 94       	dec	r1
    22fe:	69 f7       	brne	.-38     	; 0x22da <__udivmodsi4_loop>
    2300:	60 95       	com	r22
    2302:	70 95       	com	r23
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	bd 01       	movw	r22, r26
    230e:	cf 01       	movw	r24, r30
    2310:	08 95       	ret

00002312 <__udivmodhi4>:
    2312:	aa 1b       	sub	r26, r26
    2314:	bb 1b       	sub	r27, r27
    2316:	51 e1       	ldi	r21, 0x11	; 17
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <__udivmodhi4_ep>

0000231a <__udivmodhi4_loop>:
    231a:	aa 1f       	adc	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	a6 17       	cp	r26, r22
    2320:	b7 07       	cpc	r27, r23
    2322:	10 f0       	brcs	.+4      	; 0x2328 <__udivmodhi4_ep>
    2324:	a6 1b       	sub	r26, r22
    2326:	b7 0b       	sbc	r27, r23

00002328 <__udivmodhi4_ep>:
    2328:	88 1f       	adc	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	5a 95       	dec	r21
    232e:	a9 f7       	brne	.-22     	; 0x231a <__udivmodhi4_loop>
    2330:	80 95       	com	r24
    2332:	90 95       	com	r25
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	08 95       	ret

0000233a <__prologue_saves__>:
    233a:	2f 92       	push	r2
    233c:	3f 92       	push	r3
    233e:	4f 92       	push	r4
    2340:	5f 92       	push	r5
    2342:	6f 92       	push	r6
    2344:	7f 92       	push	r7
    2346:	8f 92       	push	r8
    2348:	9f 92       	push	r9
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	ca 1b       	sub	r28, r26
    2364:	db 0b       	sbc	r29, r27
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	09 94       	ijmp

00002372 <__epilogue_restores__>:
    2372:	2a 88       	ldd	r2, Y+18	; 0x12
    2374:	39 88       	ldd	r3, Y+17	; 0x11
    2376:	48 88       	ldd	r4, Y+16	; 0x10
    2378:	5f 84       	ldd	r5, Y+15	; 0x0f
    237a:	6e 84       	ldd	r6, Y+14	; 0x0e
    237c:	7d 84       	ldd	r7, Y+13	; 0x0d
    237e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2380:	9b 84       	ldd	r9, Y+11	; 0x0b
    2382:	aa 84       	ldd	r10, Y+10	; 0x0a
    2384:	b9 84       	ldd	r11, Y+9	; 0x09
    2386:	c8 84       	ldd	r12, Y+8	; 0x08
    2388:	df 80       	ldd	r13, Y+7	; 0x07
    238a:	ee 80       	ldd	r14, Y+6	; 0x06
    238c:	fd 80       	ldd	r15, Y+5	; 0x05
    238e:	0c 81       	ldd	r16, Y+4	; 0x04
    2390:	1b 81       	ldd	r17, Y+3	; 0x03
    2392:	aa 81       	ldd	r26, Y+2	; 0x02
    2394:	b9 81       	ldd	r27, Y+1	; 0x01
    2396:	ce 0f       	add	r28, r30
    2398:	d1 1d       	adc	r29, r1
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	ed 01       	movw	r28, r26
    23a6:	08 95       	ret

000023a8 <_exit>:
    23a8:	f8 94       	cli

000023aa <__stop_program>:
    23aa:	ff cf       	rjmp	.-2      	; 0x23aa <__stop_program>
