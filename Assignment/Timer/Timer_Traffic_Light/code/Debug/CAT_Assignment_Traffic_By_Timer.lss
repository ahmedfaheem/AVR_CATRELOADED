
CAT_Assignment_Traffic_By_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002732  000027c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080007a  0080007a  000027e0  2**0
                  ALLOC
  3 .stab         00002bd4  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e80  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_1>
       8:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_2>
       c:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_6>
      1c:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__vector_7>
      20:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__vector_8>
      24:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_9>
      28:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__vector_10>
      2c:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 11 	call	0x2396	; 0x2396 <main>
      8a:	0c 94 97 13 	jmp	0x272e	; 0x272e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_cfg.h"



uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
      ac:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	88 30       	cpi	r24, 0x08	; 8
      b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinDirection+0x24>
      b4:	eb c0       	rjmp	.+470    	; 0x28c <DIO_u8SetPinDirection+0x1fa>


		if(Copy_u8Direction == DIO_u8PIN_OUTPUT){
      b6:	8c 81       	ldd	r24, Y+4	; 0x04
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinDirection+0x2c>
      bc:	6e c0       	rjmp	.+220    	; 0x19a <DIO_u8SetPinDirection+0x108>

			switch(Copy_u8Port){
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	28 2f       	mov	r18, r24
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	38 87       	std	Y+8, r19	; 0x08
      c6:	2f 83       	std	Y+7, r18	; 0x07
      c8:	8f 81       	ldd	r24, Y+7	; 0x07
      ca:	98 85       	ldd	r25, Y+8	; 0x08
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f1       	breq	.+80     	; 0x122 <DIO_u8SetPinDirection+0x90>
      d2:	2f 81       	ldd	r18, Y+7	; 0x07
      d4:	38 85       	ldd	r19, Y+8	; 0x08
      d6:	22 30       	cpi	r18, 0x02	; 2
      d8:	31 05       	cpc	r19, r1
      da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinDirection+0x54>
      dc:	8f 81       	ldd	r24, Y+7	; 0x07
      de:	98 85       	ldd	r25, Y+8	; 0x08
      e0:	00 97       	sbiw	r24, 0x00	; 0
      e2:	61 f0       	breq	.+24     	; 0xfc <DIO_u8SetPinDirection+0x6a>
      e4:	57 c0       	rjmp	.+174    	; 0x194 <DIO_u8SetPinDirection+0x102>
      e6:	2f 81       	ldd	r18, Y+7	; 0x07
      e8:	38 85       	ldd	r19, Y+8	; 0x08
      ea:	22 30       	cpi	r18, 0x02	; 2
      ec:	31 05       	cpc	r19, r1
      ee:	61 f1       	breq	.+88     	; 0x148 <DIO_u8SetPinDirection+0xb6>
      f0:	8f 81       	ldd	r24, Y+7	; 0x07
      f2:	98 85       	ldd	r25, Y+8	; 0x08
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	91 05       	cpc	r25, r1
      f8:	d1 f1       	breq	.+116    	; 0x16e <DIO_u8SetPinDirection+0xdc>
      fa:	4c c0       	rjmp	.+152    	; 0x194 <DIO_u8SetPinDirection+0x102>

			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
      fc:	aa e3       	ldi	r26, 0x3A	; 58
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	ea e3       	ldi	r30, 0x3A	; 58
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	40 81       	ld	r20, Z
     106:	8b 81       	ldd	r24, Y+3	; 0x03
     108:	28 2f       	mov	r18, r24
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	02 2e       	mov	r0, r18
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_u8SetPinDirection+0x86>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_u8SetPinDirection+0x82>
     11c:	84 2b       	or	r24, r20
     11e:	8c 93       	st	X, r24
     120:	b7 c0       	rjmp	.+366    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
     122:	a7 e3       	ldi	r26, 0x37	; 55
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e7 e3       	ldi	r30, 0x37	; 55
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	40 81       	ld	r20, Z
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	28 2f       	mov	r18, r24
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	02 2e       	mov	r0, r18
     138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_u8SetPinDirection+0xac>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	0a 94       	dec	r0
     140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_u8SetPinDirection+0xa8>
     142:	84 2b       	or	r24, r20
     144:	8c 93       	st	X, r24
     146:	a4 c0       	rjmp	.+328    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
     148:	a4 e3       	ldi	r26, 0x34	; 52
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e4 e3       	ldi	r30, 0x34	; 52
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	40 81       	ld	r20, Z
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	28 2f       	mov	r18, r24
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 2e       	mov	r0, r18
     15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_u8SetPinDirection+0xd2>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_u8SetPinDirection+0xce>
     168:	84 2b       	or	r24, r20
     16a:	8c 93       	st	X, r24
     16c:	91 c0       	rjmp	.+290    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
     16e:	a1 e3       	ldi	r26, 0x31	; 49
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e1 e3       	ldi	r30, 0x31	; 49
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	40 81       	ld	r20, Z
     178:	8b 81       	ldd	r24, Y+3	; 0x03
     17a:	28 2f       	mov	r18, r24
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	02 2e       	mov	r0, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_u8SetPinDirection+0xf8>
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	0a 94       	dec	r0
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_u8SetPinDirection+0xf4>
     18e:	84 2b       	or	r24, r20
     190:	8c 93       	st	X, r24
     192:	7e c0       	rjmp	.+252    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK; break;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	89 83       	std	Y+1, r24	; 0x01
     198:	7b c0       	rjmp	.+246    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			}

		}else if(Copy_u8Direction == DIO_u8PIN_INPUT){
     19a:	8c 81       	ldd	r24, Y+4	; 0x04
     19c:	88 23       	and	r24, r24
     19e:	09 f0       	breq	.+2      	; 0x1a2 <DIO_u8SetPinDirection+0x110>
     1a0:	72 c0       	rjmp	.+228    	; 0x286 <DIO_u8SetPinDirection+0x1f4>

			switch(Copy_u8Port){
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	28 2f       	mov	r18, r24
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	3e 83       	std	Y+6, r19	; 0x06
     1aa:	2d 83       	std	Y+5, r18	; 0x05
     1ac:	8d 81       	ldd	r24, Y+5	; 0x05
     1ae:	9e 81       	ldd	r25, Y+6	; 0x06
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	91 05       	cpc	r25, r1
     1b4:	49 f1       	breq	.+82     	; 0x208 <DIO_u8SetPinDirection+0x176>
     1b6:	2d 81       	ldd	r18, Y+5	; 0x05
     1b8:	3e 81       	ldd	r19, Y+6	; 0x06
     1ba:	22 30       	cpi	r18, 0x02	; 2
     1bc:	31 05       	cpc	r19, r1
     1be:	2c f4       	brge	.+10     	; 0x1ca <DIO_u8SetPinDirection+0x138>
     1c0:	8d 81       	ldd	r24, Y+5	; 0x05
     1c2:	9e 81       	ldd	r25, Y+6	; 0x06
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	61 f0       	breq	.+24     	; 0x1e0 <DIO_u8SetPinDirection+0x14e>
     1c8:	5b c0       	rjmp	.+182    	; 0x280 <DIO_u8SetPinDirection+0x1ee>
     1ca:	2d 81       	ldd	r18, Y+5	; 0x05
     1cc:	3e 81       	ldd	r19, Y+6	; 0x06
     1ce:	22 30       	cpi	r18, 0x02	; 2
     1d0:	31 05       	cpc	r19, r1
     1d2:	71 f1       	breq	.+92     	; 0x230 <DIO_u8SetPinDirection+0x19e>
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	9e 81       	ldd	r25, Y+6	; 0x06
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	91 05       	cpc	r25, r1
     1dc:	e9 f1       	breq	.+122    	; 0x258 <DIO_u8SetPinDirection+0x1c6>
     1de:	50 c0       	rjmp	.+160    	; 0x280 <DIO_u8SetPinDirection+0x1ee>

			case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
     1e0:	aa e3       	ldi	r26, 0x3A	; 58
     1e2:	b0 e0       	ldi	r27, 0x00	; 0
     1e4:	ea e3       	ldi	r30, 0x3A	; 58
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	40 81       	ld	r20, Z
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	28 2f       	mov	r18, r24
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	02 2e       	mov	r0, r18
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_u8SetPinDirection+0x16a>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	0a 94       	dec	r0
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_u8SetPinDirection+0x166>
     200:	80 95       	com	r24
     202:	84 23       	and	r24, r20
     204:	8c 93       	st	X, r24
     206:	44 c0       	rjmp	.+136    	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
     208:	a7 e3       	ldi	r26, 0x37	; 55
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e7 e3       	ldi	r30, 0x37	; 55
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	40 81       	ld	r20, Z
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	28 2f       	mov	r18, r24
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 2e       	mov	r0, r18
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_u8SetPinDirection+0x192>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_u8SetPinDirection+0x18e>
     228:	80 95       	com	r24
     22a:	84 23       	and	r24, r20
     22c:	8c 93       	st	X, r24
     22e:	30 c0       	rjmp	.+96     	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
     230:	a4 e3       	ldi	r26, 0x34	; 52
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	e4 e3       	ldi	r30, 0x34	; 52
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	40 81       	ld	r20, Z
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 2e       	mov	r0, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinDirection+0x1ba>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinDirection+0x1b6>
     250:	80 95       	com	r24
     252:	84 23       	and	r24, r20
     254:	8c 93       	st	X, r24
     256:	1c c0       	rjmp	.+56     	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
     258:	a1 e3       	ldi	r26, 0x31	; 49
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e1 e3       	ldi	r30, 0x31	; 49
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	40 81       	ld	r20, Z
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	02 2e       	mov	r0, r18
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8SetPinDirection+0x1e2>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	0a 94       	dec	r0
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8SetPinDirection+0x1de>
     278:	80 95       	com	r24
     27a:	84 23       	and	r24, r20
     27c:	8c 93       	st	X, r24
     27e:	08 c0       	rjmp	.+16     	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	05 c0       	rjmp	.+10     	; 0x290 <DIO_u8SetPinDirection+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8SetPinDirection+0x1fe>
		}

	}else{

		Local_u8ErrState = NOK;
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrState;
     290:	89 81       	ldd	r24, Y+1	; 0x01
}
     292:	28 96       	adiw	r28, 0x08	; 8
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	28 97       	sbiw	r28, 0x08	; 8
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	8a 83       	std	Y+2, r24	; 0x02
     2ba:	6b 83       	std	Y+3, r22	; 0x03
     2bc:	4c 83       	std	Y+4, r20	; 0x04


	uint8 Local_u8ErrState = OK;
     2be:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin <= DIO_u8PIN7){
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <DIO_u8SetPinValue+0x24>
     2c6:	eb c0       	rjmp	.+470    	; 0x49e <DIO_u8SetPinValue+0x1fa>


		if(Copy_u8Value == DIO_u8PIN_HIGH){
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_u8SetPinValue+0x2c>
     2ce:	6e c0       	rjmp	.+220    	; 0x3ac <DIO_u8SetPinValue+0x108>
			switch(Copy_u8Port){
     2d0:	8a 81       	ldd	r24, Y+2	; 0x02
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	38 87       	std	Y+8, r19	; 0x08
     2d8:	2f 83       	std	Y+7, r18	; 0x07
     2da:	8f 81       	ldd	r24, Y+7	; 0x07
     2dc:	98 85       	ldd	r25, Y+8	; 0x08
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	91 05       	cpc	r25, r1
     2e2:	41 f1       	breq	.+80     	; 0x334 <DIO_u8SetPinValue+0x90>
     2e4:	2f 81       	ldd	r18, Y+7	; 0x07
     2e6:	38 85       	ldd	r19, Y+8	; 0x08
     2e8:	22 30       	cpi	r18, 0x02	; 2
     2ea:	31 05       	cpc	r19, r1
     2ec:	2c f4       	brge	.+10     	; 0x2f8 <DIO_u8SetPinValue+0x54>
     2ee:	8f 81       	ldd	r24, Y+7	; 0x07
     2f0:	98 85       	ldd	r25, Y+8	; 0x08
     2f2:	00 97       	sbiw	r24, 0x00	; 0
     2f4:	61 f0       	breq	.+24     	; 0x30e <DIO_u8SetPinValue+0x6a>
     2f6:	57 c0       	rjmp	.+174    	; 0x3a6 <DIO_u8SetPinValue+0x102>
     2f8:	2f 81       	ldd	r18, Y+7	; 0x07
     2fa:	38 85       	ldd	r19, Y+8	; 0x08
     2fc:	22 30       	cpi	r18, 0x02	; 2
     2fe:	31 05       	cpc	r19, r1
     300:	61 f1       	breq	.+88     	; 0x35a <DIO_u8SetPinValue+0xb6>
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	98 85       	ldd	r25, Y+8	; 0x08
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	91 05       	cpc	r25, r1
     30a:	d1 f1       	breq	.+116    	; 0x380 <DIO_u8SetPinValue+0xdc>
     30c:	4c c0       	rjmp	.+152    	; 0x3a6 <DIO_u8SetPinValue+0x102>

			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
     30e:	ab e3       	ldi	r26, 0x3B	; 59
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	eb e3       	ldi	r30, 0x3B	; 59
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	40 81       	ld	r20, Z
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	28 2f       	mov	r18, r24
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 2e       	mov	r0, r18
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8SetPinValue+0x86>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8SetPinValue+0x82>
     32e:	84 2b       	or	r24, r20
     330:	8c 93       	st	X, r24
     332:	b7 c0       	rjmp	.+366    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
     334:	a8 e3       	ldi	r26, 0x38	; 56
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e8 e3       	ldi	r30, 0x38	; 56
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	40 81       	ld	r20, Z
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 2e       	mov	r0, r18
     34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_u8SetPinValue+0xac>
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	0a 94       	dec	r0
     352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_u8SetPinValue+0xa8>
     354:	84 2b       	or	r24, r20
     356:	8c 93       	st	X, r24
     358:	a4 c0       	rjmp	.+328    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
     35a:	a5 e3       	ldi	r26, 0x35	; 53
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	e5 e3       	ldi	r30, 0x35	; 53
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	40 81       	ld	r20, Z
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	28 2f       	mov	r18, r24
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	02 2e       	mov	r0, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_u8SetPinValue+0xd2>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_u8SetPinValue+0xce>
     37a:	84 2b       	or	r24, r20
     37c:	8c 93       	st	X, r24
     37e:	91 c0       	rjmp	.+290    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
     380:	a2 e3       	ldi	r26, 0x32	; 50
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	e2 e3       	ldi	r30, 0x32	; 50
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	40 81       	ld	r20, Z
     38a:	8b 81       	ldd	r24, Y+3	; 0x03
     38c:	28 2f       	mov	r18, r24
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	02 2e       	mov	r0, r18
     396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_u8SetPinValue+0xf8>
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	0a 94       	dec	r0
     39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_u8SetPinValue+0xf4>
     3a0:	84 2b       	or	r24, r20
     3a2:	8c 93       	st	X, r24
     3a4:	7e c0       	rjmp	.+252    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	7b c0       	rjmp	.+246    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			}
		}else if(Copy_u8Value == DIO_u8PIN_LOW ){
     3ac:	8c 81       	ldd	r24, Y+4	; 0x04
     3ae:	88 23       	and	r24, r24
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_u8SetPinValue+0x110>
     3b2:	72 c0       	rjmp	.+228    	; 0x498 <DIO_u8SetPinValue+0x1f4>

			switch(Copy_u8Port){
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	3e 83       	std	Y+6, r19	; 0x06
     3bc:	2d 83       	std	Y+5, r18	; 0x05
     3be:	8d 81       	ldd	r24, Y+5	; 0x05
     3c0:	9e 81       	ldd	r25, Y+6	; 0x06
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	91 05       	cpc	r25, r1
     3c6:	49 f1       	breq	.+82     	; 0x41a <DIO_u8SetPinValue+0x176>
     3c8:	2d 81       	ldd	r18, Y+5	; 0x05
     3ca:	3e 81       	ldd	r19, Y+6	; 0x06
     3cc:	22 30       	cpi	r18, 0x02	; 2
     3ce:	31 05       	cpc	r19, r1
     3d0:	2c f4       	brge	.+10     	; 0x3dc <DIO_u8SetPinValue+0x138>
     3d2:	8d 81       	ldd	r24, Y+5	; 0x05
     3d4:	9e 81       	ldd	r25, Y+6	; 0x06
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	61 f0       	breq	.+24     	; 0x3f2 <DIO_u8SetPinValue+0x14e>
     3da:	5b c0       	rjmp	.+182    	; 0x492 <DIO_u8SetPinValue+0x1ee>
     3dc:	2d 81       	ldd	r18, Y+5	; 0x05
     3de:	3e 81       	ldd	r19, Y+6	; 0x06
     3e0:	22 30       	cpi	r18, 0x02	; 2
     3e2:	31 05       	cpc	r19, r1
     3e4:	71 f1       	breq	.+92     	; 0x442 <DIO_u8SetPinValue+0x19e>
     3e6:	8d 81       	ldd	r24, Y+5	; 0x05
     3e8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ea:	83 30       	cpi	r24, 0x03	; 3
     3ec:	91 05       	cpc	r25, r1
     3ee:	e9 f1       	breq	.+122    	; 0x46a <DIO_u8SetPinValue+0x1c6>
     3f0:	50 c0       	rjmp	.+160    	; 0x492 <DIO_u8SetPinValue+0x1ee>

			case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
     3f2:	ab e3       	ldi	r26, 0x3B	; 59
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	eb e3       	ldi	r30, 0x3B	; 59
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	40 81       	ld	r20, Z
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	28 2f       	mov	r18, r24
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 2e       	mov	r0, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8SetPinValue+0x16a>
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	0a 94       	dec	r0
     410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8SetPinValue+0x166>
     412:	80 95       	com	r24
     414:	84 23       	and	r24, r20
     416:	8c 93       	st	X, r24
     418:	44 c0       	rjmp	.+136    	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
     41a:	a8 e3       	ldi	r26, 0x38	; 56
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e8 e3       	ldi	r30, 0x38	; 56
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	40 81       	ld	r20, Z
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	28 2f       	mov	r18, r24
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 2e       	mov	r0, r18
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_u8SetPinValue+0x192>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_u8SetPinValue+0x18e>
     43a:	80 95       	com	r24
     43c:	84 23       	and	r24, r20
     43e:	8c 93       	st	X, r24
     440:	30 c0       	rjmp	.+96     	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
     442:	a5 e3       	ldi	r26, 0x35	; 53
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e5 e3       	ldi	r30, 0x35	; 53
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	40 81       	ld	r20, Z
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 2e       	mov	r0, r18
     458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_u8SetPinValue+0x1ba>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_u8SetPinValue+0x1b6>
     462:	80 95       	com	r24
     464:	84 23       	and	r24, r20
     466:	8c 93       	st	X, r24
     468:	1c c0       	rjmp	.+56     	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
     46a:	a2 e3       	ldi	r26, 0x32	; 50
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	e2 e3       	ldi	r30, 0x32	; 50
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	40 81       	ld	r20, Z
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 2e       	mov	r0, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_u8SetPinValue+0x1e2>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	0a 94       	dec	r0
     488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_u8SetPinValue+0x1de>
     48a:	80 95       	com	r24
     48c:	84 23       	and	r24, r20
     48e:	8c 93       	st	X, r24
     490:	08 c0       	rjmp	.+16     	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_u8SetPinValue+0x1fe>
		}
	}else{
		Local_u8ErrState = NOK;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a4:	28 96       	adiw	r28, 0x08	; 8
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value){
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	27 97       	sbiw	r28, 0x07	; 7
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	8a 83       	std	Y+2, r24	; 0x02
     4cc:	6b 83       	std	Y+3, r22	; 0x03
     4ce:	5d 83       	std	Y+5, r21	; 0x05
     4d0:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
     4d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <DIO_u8ReadPinValue+0x26>
     4da:	7c c0       	rjmp	.+248    	; 0x5d4 <DIO_u8ReadPinValue+0x11e>

		if(Copy_pu8Value != NULL){
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	9d 81       	ldd	r25, Y+5	; 0x05
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <DIO_u8ReadPinValue+0x30>
     4e4:	74 c0       	rjmp	.+232    	; 0x5ce <DIO_u8ReadPinValue+0x118>

			switch(Copy_u8Port){
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	28 2f       	mov	r18, r24
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	3f 83       	std	Y+7, r19	; 0x07
     4ee:	2e 83       	std	Y+6, r18	; 0x06
     4f0:	4e 81       	ldd	r20, Y+6	; 0x06
     4f2:	5f 81       	ldd	r21, Y+7	; 0x07
     4f4:	41 30       	cpi	r20, 0x01	; 1
     4f6:	51 05       	cpc	r21, r1
     4f8:	59 f1       	breq	.+86     	; 0x550 <DIO_u8ReadPinValue+0x9a>
     4fa:	8e 81       	ldd	r24, Y+6	; 0x06
     4fc:	9f 81       	ldd	r25, Y+7	; 0x07
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	91 05       	cpc	r25, r1
     502:	34 f4       	brge	.+12     	; 0x510 <DIO_u8ReadPinValue+0x5a>
     504:	2e 81       	ldd	r18, Y+6	; 0x06
     506:	3f 81       	ldd	r19, Y+7	; 0x07
     508:	21 15       	cp	r18, r1
     50a:	31 05       	cpc	r19, r1
     50c:	69 f0       	breq	.+26     	; 0x528 <DIO_u8ReadPinValue+0x72>
     50e:	5c c0       	rjmp	.+184    	; 0x5c8 <DIO_u8ReadPinValue+0x112>
     510:	4e 81       	ldd	r20, Y+6	; 0x06
     512:	5f 81       	ldd	r21, Y+7	; 0x07
     514:	42 30       	cpi	r20, 0x02	; 2
     516:	51 05       	cpc	r21, r1
     518:	79 f1       	breq	.+94     	; 0x578 <DIO_u8ReadPinValue+0xc2>
     51a:	8e 81       	ldd	r24, Y+6	; 0x06
     51c:	9f 81       	ldd	r25, Y+7	; 0x07
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	91 05       	cpc	r25, r1
     522:	09 f4       	brne	.+2      	; 0x526 <DIO_u8ReadPinValue+0x70>
     524:	3d c0       	rjmp	.+122    	; 0x5a0 <DIO_u8ReadPinValue+0xea>
     526:	50 c0       	rjmp	.+160    	; 0x5c8 <DIO_u8ReadPinValue+0x112>

			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
     528:	e9 e3       	ldi	r30, 0x39	; 57
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	28 2f       	mov	r18, r24
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	88 2f       	mov	r24, r24
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	a9 01       	movw	r20, r18
     53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_u8ReadPinValue+0x8a>
     53c:	55 95       	asr	r21
     53e:	47 95       	ror	r20
     540:	8a 95       	dec	r24
     542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_u8ReadPinValue+0x86>
     544:	ca 01       	movw	r24, r20
     546:	81 70       	andi	r24, 0x01	; 1
     548:	ec 81       	ldd	r30, Y+4	; 0x04
     54a:	fd 81       	ldd	r31, Y+5	; 0x05
     54c:	80 83       	st	Z, r24
     54e:	44 c0       	rjmp	.+136    	; 0x5d8 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
     550:	e6 e3       	ldi	r30, 0x36	; 54
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a9 01       	movw	r20, r18
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8ReadPinValue+0xb2>
     564:	55 95       	asr	r21
     566:	47 95       	ror	r20
     568:	8a 95       	dec	r24
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8ReadPinValue+0xae>
     56c:	ca 01       	movw	r24, r20
     56e:	81 70       	andi	r24, 0x01	; 1
     570:	ec 81       	ldd	r30, Y+4	; 0x04
     572:	fd 81       	ldd	r31, Y+5	; 0x05
     574:	80 83       	st	Z, r24
     576:	30 c0       	rjmp	.+96     	; 0x5d8 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
     578:	e3 e3       	ldi	r30, 0x33	; 51
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	88 2f       	mov	r24, r24
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a9 01       	movw	r20, r18
     58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_u8ReadPinValue+0xda>
     58c:	55 95       	asr	r21
     58e:	47 95       	ror	r20
     590:	8a 95       	dec	r24
     592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_u8ReadPinValue+0xd6>
     594:	ca 01       	movw	r24, r20
     596:	81 70       	andi	r24, 0x01	; 1
     598:	ec 81       	ldd	r30, Y+4	; 0x04
     59a:	fd 81       	ldd	r31, Y+5	; 0x05
     59c:	80 83       	st	Z, r24
     59e:	1c c0       	rjmp	.+56     	; 0x5d8 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
     5a0:	e0 e3       	ldi	r30, 0x30	; 48
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	a9 01       	movw	r20, r18
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_u8ReadPinValue+0x102>
     5b4:	55 95       	asr	r21
     5b6:	47 95       	ror	r20
     5b8:	8a 95       	dec	r24
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_u8ReadPinValue+0xfe>
     5bc:	ca 01       	movw	r24, r20
     5be:	81 70       	andi	r24, 0x01	; 1
     5c0:	ec 81       	ldd	r30, Y+4	; 0x04
     5c2:	fd 81       	ldd	r31, Y+5	; 0x05
     5c4:	80 83       	st	Z, r24
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <DIO_u8ReadPinValue+0x122>
			default: Local_u8ErrState = NOK; break;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <DIO_u8ReadPinValue+0x122>
			}
		}else{
			Local_u8ErrState = NULL_PTR_ERR;
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	89 83       	std	Y+1, r24	; 0x01
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_u8ReadPinValue+0x122>

		}
	}else{
		Local_u8ErrState = NOK;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	89 83       	std	Y+1, r24	; 0x01
	}
	// check if valid pin

	return Local_u8ErrState;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01

}
     5da:	27 96       	adiw	r28, 0x07	; 7
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction){
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DIO_u8SetPortDirection+0x6>
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DIO_u8SetPortDirection+0x8>
     5f4:	0f 92       	push	r0
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	8a 83       	std	Y+2, r24	; 0x02
     5fc:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
     5fe:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	28 2f       	mov	r18, r24
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	3d 83       	std	Y+5, r19	; 0x05
     608:	2c 83       	std	Y+4, r18	; 0x04
     60a:	8c 81       	ldd	r24, Y+4	; 0x04
     60c:	9d 81       	ldd	r25, Y+5	; 0x05
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	91 05       	cpc	r25, r1
     612:	d1 f0       	breq	.+52     	; 0x648 <DIO_u8SetPortDirection+0x5c>
     614:	2c 81       	ldd	r18, Y+4	; 0x04
     616:	3d 81       	ldd	r19, Y+5	; 0x05
     618:	22 30       	cpi	r18, 0x02	; 2
     61a:	31 05       	cpc	r19, r1
     61c:	2c f4       	brge	.+10     	; 0x628 <DIO_u8SetPortDirection+0x3c>
     61e:	8c 81       	ldd	r24, Y+4	; 0x04
     620:	9d 81       	ldd	r25, Y+5	; 0x05
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	61 f0       	breq	.+24     	; 0x63e <DIO_u8SetPortDirection+0x52>
     626:	1f c0       	rjmp	.+62     	; 0x666 <DIO_u8SetPortDirection+0x7a>
     628:	2c 81       	ldd	r18, Y+4	; 0x04
     62a:	3d 81       	ldd	r19, Y+5	; 0x05
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	31 05       	cpc	r19, r1
     630:	81 f0       	breq	.+32     	; 0x652 <DIO_u8SetPortDirection+0x66>
     632:	8c 81       	ldd	r24, Y+4	; 0x04
     634:	9d 81       	ldd	r25, Y+5	; 0x05
     636:	83 30       	cpi	r24, 0x03	; 3
     638:	91 05       	cpc	r25, r1
     63a:	81 f0       	breq	.+32     	; 0x65c <DIO_u8SetPortDirection+0x70>
     63c:	14 c0       	rjmp	.+40     	; 0x666 <DIO_u8SetPortDirection+0x7a>

	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
     63e:	ea e3       	ldi	r30, 0x3A	; 58
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	80 83       	st	Z, r24
     646:	11 c0       	rjmp	.+34     	; 0x66a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
     648:	e7 e3       	ldi	r30, 0x37	; 55
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	80 83       	st	Z, r24
     650:	0c c0       	rjmp	.+24     	; 0x66a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
     652:	e4 e3       	ldi	r30, 0x34	; 52
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	80 83       	st	Z, r24
     65a:	07 c0       	rjmp	.+14     	; 0x66a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     65c:	e1 e3       	ldi	r30, 0x31	; 49
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	80 83       	st	Z, r24
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrState = NOK;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrState;
     66a:	89 81       	ldd	r24, Y+1	; 0x01
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <DIO_u8SetPortValue>:
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	00 d0       	rcall	.+0      	; 0x682 <DIO_u8SetPortValue+0x6>
     682:	00 d0       	rcall	.+0      	; 0x684 <DIO_u8SetPortValue+0x8>
     684:	0f 92       	push	r0
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8a 83       	std	Y+2, r24	; 0x02
     68c:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
     68e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	28 2f       	mov	r18, r24
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	3d 83       	std	Y+5, r19	; 0x05
     698:	2c 83       	std	Y+4, r18	; 0x04
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	9d 81       	ldd	r25, Y+5	; 0x05
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	91 05       	cpc	r25, r1
     6a2:	d1 f0       	breq	.+52     	; 0x6d8 <DIO_u8SetPortValue+0x5c>
     6a4:	2c 81       	ldd	r18, Y+4	; 0x04
     6a6:	3d 81       	ldd	r19, Y+5	; 0x05
     6a8:	22 30       	cpi	r18, 0x02	; 2
     6aa:	31 05       	cpc	r19, r1
     6ac:	2c f4       	brge	.+10     	; 0x6b8 <DIO_u8SetPortValue+0x3c>
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	9d 81       	ldd	r25, Y+5	; 0x05
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	61 f0       	breq	.+24     	; 0x6ce <DIO_u8SetPortValue+0x52>
     6b6:	1f c0       	rjmp	.+62     	; 0x6f6 <DIO_u8SetPortValue+0x7a>
     6b8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ba:	3d 81       	ldd	r19, Y+5	; 0x05
     6bc:	22 30       	cpi	r18, 0x02	; 2
     6be:	31 05       	cpc	r19, r1
     6c0:	81 f0       	breq	.+32     	; 0x6e2 <DIO_u8SetPortValue+0x66>
     6c2:	8c 81       	ldd	r24, Y+4	; 0x04
     6c4:	9d 81       	ldd	r25, Y+5	; 0x05
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	91 05       	cpc	r25, r1
     6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_u8SetPortValue+0x70>
     6cc:	14 c0       	rjmp	.+40     	; 0x6f6 <DIO_u8SetPortValue+0x7a>

	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
     6ce:	eb e3       	ldi	r30, 0x3B	; 59
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	80 83       	st	Z, r24
     6d6:	11 c0       	rjmp	.+34     	; 0x6fa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
     6d8:	e8 e3       	ldi	r30, 0x38	; 56
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	80 83       	st	Z, r24
     6e0:	0c c0       	rjmp	.+24     	; 0x6fa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
     6e2:	e5 e3       	ldi	r30, 0x35	; 53
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	80 83       	st	Z, r24
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
     6ec:	e2 e3       	ldi	r30, 0x32	; 50
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	80 83       	st	Z, r24
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrState = NOK;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrState;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01

}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	08 95       	ret

0000070c <DIO_u8TogglePinValue>:
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8TogglePinValue+0x6>
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_u8TogglePinValue+0x8>
     714:	0f 92       	push	r0
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	8a 83       	std	Y+2, r24	; 0x02
     71c:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
     71e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	88 30       	cpi	r24, 0x08	; 8
     724:	08 f0       	brcs	.+2      	; 0x728 <DIO_u8TogglePinValue+0x1c>
     726:	6e c0       	rjmp	.+220    	; 0x804 <DIO_u8TogglePinValue+0xf8>


		switch(Copy_u8Port){
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	3d 83       	std	Y+5, r19	; 0x05
     730:	2c 83       	std	Y+4, r18	; 0x04
     732:	8c 81       	ldd	r24, Y+4	; 0x04
     734:	9d 81       	ldd	r25, Y+5	; 0x05
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	91 05       	cpc	r25, r1
     73a:	41 f1       	breq	.+80     	; 0x78c <DIO_u8TogglePinValue+0x80>
     73c:	2c 81       	ldd	r18, Y+4	; 0x04
     73e:	3d 81       	ldd	r19, Y+5	; 0x05
     740:	22 30       	cpi	r18, 0x02	; 2
     742:	31 05       	cpc	r19, r1
     744:	2c f4       	brge	.+10     	; 0x750 <DIO_u8TogglePinValue+0x44>
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	9d 81       	ldd	r25, Y+5	; 0x05
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	61 f0       	breq	.+24     	; 0x766 <DIO_u8TogglePinValue+0x5a>
     74e:	57 c0       	rjmp	.+174    	; 0x7fe <DIO_u8TogglePinValue+0xf2>
     750:	2c 81       	ldd	r18, Y+4	; 0x04
     752:	3d 81       	ldd	r19, Y+5	; 0x05
     754:	22 30       	cpi	r18, 0x02	; 2
     756:	31 05       	cpc	r19, r1
     758:	61 f1       	breq	.+88     	; 0x7b2 <DIO_u8TogglePinValue+0xa6>
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	91 05       	cpc	r25, r1
     762:	d1 f1       	breq	.+116    	; 0x7d8 <DIO_u8TogglePinValue+0xcc>
     764:	4c c0       	rjmp	.+152    	; 0x7fe <DIO_u8TogglePinValue+0xf2>

		case DIO_u8PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
     766:	ab e3       	ldi	r26, 0x3B	; 59
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	eb e3       	ldi	r30, 0x3B	; 59
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	40 81       	ld	r20, Z
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	28 2f       	mov	r18, r24
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 2e       	mov	r0, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_u8TogglePinValue+0x76>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_u8TogglePinValue+0x72>
     786:	84 27       	eor	r24, r20
     788:	8c 93       	st	X, r24
     78a:	3e c0       	rjmp	.+124    	; 0x808 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTB: TOG_BIT(PORTB, Copy_u8Pin); break;
     78c:	a8 e3       	ldi	r26, 0x38	; 56
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	e8 e3       	ldi	r30, 0x38	; 56
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	40 81       	ld	r20, Z
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	28 2f       	mov	r18, r24
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 2e       	mov	r0, r18
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_u8TogglePinValue+0x9c>
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_u8TogglePinValue+0x98>
     7ac:	84 27       	eor	r24, r20
     7ae:	8c 93       	st	X, r24
     7b0:	2b c0       	rjmp	.+86     	; 0x808 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
     7b2:	a5 e3       	ldi	r26, 0x35	; 53
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e5 e3       	ldi	r30, 0x35	; 53
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	40 81       	ld	r20, Z
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	28 2f       	mov	r18, r24
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 2e       	mov	r0, r18
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_u8TogglePinValue+0xc2>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	0a 94       	dec	r0
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_u8TogglePinValue+0xbe>
     7d2:	84 27       	eor	r24, r20
     7d4:	8c 93       	st	X, r24
     7d6:	18 c0       	rjmp	.+48     	; 0x808 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
     7d8:	a2 e3       	ldi	r26, 0x32	; 50
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e2 e3       	ldi	r30, 0x32	; 50
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	40 81       	ld	r20, Z
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	02 2e       	mov	r0, r18
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_u8TogglePinValue+0xe8>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	0a 94       	dec	r0
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_u8TogglePinValue+0xe4>
     7f8:	84 27       	eor	r24, r20
     7fa:	8c 93       	st	X, r24
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <DIO_u8TogglePinValue+0xfc>
		default: Local_u8ErrState = NOK;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_u8TogglePinValue+0xfc>
		}
	}else{
		Local_u8ErrState = NOK;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
     808:	89 81       	ldd	r24, Y+1	; 0x01
}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <EXTI_voidInit>:
#include "EXTI_cfg.h"   /*Should be on this order because depend on enum on interface.h, and macros on prv */
#include "EXTI_reg.h"

static volatile void (*EXTI_pvCallBackFunc[3])(void) = {0};

void EXTI_voidInit(void){
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR, MCUCR_ISC00);
	CLR_BIT(MCUCR, MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_RISING_EDGE

	SET_BIT(MCUCR, MCUCR_ISC00);
     822:	a5 e5       	ldi	r26, 0x55	; 85
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e5 e5       	ldi	r30, 0x55	; 85
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
     830:	a5 e5       	ldi	r26, 0x55	; 85
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e5 e5       	ldi	r30, 0x55	; 85
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	82 60       	ori	r24, 0x02	; 2
     83c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, MCUCR_ISC10);
	CLR_BIT(MCUCR, MCUCR_ISC11);

#elif INT0_SENSE_CTRL == EXTI_RISING_EDGE

	SET_BIT(MCUCR, MCUCR_ISC10);
     83e:	a5 e5       	ldi	r26, 0x55	; 85
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e5 e5       	ldi	r30, 0x55	; 85
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC11);
     84c:	a5 e5       	ldi	r26, 0x55	; 85
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	e5 e5       	ldi	r30, 0x55	; 85
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	88 60       	ori	r24, 0x08	; 8
     858:	8c 93       	st	X, r24



#if INT2_SENSE_CTRL == EXTI_RISING_EDGE

	SET_BIT(MCUCSR, MCUCSR_ISC2);
     85a:	a4 e5       	ldi	r26, 0x54	; 84
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e4 e5       	ldi	r30, 0x54	; 84
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	80 64       	ori	r24, 0x40	; 64
     866:	8c 93       	st	X, r24
#endif



#if INT0_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     868:	ab e5       	ldi	r26, 0x5B	; 91
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	eb e5       	ldi	r30, 0x5B	; 91
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	80 64       	ori	r24, 0x40	; 64
     874:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#else  #error Wrong  INT0_INIT_STATE  Configuration
#endif

#if INT1_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     876:	ab e5       	ldi	r26, 0x5B	; 91
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	eb e5       	ldi	r30, 0x5B	; 91
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	80 68       	ori	r24, 0x80	; 128
     882:	8c 93       	st	X, r24
#else  #error Wrong INT1_INIT_STATE  Configuration
#endif


#if INT2_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
     884:	ab e5       	ldi	r26, 0x5B	; 91
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	eb e5       	ldi	r30, 0x5B	; 91
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 62       	ori	r24, 0x20	; 32
     890:	8c 93       	st	X, r24
#else  #error Wrong  INT2_INIT_STATE  Configuration
#endif



}
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <EXTI_u8SetSenseCtrl>:

uint8 EXTI_u8SetSenseCtrl(EXTI_IntChannel_t Copy_IntCh, EXTI_SenceCtrl_t Copy_SenceCtrl){
     898:	df 93       	push	r29
     89a:	cf 93       	push	r28
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	29 97       	sbiw	r28, 0x09	; 9
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	8a 83       	std	Y+2, r24	; 0x02
     8ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
     8b0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_IntCh == INT0){
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	88 23       	and	r24, r24
     8b6:	09 f0       	breq	.+2      	; 0x8ba <EXTI_u8SetSenseCtrl+0x22>
     8b8:	5e c0       	rjmp	.+188    	; 0x976 <EXTI_u8SetSenseCtrl+0xde>


		switch(Copy_SenceCtrl){
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
     8bc:	28 2f       	mov	r18, r24
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	39 87       	std	Y+9, r19	; 0x09
     8c2:	28 87       	std	Y+8, r18	; 0x08
     8c4:	88 85       	ldd	r24, Y+8	; 0x08
     8c6:	99 85       	ldd	r25, Y+9	; 0x09
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	91 05       	cpc	r25, r1
     8cc:	21 f1       	breq	.+72     	; 0x916 <EXTI_u8SetSenseCtrl+0x7e>
     8ce:	28 85       	ldd	r18, Y+8	; 0x08
     8d0:	39 85       	ldd	r19, Y+9	; 0x09
     8d2:	22 30       	cpi	r18, 0x02	; 2
     8d4:	31 05       	cpc	r19, r1
     8d6:	2c f4       	brge	.+10     	; 0x8e2 <EXTI_u8SetSenseCtrl+0x4a>
     8d8:	88 85       	ldd	r24, Y+8	; 0x08
     8da:	99 85       	ldd	r25, Y+9	; 0x09
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	61 f0       	breq	.+24     	; 0x8f8 <EXTI_u8SetSenseCtrl+0x60>
     8e0:	47 c0       	rjmp	.+142    	; 0x970 <EXTI_u8SetSenseCtrl+0xd8>
     8e2:	28 85       	ldd	r18, Y+8	; 0x08
     8e4:	39 85       	ldd	r19, Y+9	; 0x09
     8e6:	22 30       	cpi	r18, 0x02	; 2
     8e8:	31 05       	cpc	r19, r1
     8ea:	21 f1       	breq	.+72     	; 0x934 <EXTI_u8SetSenseCtrl+0x9c>
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	99 85       	ldd	r25, Y+9	; 0x09
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	91 05       	cpc	r25, r1
     8f4:	71 f1       	breq	.+92     	; 0x952 <EXTI_u8SetSenseCtrl+0xba>
     8f6:	3c c0       	rjmp	.+120    	; 0x970 <EXTI_u8SetSenseCtrl+0xd8>
		case LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
     8f8:	a5 e5       	ldi	r26, 0x55	; 85
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e5 e5       	ldi	r30, 0x55	; 85
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	8c 93       	st	X, r24
     906:	a5 e5       	ldi	r26, 0x55	; 85
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e5       	ldi	r30, 0x55	; 85
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8d 7f       	andi	r24, 0xFD	; 253
     912:	8c 93       	st	X, r24
     914:	b7 c0       	rjmp	.+366    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case ON_CHANE: SET_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
     916:	a5 e5       	ldi	r26, 0x55	; 85
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e5 e5       	ldi	r30, 0x55	; 85
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	8c 93       	st	X, r24
     924:	a5 e5       	ldi	r26, 0x55	; 85
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e5 e5       	ldi	r30, 0x55	; 85
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8d 7f       	andi	r24, 0xFD	; 253
     930:	8c 93       	st	X, r24
     932:	a8 c0       	rjmp	.+336    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
     934:	a5 e5       	ldi	r26, 0x55	; 85
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e5 e5       	ldi	r30, 0x55	; 85
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	8c 93       	st	X, r24
     942:	a5 e5       	ldi	r26, 0x55	; 85
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e5 e5       	ldi	r30, 0x55	; 85
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	8c 93       	st	X, r24
     950:	99 c0       	rjmp	.+306    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
     952:	a5 e5       	ldi	r26, 0x55	; 85
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	e5 e5       	ldi	r30, 0x55	; 85
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	8c 93       	st	X, r24
     960:	a5 e5       	ldi	r26, 0x55	; 85
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e5 e5       	ldi	r30, 0x55	; 85
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	82 60       	ori	r24, 0x02	; 2
     96c:	8c 93       	st	X, r24
     96e:	8a c0       	rjmp	.+276    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	87 c0       	rjmp	.+270    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		}

	}else if(Copy_IntCh == INT1){
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	09 f0       	breq	.+2      	; 0x97e <EXTI_u8SetSenseCtrl+0xe6>
     97c:	5e c0       	rjmp	.+188    	; 0xa3a <EXTI_u8SetSenseCtrl+0x1a2>


		switch(Copy_SenceCtrl){
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	3f 83       	std	Y+7, r19	; 0x07
     986:	2e 83       	std	Y+6, r18	; 0x06
     988:	8e 81       	ldd	r24, Y+6	; 0x06
     98a:	9f 81       	ldd	r25, Y+7	; 0x07
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	91 05       	cpc	r25, r1
     990:	21 f1       	breq	.+72     	; 0x9da <EXTI_u8SetSenseCtrl+0x142>
     992:	2e 81       	ldd	r18, Y+6	; 0x06
     994:	3f 81       	ldd	r19, Y+7	; 0x07
     996:	22 30       	cpi	r18, 0x02	; 2
     998:	31 05       	cpc	r19, r1
     99a:	2c f4       	brge	.+10     	; 0x9a6 <EXTI_u8SetSenseCtrl+0x10e>
     99c:	8e 81       	ldd	r24, Y+6	; 0x06
     99e:	9f 81       	ldd	r25, Y+7	; 0x07
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	61 f0       	breq	.+24     	; 0x9bc <EXTI_u8SetSenseCtrl+0x124>
     9a4:	47 c0       	rjmp	.+142    	; 0xa34 <EXTI_u8SetSenseCtrl+0x19c>
     9a6:	2e 81       	ldd	r18, Y+6	; 0x06
     9a8:	3f 81       	ldd	r19, Y+7	; 0x07
     9aa:	22 30       	cpi	r18, 0x02	; 2
     9ac:	31 05       	cpc	r19, r1
     9ae:	21 f1       	breq	.+72     	; 0x9f8 <EXTI_u8SetSenseCtrl+0x160>
     9b0:	8e 81       	ldd	r24, Y+6	; 0x06
     9b2:	9f 81       	ldd	r25, Y+7	; 0x07
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	91 05       	cpc	r25, r1
     9b8:	71 f1       	breq	.+92     	; 0xa16 <EXTI_u8SetSenseCtrl+0x17e>
     9ba:	3c c0       	rjmp	.+120    	; 0xa34 <EXTI_u8SetSenseCtrl+0x19c>
		case LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
     9bc:	a5 e5       	ldi	r26, 0x55	; 85
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e5 e5       	ldi	r30, 0x55	; 85
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	8b 7f       	andi	r24, 0xFB	; 251
     9c8:	8c 93       	st	X, r24
     9ca:	a5 e5       	ldi	r26, 0x55	; 85
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	e5 e5       	ldi	r30, 0x55	; 85
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	87 7f       	andi	r24, 0xF7	; 247
     9d6:	8c 93       	st	X, r24
     9d8:	55 c0       	rjmp	.+170    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case ON_CHANE:  SET_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
     9da:	a5 e5       	ldi	r26, 0x55	; 85
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e5 e5       	ldi	r30, 0x55	; 85
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	84 60       	ori	r24, 0x04	; 4
     9e6:	8c 93       	st	X, r24
     9e8:	a5 e5       	ldi	r26, 0x55	; 85
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e5 e5       	ldi	r30, 0x55	; 85
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	87 7f       	andi	r24, 0xF7	; 247
     9f4:	8c 93       	st	X, r24
     9f6:	46 c0       	rjmp	.+140    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
     9f8:	a5 e5       	ldi	r26, 0x55	; 85
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	e5 e5       	ldi	r30, 0x55	; 85
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8b 7f       	andi	r24, 0xFB	; 251
     a04:	8c 93       	st	X, r24
     a06:	a5 e5       	ldi	r26, 0x55	; 85
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	e5 e5       	ldi	r30, 0x55	; 85
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	88 60       	ori	r24, 0x08	; 8
     a12:	8c 93       	st	X, r24
     a14:	37 c0       	rjmp	.+110    	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
     a16:	a5 e5       	ldi	r26, 0x55	; 85
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e5 e5       	ldi	r30, 0x55	; 85
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	84 60       	ori	r24, 0x04	; 4
     a22:	8c 93       	st	X, r24
     a24:	a5 e5       	ldi	r26, 0x55	; 85
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e5 e5       	ldi	r30, 0x55	; 85
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	88 60       	ori	r24, 0x08	; 8
     a30:	8c 93       	st	X, r24
     a32:	28 c0       	rjmp	.+80     	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	25 c0       	rjmp	.+74     	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		}

	}else if(Copy_IntCh == INT2){
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	11 f5       	brne	.+68     	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>


		switch(Copy_SenceCtrl){
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	3d 83       	std	Y+5, r19	; 0x05
     a48:	2c 83       	std	Y+4, r18	; 0x04
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	9d 81       	ldd	r25, Y+5	; 0x05
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	91 05       	cpc	r25, r1
     a52:	31 f0       	breq	.+12     	; 0xa60 <EXTI_u8SetSenseCtrl+0x1c8>
     a54:	2c 81       	ldd	r18, Y+4	; 0x04
     a56:	3d 81       	ldd	r19, Y+5	; 0x05
     a58:	23 30       	cpi	r18, 0x03	; 3
     a5a:	31 05       	cpc	r19, r1
     a5c:	49 f0       	breq	.+18     	; 0xa70 <EXTI_u8SetSenseCtrl+0x1d8>
     a5e:	10 c0       	rjmp	.+32     	; 0xa80 <EXTI_u8SetSenseCtrl+0x1e8>
		case FALLING_EDGE: CLR_BIT(MCUCSR, MCUCSR_ISC2); break;
     a60:	a4 e5       	ldi	r26, 0x54	; 84
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e4 e5       	ldi	r30, 0x54	; 84
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	8f 7b       	andi	r24, 0xBF	; 191
     a6c:	8c 93       	st	X, r24
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		case RISING_EDGE: SET_BIT(MCUCSR, MCUCSR_ISC2); break;
     a70:	a4 e5       	ldi	r26, 0x54	; 84
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e4 e5       	ldi	r30, 0x54	; 84
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	8c 93       	st	X, r24
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <EXTI_u8SetSenseCtrl+0x1ec>
		default: Local_u8ErrorState = NOK; break;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return Local_u8ErrorState;
     a84:	89 81       	ldd	r24, Y+1	; 0x01

}
     a86:	29 96       	adiw	r28, 0x09	; 9
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	08 95       	ret

00000a98 <EXTI_u8EnableIntChannel>:
uint8 EXTI_u8EnableIntChannel(EXTI_IntChannel_t Copy_IntCh){
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <EXTI_u8EnableIntChannel+0x6>
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <EXTI_u8EnableIntChannel+0x8>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
     aa6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh){
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	3c 83       	std	Y+4, r19	; 0x04
     ab0:	2b 83       	std	Y+3, r18	; 0x03
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	91 05       	cpc	r25, r1
     aba:	89 f0       	breq	.+34     	; 0xade <EXTI_u8EnableIntChannel+0x46>
     abc:	2b 81       	ldd	r18, Y+3	; 0x03
     abe:	3c 81       	ldd	r19, Y+4	; 0x04
     ac0:	22 30       	cpi	r18, 0x02	; 2
     ac2:	31 05       	cpc	r19, r1
     ac4:	a1 f0       	breq	.+40     	; 0xaee <EXTI_u8EnableIntChannel+0x56>
     ac6:	8b 81       	ldd	r24, Y+3	; 0x03
     ac8:	9c 81       	ldd	r25, Y+4	; 0x04
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	c1 f4       	brne	.+48     	; 0xafe <EXTI_u8EnableIntChannel+0x66>
	case INT0: SET_BIT(GICR,GICR_INT0); break;
     ace:	ab e5       	ldi	r26, 0x5B	; 91
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	eb e5       	ldi	r30, 0x5B	; 91
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	80 64       	ori	r24, 0x40	; 64
     ada:	8c 93       	st	X, r24
     adc:	12 c0       	rjmp	.+36     	; 0xb02 <EXTI_u8EnableIntChannel+0x6a>
	case INT1: SET_BIT(GICR,GICR_INT1); break;
     ade:	ab e5       	ldi	r26, 0x5B	; 91
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	eb e5       	ldi	r30, 0x5B	; 91
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	80 68       	ori	r24, 0x80	; 128
     aea:	8c 93       	st	X, r24
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <EXTI_u8EnableIntChannel+0x6a>
	case INT2: SET_BIT(GICR,GICR_INT2); break;
     aee:	ab e5       	ldi	r26, 0x5B	; 91
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	eb e5       	ldi	r30, 0x5B	; 91
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	80 62       	ori	r24, 0x20	; 32
     afa:	8c 93       	st	X, r24
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <EXTI_u8EnableIntChannel+0x6a>
	default: Local_u8ErrorState = NOK; break;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
}
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <EXTI_u8DisableIntChannel>:

uint8 EXTI_u8DisableIntChannel(EXTI_IntChannel_t Copy_IntCh){
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <EXTI_u8DisableIntChannel+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <EXTI_u8DisableIntChannel+0x8>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
     b20:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh){
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	28 2f       	mov	r18, r24
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	3c 83       	std	Y+4, r19	; 0x04
     b2a:	2b 83       	std	Y+3, r18	; 0x03
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	9c 81       	ldd	r25, Y+4	; 0x04
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	91 05       	cpc	r25, r1
     b34:	89 f0       	breq	.+34     	; 0xb58 <EXTI_u8DisableIntChannel+0x46>
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	22 30       	cpi	r18, 0x02	; 2
     b3c:	31 05       	cpc	r19, r1
     b3e:	a1 f0       	breq	.+40     	; 0xb68 <EXTI_u8DisableIntChannel+0x56>
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	c1 f4       	brne	.+48     	; 0xb78 <EXTI_u8DisableIntChannel+0x66>
	case INT0: CLR_BIT(GICR,GICR_INT0); break;
     b48:	ab e5       	ldi	r26, 0x5B	; 91
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	eb e5       	ldi	r30, 0x5B	; 91
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8f 7b       	andi	r24, 0xBF	; 191
     b54:	8c 93       	st	X, r24
     b56:	12 c0       	rjmp	.+36     	; 0xb7c <EXTI_u8DisableIntChannel+0x6a>
	case INT1: CLR_BIT(GICR,GICR_INT1); break;
     b58:	ab e5       	ldi	r26, 0x5B	; 91
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	eb e5       	ldi	r30, 0x5B	; 91
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 77       	andi	r24, 0x7F	; 127
     b64:	8c 93       	st	X, r24
     b66:	0a c0       	rjmp	.+20     	; 0xb7c <EXTI_u8DisableIntChannel+0x6a>
	case INT2: CLR_BIT(GICR,GICR_INT2); break;
     b68:	ab e5       	ldi	r26, 0x5B	; 91
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	eb e5       	ldi	r30, 0x5B	; 91
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7d       	andi	r24, 0xDF	; 223
     b74:	8c 93       	st	X, r24
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <EXTI_u8DisableIntChannel+0x6a>
	default: Local_u8ErrorState = NOK; break;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <EXTI_u8SetCallBack>:

/* ISR CODE (callback form App layer) */

uint8 EXTI_u8SetCallBack(EXTI_IntChannel_t Copy_IntCh, void (*Copy_pvCallBackFunc)(void)){
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <EXTI_u8SetCallBack+0x6>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <EXTI_u8SetCallBack+0x8>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	8a 83       	std	Y+2, r24	; 0x02
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
     b9e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL){
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	c9 f0       	breq	.+50     	; 0xbda <EXTI_u8SetCallBack+0x4e>

		if(Copy_IntCh == INT0 || Copy_IntCh == INT1 || Copy_IntCh == INT2 ){
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	88 23       	and	r24, r24
     bac:	31 f0       	breq	.+12     	; 0xbba <EXTI_u8SetCallBack+0x2e>
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f0       	breq	.+6      	; 0xbba <EXTI_u8SetCallBack+0x2e>
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	69 f4       	brne	.+26     	; 0xbd4 <EXTI_u8SetCallBack+0x48>
		EXTI_pvCallBackFunc[Copy_IntCh] = Copy_pvCallBackFunc;
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2b 81       	ldd	r18, Y+3	; 0x03
     bc2:	3c 81       	ldd	r19, Y+4	; 0x04
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	fc 01       	movw	r30, r24
     bca:	e6 58       	subi	r30, 0x86	; 134
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	31 83       	std	Z+1, r19	; 0x01
     bd0:	20 83       	st	Z, r18
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <EXTI_u8SetCallBack+0x52>
		}else{
			Local_u8ErrorState = NOK;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	89 83       	std	Y+1, r24	; 0x01
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <EXTI_u8SetCallBack+0x52>
		}

	}else{
		Local_u8ErrorState = NULL_PTR_ERR;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <__vector_1>:



__attribute__((signal)) void  __vector_1(void);

void  __vector_1(void){ /* INT0 ISR*/
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_pvCallBackFunc[INT0] != NULL){
     c18:	80 91 7a 00 	lds	r24, 0x007A
     c1c:	90 91 7b 00 	lds	r25, 0x007B
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	29 f0       	breq	.+10     	; 0xc2e <__vector_1+0x40>
		EXTI_pvCallBackFunc[INT0]();
     c24:	e0 91 7a 00 	lds	r30, 0x007A
     c28:	f0 91 7b 00 	lds	r31, 0x007B
     c2c:	09 95       	icall
	}
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_2>:

__attribute__((signal)) void  __vector_2(void);

void  __vector_2(void){ /* INT1 ISR*/
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_pvCallBackFunc[INT1] != NULL){
     c7e:	80 91 7c 00 	lds	r24, 0x007C
     c82:	90 91 7d 00 	lds	r25, 0x007D
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	29 f0       	breq	.+10     	; 0xc94 <__vector_2+0x40>
		EXTI_pvCallBackFunc[INT1]();
     c8a:	e0 91 7c 00 	lds	r30, 0x007C
     c8e:	f0 91 7d 00 	lds	r31, 0x007D
     c92:	09 95       	icall
	}
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	bf 91       	pop	r27
     c9e:	af 91       	pop	r26
     ca0:	9f 91       	pop	r25
     ca2:	8f 91       	pop	r24
     ca4:	7f 91       	pop	r23
     ca6:	6f 91       	pop	r22
     ca8:	5f 91       	pop	r21
     caa:	4f 91       	pop	r20
     cac:	3f 91       	pop	r19
     cae:	2f 91       	pop	r18
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <__vector_3>:


__attribute__((signal)) void  __vector_3(void);

void  __vector_3(void){ /* INT2 ISR*/
     cba:	1f 92       	push	r1
     cbc:	0f 92       	push	r0
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[INT2] != NULL){
     ce4:	80 91 7e 00 	lds	r24, 0x007E
     ce8:	90 91 7f 00 	lds	r25, 0x007F
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	29 f0       	breq	.+10     	; 0xcfa <__vector_3+0x40>

		EXTI_pvCallBackFunc[INT2]();
     cf0:	e0 91 7e 00 	lds	r30, 0x007E
     cf4:	f0 91 7f 00 	lds	r31, 0x007F
     cf8:	09 95       	icall
	}
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <GIE_voidEnableGlobal>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_reg.h"

void GIE_voidEnableGlobal(void){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62

      __asm volatile("SEI");   /* inline assembly Set I-Bit */
     d28:	78 94       	sei
	/* SET_BIT(SREG, SREG_I);*/
	 
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void){
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	
	   __asm volatile("CLI");  /* inline assembly Clear I-Bit */
     d38:	f8 94       	cli

	/* CLR_BIT(SREG, SREG_I);*/
		 
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <LED_u8SetOn>:





uint8 LED_u8SetOn(const LED_Confg_t* Copy_pConfig){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <LED_u8SetOn+0x6>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9b 83       	std	Y+3, r25	; 0x03
     d4e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Error_State = OK;
     d50:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pConfig != NULL){
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	19 f1       	breq	.+70     	; 0xda0 <LED_u8SetOn+0x60>

		if(Copy_pConfig->LED_u8ActiveType == ACT_HIGH){
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	80 81       	ld	r24, Z
     d60:	88 23       	and	r24, r24
     d62:	59 f4       	brne	.+22     	; 0xd7a <LED_u8SetOn+0x3a>

			DIO_u8SetPinValue(Copy_pConfig->LED_u8Port, Copy_pConfig->LED_u8Pin, DIO_u8PIN_HIGH);
     d64:	ea 81       	ldd	r30, Y+2	; 0x02
     d66:	fb 81       	ldd	r31, Y+3	; 0x03
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	92 81       	ldd	r25, Z+2	; 0x02
     d70:	69 2f       	mov	r22, r25
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_u8SetPinValue>
     d78:	15 c0       	rjmp	.+42     	; 0xda4 <LED_u8SetOn+0x64>


		}else if(Copy_pConfig->LED_u8ActiveType == ACT_LOW){
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	80 81       	ld	r24, Z
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	59 f4       	brne	.+22     	; 0xd9a <LED_u8SetOn+0x5a>

			DIO_u8SetPinValue(Copy_pConfig->LED_u8Port, Copy_pConfig->LED_u8Pin, DIO_u8PIN_LOW);
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	81 81       	ldd	r24, Z+1	; 0x01
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	92 81       	ldd	r25, Z+2	; 0x02
     d90:	69 2f       	mov	r22, r25
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_u8SetPinValue>
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <LED_u8SetOn+0x64>

		}else{

			Local_u8Error_State = NOK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <LED_u8SetOn+0x64>
		}

	}else{

		Local_u8Error_State = NULL_PTR_ERR;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Error_State;
     da4:	89 81       	ldd	r24, Y+1	; 0x01

}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <LED_u8SetOff>:

uint8 LED_u8SetOff(const LED_Confg_t* Copy_pConfig){
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <LED_u8SetOff+0x6>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Error_State = OK;
     dc2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pConfig != NULL){
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	19 f1       	breq	.+70     	; 0xe12 <LED_u8SetOff+0x60>

		if(Copy_pConfig->LED_u8ActiveType == ACT_HIGH){
     dcc:	ea 81       	ldd	r30, Y+2	; 0x02
     dce:	fb 81       	ldd	r31, Y+3	; 0x03
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	59 f4       	brne	.+22     	; 0xdec <LED_u8SetOff+0x3a>

			DIO_u8SetPinValue(Copy_pConfig->LED_u8Port, Copy_pConfig->LED_u8Pin, DIO_u8PIN_LOW);
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	92 81       	ldd	r25, Z+2	; 0x02
     de2:	69 2f       	mov	r22, r25
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_u8SetPinValue>
     dea:	15 c0       	rjmp	.+42     	; 0xe16 <LED_u8SetOff+0x64>


		}else if(Copy_pConfig->LED_u8ActiveType == ACT_LOW){
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	80 81       	ld	r24, Z
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	59 f4       	brne	.+22     	; 0xe0c <LED_u8SetOff+0x5a>

			DIO_u8SetPinValue(Copy_pConfig->LED_u8Port, Copy_pConfig->LED_u8Pin, DIO_u8PIN_HIGH);
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	ea 81       	ldd	r30, Y+2	; 0x02
     dfe:	fb 81       	ldd	r31, Y+3	; 0x03
     e00:	92 81       	ldd	r25, Z+2	; 0x02
     e02:	69 2f       	mov	r22, r25
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_u8SetPinValue>
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <LED_u8SetOff+0x64>

		}else{

			Local_u8Error_State = NOK;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <LED_u8SetOff+0x64>
		}

	}else{

		Local_u8Error_State = NULL_PTR_ERR;
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Error_State;
     e16:	89 81       	ldd	r24, Y+1	; 0x01


}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <LED_u8Toggle>:

uint8 LED_u8Toggle(const LED_Confg_t* Copy_pConfig){
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <LED_u8Toggle+0x6>
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	9b 83       	std	Y+3, r25	; 0x03
     e32:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Error_State = OK;
     e34:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pConfig != NULL){
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	51 f0       	breq	.+20     	; 0xe52 <LED_u8Toggle+0x2e>

		DIO_u8TogglePinValue(Copy_pConfig->LED_u8Port, Copy_pConfig->LED_u8Pin);
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	ea 81       	ldd	r30, Y+2	; 0x02
     e46:	fb 81       	ldd	r31, Y+3	; 0x03
     e48:	92 81       	ldd	r25, Z+2	; 0x02
     e4a:	69 2f       	mov	r22, r25
     e4c:	0e 94 86 03 	call	0x70c	; 0x70c <DIO_u8TogglePinValue>
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <LED_u8Toggle+0x32>


	}else{

		Local_u8Error_State = NULL_PTR_ERR;
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Error_State;
     e56:	89 81       	ldd	r24, Y+1	; 0x01


}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = PORTA_DIR;
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	8e e7       	ldi	r24, 0x7E	; 126
     e72:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8b ef       	ldi	r24, 0xFB	; 251
     e7a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 e3       	ldi	r24, 0x30	; 48
     e8a:	80 83       	st	Z, r24
	
	PORTA = PORTA_INIT_VAL;
     e8c:	eb e3       	ldi	r30, 0x3B	; 59
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
     e98:	e5 e3       	ldi	r30, 0x35	; 53
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	84 e0       	ldi	r24, 0x04	; 4
     ea4:	80 83       	st	Z, r24

}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <SWITCH_u8GetState>:
#include "SWITCH_cfg.h"
#include "DIO_interface.h"
#include "ErrType.h"


uint8 SWITCH_u8GetState(const SW_Config_t *Copy_pConfig, uint8 *SW_u8State){
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <SWITCH_u8GetState+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <SWITCH_u8GetState+0x8>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <SWITCH_u8GetState+0xa>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9c 83       	std	Y+4, r25	; 0x04
     ebc:	8b 83       	std	Y+3, r24	; 0x03
     ebe:	7e 83       	std	Y+6, r23	; 0x06
     ec0:	6d 83       	std	Y+5, r22	; 0x05

	uint8 Local_u8Error_State = OK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	uint8 Local_u8State;
	DIO_u8ReadPinValue(Copy_pConfig->SWITCH_u8Port, Copy_pConfig->SWITCH_u8Pin, &Local_u8State);
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
     eca:	eb 81       	ldd	r30, Y+3	; 0x03
     ecc:	fc 81       	ldd	r31, Y+4	; 0x04
     ece:	92 81       	ldd	r25, Z+2	; 0x02
     ed0:	9e 01       	movw	r18, r28
     ed2:	2e 5f       	subi	r18, 0xFE	; 254
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	69 2f       	mov	r22, r25
     ed8:	a9 01       	movw	r20, r18
     eda:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <DIO_u8ReadPinValue>

	if(Copy_pConfig != NULL && SW_u8State != NULL){
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	41 f1       	breq	.+80     	; 0xf36 <SWITCH_u8GetState+0x8a>
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	21 f1       	breq	.+72     	; 0xf36 <SWITCH_u8GetState+0x8a>

       if(Copy_pConfig->SWITCH_u8Type == PULL_UP){
     eee:	eb 81       	ldd	r30, Y+3	; 0x03
     ef0:	fc 81       	ldd	r31, Y+4	; 0x04
     ef2:	80 81       	ld	r24, Z
     ef4:	88 23       	and	r24, r24
     ef6:	61 f4       	brne	.+24     	; 0xf10 <SWITCH_u8GetState+0x64>

           if(Local_u8State == DIO_u8PIN_LOW){
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	88 23       	and	r24, r24
     efc:	21 f4       	brne	.+8      	; 0xf06 <SWITCH_u8GetState+0x5a>
        	   *SW_u8State = SW_PRESSED;
     efe:	ed 81       	ldd	r30, Y+5	; 0x05
     f00:	fe 81       	ldd	r31, Y+6	; 0x06
     f02:	10 82       	st	Z, r1
     f04:	18 c0       	rjmp	.+48     	; 0xf36 <SWITCH_u8GetState+0x8a>
           }else{
        	   *SW_u8State = SW_RELEASES;
     f06:	ed 81       	ldd	r30, Y+5	; 0x05
     f08:	fe 81       	ldd	r31, Y+6	; 0x06
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 83       	st	Z, r24
     f0e:	13 c0       	rjmp	.+38     	; 0xf36 <SWITCH_u8GetState+0x8a>
           }

       }else if(Copy_pConfig->SWITCH_u8Type == PULL_DOWN){
     f10:	eb 81       	ldd	r30, Y+3	; 0x03
     f12:	fc 81       	ldd	r31, Y+4	; 0x04
     f14:	80 81       	ld	r24, Z
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	61 f4       	brne	.+24     	; 0xf32 <SWITCH_u8GetState+0x86>


           if(Local_u8State == DIO_u8PIN_HIGH){
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	21 f4       	brne	.+8      	; 0xf28 <SWITCH_u8GetState+0x7c>
        	   *SW_u8State = SW_PRESSED;
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	10 82       	st	Z, r1
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <SWITCH_u8GetState+0x8a>
           }else{
        	   *SW_u8State = SW_RELEASES;
     f28:	ed 81       	ldd	r30, Y+5	; 0x05
     f2a:	fe 81       	ldd	r31, Y+6	; 0x06
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 83       	st	Z, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <SWITCH_u8GetState+0x8a>
           }

       }else{

    	   Local_u8Error_State = NOK;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
       }

	}


  return Local_u8Error_State;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
}
     f38:	26 96       	adiw	r28, 0x06	; 6
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <TIMER0_u8Init>:
 *  timer2  need 4 call back func
 */

static void(*GlobalCallBackFucn[9])(void) = {NULL};

uint8 TIMER0_u8Init(const TIMER0_cfg_t  *Copy_suCfg){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	29 97       	sbiw	r28, 0x09	; 9
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	9b 83       	std	Y+3, r25	; 0x03
     f60:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8ErrState = OK;
     f62:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_suCfg != NULL){
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	9b 81       	ldd	r25, Y+3	; 0x03
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	09 f4       	brne	.+2      	; 0xf6e <TIMER0_u8Init+0x24>
     f6c:	4a c1       	rjmp	.+660    	; 0x1202 <TIMER0_u8Init+0x2b8>

		/* Select Mode */
		switch(Copy_suCfg->WFG_Mode){
     f6e:	ea 81       	ldd	r30, Y+2	; 0x02
     f70:	fb 81       	ldd	r31, Y+3	; 0x03
     f72:	80 81       	ld	r24, Z
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	39 87       	std	Y+9, r19	; 0x09
     f7a:	28 87       	std	Y+8, r18	; 0x08
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	99 85       	ldd	r25, Y+9	; 0x09
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	91 05       	cpc	r25, r1
     f84:	21 f1       	breq	.+72     	; 0xfce <TIMER0_u8Init+0x84>
     f86:	28 85       	ldd	r18, Y+8	; 0x08
     f88:	39 85       	ldd	r19, Y+9	; 0x09
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	2c f4       	brge	.+10     	; 0xf9a <TIMER0_u8Init+0x50>
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 f0       	breq	.+24     	; 0xfb0 <TIMER0_u8Init+0x66>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <TIMER0_u8Init+0xde>
     f9a:	28 85       	ldd	r18, Y+8	; 0x08
     f9c:	39 85       	ldd	r19, Y+9	; 0x09
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	21 f1       	breq	.+72     	; 0xfec <TIMER0_u8Init+0xa2>
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	71 f1       	breq	.+92     	; 0x100a <TIMER0_u8Init+0xc0>
     fae:	3c c0       	rjmp	.+120    	; 0x1028 <TIMER0_u8Init+0xde>
		case T0_NORMAL:CLR_BIT(TCCR0, TCCR0_WGM00);CLR_BIT(TCCR0, TCCR0_WGM01);break;
     fb0:	a3 e5       	ldi	r26, 0x53	; 83
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e3 e5       	ldi	r30, 0x53	; 83
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	8c 93       	st	X, r24
     fbe:	a3 e5       	ldi	r26, 0x53	; 83
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e3 e5       	ldi	r30, 0x53	; 83
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	8c 93       	st	X, r24
     fcc:	2f c0       	rjmp	.+94     	; 0x102c <TIMER0_u8Init+0xe2>
		case T0_COMPARE_MATCH:CLR_BIT(TCCR0, TCCR0_WGM00);SET_BIT(TCCR0, TCCR0_WGM01); break;
     fce:	a3 e5       	ldi	r26, 0x53	; 83
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e5       	ldi	r30, 0x53	; 83
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	8c 93       	st	X, r24
     fdc:	a3 e5       	ldi	r26, 0x53	; 83
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 60       	ori	r24, 0x08	; 8
     fe8:	8c 93       	st	X, r24
     fea:	20 c0       	rjmp	.+64     	; 0x102c <TIMER0_u8Init+0xe2>
		case T0_FAST_PWM:SET_BIT(TCCR0, TCCR0_WGM00);SET_BIT(TCCR0, TCCR0_WGM01); break;
     fec:	a3 e5       	ldi	r26, 0x53	; 83
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e3 e5       	ldi	r30, 0x53	; 83
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24
     ffa:	a3 e5       	ldi	r26, 0x53	; 83
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e3 e5       	ldi	r30, 0x53	; 83
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	88 60       	ori	r24, 0x08	; 8
    1006:	8c 93       	st	X, r24
    1008:	11 c0       	rjmp	.+34     	; 0x102c <TIMER0_u8Init+0xe2>
		case T0_PHASE_CORRECT_PWM:SET_BIT(TCCR0, TCCR0_WGM00);CLR_BIT(TCCR0, TCCR0_WGM01); break;
    100a:	a3 e5       	ldi	r26, 0x53	; 83
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e3 e5       	ldi	r30, 0x53	; 83
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 64       	ori	r24, 0x40	; 64
    1016:	8c 93       	st	X, r24
    1018:	a3 e5       	ldi	r26, 0x53	; 83
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e3 e5       	ldi	r30, 0x53	; 83
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	87 7f       	andi	r24, 0xF7	; 247
    1024:	8c 93       	st	X, r24
    1026:	02 c0       	rjmp	.+4      	; 0x102c <TIMER0_u8Init+0xe2>
		default: Local_u8ErrState = NOK;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Enable Interrupt Mode*/
		switch(Copy_suCfg->INT_State){
    102c:	ea 81       	ldd	r30, Y+2	; 0x02
    102e:	fb 81       	ldd	r31, Y+3	; 0x03
    1030:	83 81       	ldd	r24, Z+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3f 83       	std	Y+7, r19	; 0x07
    1038:	2e 83       	std	Y+6, r18	; 0x06
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	9f 81       	ldd	r25, Y+7	; 0x07
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	89 f0       	breq	.+34     	; 0x1066 <TIMER0_u8Init+0x11c>
    1044:	2e 81       	ldd	r18, Y+6	; 0x06
    1046:	3f 81       	ldd	r19, Y+7	; 0x07
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	a1 f0       	breq	.+40     	; 0x1076 <TIMER0_u8Init+0x12c>
    104e:	8e 81       	ldd	r24, Y+6	; 0x06
    1050:	9f 81       	ldd	r25, Y+7	; 0x07
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	f9 f4       	brne	.+62     	; 0x1094 <TIMER0_u8Init+0x14a>
		case T0_INT_OVERFLOW:SET_BIT(TIMSK, TIMSK_TOIE0); break;
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	8c 93       	st	X, r24
    1064:	19 c0       	rjmp	.+50     	; 0x1098 <TIMER0_u8Init+0x14e>
		case T0_INT_COMPARE: SET_BIT(TIMSK, TIMSK_OCIE0); break;
    1066:	a9 e5       	ldi	r26, 0x59	; 89
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e9 e5       	ldi	r30, 0x59	; 89
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	8c 93       	st	X, r24
    1074:	11 c0       	rjmp	.+34     	; 0x1098 <TIMER0_u8Init+0x14e>
		case T0_INT_DISABLED:CLR_BIT(TIMSK, TIMSK_TOIE0); CLR_BIT(TIMSK, TIMSK_OCIE0);break;
    1076:	a9 e5       	ldi	r26, 0x59	; 89
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 e5       	ldi	r30, 0x59	; 89
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	8c 93       	st	X, r24
    1084:	a9 e5       	ldi	r26, 0x59	; 89
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 e5       	ldi	r30, 0x59	; 89
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8d 7f       	andi	r24, 0xFD	; 253
    1090:	8c 93       	st	X, r24
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <TIMER0_u8Init+0x14e>
		default:Local_u8ErrState = NOK;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Select Hardware action on Pin OC0*/

		switch(Copy_suCfg->Out_HW_Opt){
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3d 83       	std	Y+5, r19	; 0x05
    10a4:	2c 83       	std	Y+4, r18	; 0x04
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <TIMER0_u8Init+0x168>
    10b0:	5a c0       	rjmp	.+180    	; 0x1166 <TIMER0_u8Init+0x21c>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	24 30       	cpi	r18, 0x04	; 4
    10b8:	31 05       	cpc	r19, r1
    10ba:	7c f4       	brge	.+30     	; 0x10da <TIMER0_u8Init+0x190>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	91 f1       	breq	.+100    	; 0x112a <TIMER0_u8Init+0x1e0>
    10c6:	2c 81       	ldd	r18, Y+4	; 0x04
    10c8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	e4 f5       	brge	.+120    	; 0x1148 <TIMER0_u8Init+0x1fe>
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	d1 f0       	breq	.+52     	; 0x110c <TIMER0_u8Init+0x1c2>
    10d8:	91 c0       	rjmp	.+290    	; 0x11fc <TIMER0_u8Init+0x2b2>
    10da:	2c 81       	ldd	r18, Y+4	; 0x04
    10dc:	3d 81       	ldd	r19, Y+5	; 0x05
    10de:	25 30       	cpi	r18, 0x05	; 5
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <TIMER0_u8Init+0x19c>
    10e4:	5e c0       	rjmp	.+188    	; 0x11a2 <TIMER0_u8Init+0x258>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	91 05       	cpc	r25, r1
    10ee:	0c f4       	brge	.+2      	; 0x10f2 <TIMER0_u8Init+0x1a8>
    10f0:	49 c0       	rjmp	.+146    	; 0x1184 <TIMER0_u8Init+0x23a>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	26 30       	cpi	r18, 0x06	; 6
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <TIMER0_u8Init+0x1b4>
    10fc:	61 c0       	rjmp	.+194    	; 0x11c0 <TIMER0_u8Init+0x276>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	87 30       	cpi	r24, 0x07	; 7
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <TIMER0_u8Init+0x1c0>
    1108:	6a c0       	rjmp	.+212    	; 0x11de <TIMER0_u8Init+0x294>
    110a:	78 c0       	rjmp	.+240    	; 0x11fc <TIMER0_u8Init+0x2b2>
		case T0_OC0_DISCONNECT:	CLR_BIT(TCCR0, TCCR0_COM00);CLR_BIT(TCCR0, TCCR0_COM01);break;
    110c:	a3 e5       	ldi	r26, 0x53	; 83
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e3 e5       	ldi	r30, 0x53	; 83
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 7e       	andi	r24, 0xEF	; 239
    1118:	8c 93       	st	X, r24
    111a:	a3 e5       	ldi	r26, 0x53	; 83
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e5       	ldi	r30, 0x53	; 83
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7d       	andi	r24, 0xDF	; 223
    1126:	8c 93       	st	X, r24
    1128:	6e c0       	rjmp	.+220    	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_NON_PWM_TOGGEL:	SET_BIT(TCCR0, TCCR0_COM00);CLR_BIT(TCCR0, TCCR0_COM01);break;
    112a:	a3 e5       	ldi	r26, 0x53	; 83
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e3 e5       	ldi	r30, 0x53	; 83
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 61       	ori	r24, 0x10	; 16
    1136:	8c 93       	st	X, r24
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7d       	andi	r24, 0xDF	; 223
    1144:	8c 93       	st	X, r24
    1146:	5f c0       	rjmp	.+190    	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_NON_PWM_CLEAR:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7e       	andi	r24, 0xEF	; 239
    1154:	8c 93       	st	X, r24
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 62       	ori	r24, 0x20	; 32
    1162:	8c 93       	st	X, r24
    1164:	50 c0       	rjmp	.+160    	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_NON_PWM_SET:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1166:	a3 e5       	ldi	r26, 0x53	; 83
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e3 e5       	ldi	r30, 0x53	; 83
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	8c 93       	st	X, r24
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	8c 93       	st	X, r24
    1182:	41 c0       	rjmp	.+130    	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_FAST_PWM_CLRON_COM_SETON_TOP:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7e       	andi	r24, 0xEF	; 239
    1190:	8c 93       	st	X, r24
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 62       	ori	r24, 0x20	; 32
    119e:	8c 93       	st	X, r24
    11a0:	32 c0       	rjmp	.+100    	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    11a2:	a3 e5       	ldi	r26, 0x53	; 83
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	8c 93       	st	X, r24
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	8c 93       	st	X, r24
    11be:	23 c0       	rjmp	.+70     	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    11c0:	a3 e5       	ldi	r26, 0x53	; 83
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e3 e5       	ldi	r30, 0x53	; 83
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 7e       	andi	r24, 0xEF	; 239
    11cc:	8c 93       	st	X, r24
    11ce:	a3 e5       	ldi	r26, 0x53	; 83
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e3 e5       	ldi	r30, 0x53	; 83
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 62       	ori	r24, 0x20	; 32
    11da:	8c 93       	st	X, r24
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <TIMER0_u8Init+0x2bc>
		case T0_OC0_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	8c 93       	st	X, r24
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <TIMER0_u8Init+0x2bc>
		default: Local_u8ErrState= NOK;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <TIMER0_u8Init+0x2bc>
		}


	}else{
		Local_u8ErrState = NULL_PTR_ERR;
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Set Prescaler */
	TCCR0 &= MASK_LEAST_3_BIT;
    1206:	a3 e5       	ldi	r26, 0x53	; 83
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e3 e5       	ldi	r30, 0x53	; 83
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 7f       	andi	r24, 0xF8	; 248
    1212:	8c 93       	st	X, r24
	TCCR0 |= (Copy_suCfg->Prescaler);
    1214:	a3 e5       	ldi	r26, 0x53	; 83
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e3 e5       	ldi	r30, 0x53	; 83
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	90 81       	ld	r25, Z
    121e:	ea 81       	ldd	r30, Y+2	; 0x02
    1220:	fb 81       	ldd	r31, Y+3	; 0x03
    1222:	81 81       	ldd	r24, Z+1	; 0x01
    1224:	89 2b       	or	r24, r25
    1226:	8c 93       	st	X, r24


	return Local_u8ErrState;
    1228:	89 81       	ldd	r24, Y+1	; 0x01

}
    122a:	29 96       	adiw	r28, 0x09	; 9
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <TIMER_u8SetCallBackFunc>:


uint8 TIMER_u8SetCallBackFunc(uint8 Copy_u8IntSource,void(*Copy_pvCallBackFucn)(void)){
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <TIMER_u8SetCallBackFunc+0x6>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TIMER_u8SetCallBackFunc+0x8>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	7c 83       	std	Y+4, r23	; 0x04
    124c:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    124e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFucn != NULL){
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	69 f0       	breq	.+26     	; 0x1272 <TIMER_u8SetCallBackFunc+0x36>
		GlobalCallBackFucn[Copy_u8IntSource] =Copy_pvCallBackFucn;
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	fc 01       	movw	r30, r24
    1264:	e0 58       	subi	r30, 0x80	; 128
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <TIMER_u8SetCallBackFunc+0x3a>

	}else{
		Local_u8ErrState = NULL_PTR_ERR;
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrState;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(uint8 Copy_u8PreloadVal){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	0f 92       	push	r0
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Copy_u8PreloadVal;
    1292:	e2 e5       	ldi	r30, 0x52	; 82
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	80 83       	st	Z, r24

}
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <TIMER0_voidSetCompareValue>:

void TIMER0_voidSetCompareValue(uint8 Copy_u8CompareVal){
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8CompareVal;
    12ae:	ec e5       	ldi	r30, 0x5C	; 92
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	80 83       	st	Z, r24

}
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <TIMER0_voidSetPrescaler>:


void TIMER0_voidSetPrescaler(TIMER_Prescaler_t  Copy_PrescalerVal){
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01

	/* Set Prescaler */
	TCCR0 &= MASK_LEAST_3_BIT;
    12ca:	a3 e5       	ldi	r26, 0x53	; 83
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e3 e5       	ldi	r30, 0x53	; 83
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	8c 93       	st	X, r24
	TCCR0 |= Copy_PrescalerVal;
    12d8:	a3 e5       	ldi	r26, 0x53	; 83
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e3 e5       	ldi	r30, 0x53	; 83
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	90 81       	ld	r25, Z
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	89 2b       	or	r24, r25
    12e6:	8c 93       	st	X, r24

}
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <TIMER0_u8SetCompareOutputMode>:


uint8 TIMER0_u8SetCompareOutputMode(TIMER0_OUT_HW_Option Copy_u8OutputMode){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <TIMER0_u8SetCompareOutputMode+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <TIMER0_u8SetCompareOutputMode+0x8>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrState = OK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8OutputMode){
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <TIMER0_u8SetCompareOutputMode+0x26>
    1314:	5a c0       	rjmp	.+180    	; 0x13ca <TIMER0_u8SetCompareOutputMode+0xda>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	24 30       	cpi	r18, 0x04	; 4
    131c:	31 05       	cpc	r19, r1
    131e:	7c f4       	brge	.+30     	; 0x133e <TIMER0_u8SetCompareOutputMode+0x4e>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	91 f1       	breq	.+100    	; 0x138e <TIMER0_u8SetCompareOutputMode+0x9e>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	e4 f5       	brge	.+120    	; 0x13ac <TIMER0_u8SetCompareOutputMode+0xbc>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	d1 f0       	breq	.+52     	; 0x1370 <TIMER0_u8SetCompareOutputMode+0x80>
    133c:	91 c0       	rjmp	.+290    	; 0x1460 <TIMER0_u8SetCompareOutputMode+0x170>
    133e:	2b 81       	ldd	r18, Y+3	; 0x03
    1340:	3c 81       	ldd	r19, Y+4	; 0x04
    1342:	25 30       	cpi	r18, 0x05	; 5
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <TIMER0_u8SetCompareOutputMode+0x5a>
    1348:	5e c0       	rjmp	.+188    	; 0x1406 <TIMER0_u8SetCompareOutputMode+0x116>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	85 30       	cpi	r24, 0x05	; 5
    1350:	91 05       	cpc	r25, r1
    1352:	0c f4       	brge	.+2      	; 0x1356 <TIMER0_u8SetCompareOutputMode+0x66>
    1354:	49 c0       	rjmp	.+146    	; 0x13e8 <TIMER0_u8SetCompareOutputMode+0xf8>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	26 30       	cpi	r18, 0x06	; 6
    135c:	31 05       	cpc	r19, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <TIMER0_u8SetCompareOutputMode+0x72>
    1360:	61 c0       	rjmp	.+194    	; 0x1424 <TIMER0_u8SetCompareOutputMode+0x134>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	87 30       	cpi	r24, 0x07	; 7
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <TIMER0_u8SetCompareOutputMode+0x7e>
    136c:	6a c0       	rjmp	.+212    	; 0x1442 <TIMER0_u8SetCompareOutputMode+0x152>
    136e:	78 c0       	rjmp	.+240    	; 0x1460 <TIMER0_u8SetCompareOutputMode+0x170>
	case T0_OC0_DISCONNECT:	CLR_BIT(TCCR0, TCCR0_COM00);CLR_BIT(TCCR0, TCCR0_COM01);break;
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 7e       	andi	r24, 0xEF	; 239
    137c:	8c 93       	st	X, r24
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7d       	andi	r24, 0xDF	; 223
    138a:	8c 93       	st	X, r24
    138c:	6b c0       	rjmp	.+214    	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_NON_PWM_TOGGEL:	SET_BIT(TCCR0, TCCR0_COM00);CLR_BIT(TCCR0, TCCR0_COM01);break;
    138e:	a3 e5       	ldi	r26, 0x53	; 83
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e3 e5       	ldi	r30, 0x53	; 83
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	8c 93       	st	X, r24
    139c:	a3 e5       	ldi	r26, 0x53	; 83
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e3 e5       	ldi	r30, 0x53	; 83
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	8c 93       	st	X, r24
    13aa:	5c c0       	rjmp	.+184    	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_NON_PWM_CLEAR:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    13ac:	a3 e5       	ldi	r26, 0x53	; 83
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 7e       	andi	r24, 0xEF	; 239
    13b8:	8c 93       	st	X, r24
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 62       	ori	r24, 0x20	; 32
    13c6:	8c 93       	st	X, r24
    13c8:	4d c0       	rjmp	.+154    	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_NON_PWM_SET:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    13ca:	a3 e5       	ldi	r26, 0x53	; 83
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e3 e5       	ldi	r30, 0x53	; 83
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 61       	ori	r24, 0x10	; 16
    13d6:	8c 93       	st	X, r24
    13d8:	a3 e5       	ldi	r26, 0x53	; 83
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e3 e5       	ldi	r30, 0x53	; 83
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 62       	ori	r24, 0x20	; 32
    13e4:	8c 93       	st	X, r24
    13e6:	3e c0       	rjmp	.+124    	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_FAST_PWM_CLRON_COM_SETON_TOP:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    13e8:	a3 e5       	ldi	r26, 0x53	; 83
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e3 e5       	ldi	r30, 0x53	; 83
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7e       	andi	r24, 0xEF	; 239
    13f4:	8c 93       	st	X, r24
    13f6:	a3 e5       	ldi	r26, 0x53	; 83
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e3 e5       	ldi	r30, 0x53	; 83
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 62       	ori	r24, 0x20	; 32
    1402:	8c 93       	st	X, r24
    1404:	2f c0       	rjmp	.+94     	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1406:	a3 e5       	ldi	r26, 0x53	; 83
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e3 e5       	ldi	r30, 0x53	; 83
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 61       	ori	r24, 0x10	; 16
    1412:	8c 93       	st	X, r24
    1414:	a3 e5       	ldi	r26, 0x53	; 83
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e3 e5       	ldi	r30, 0x53	; 83
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 62       	ori	r24, 0x20	; 32
    1420:	8c 93       	st	X, r24
    1422:	20 c0       	rjmp	.+64     	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:CLR_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1424:	a3 e5       	ldi	r26, 0x53	; 83
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e3 e5       	ldi	r30, 0x53	; 83
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7e       	andi	r24, 0xEF	; 239
    1430:	8c 93       	st	X, r24
    1432:	a3 e5       	ldi	r26, 0x53	; 83
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e3 e5       	ldi	r30, 0x53	; 83
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	8c 93       	st	X, r24
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	case T0_OC0_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR0, TCCR0_COM00);SET_BIT(TCCR0, TCCR0_COM01);break;
    1442:	a3 e5       	ldi	r26, 0x53	; 83
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e3 e5       	ldi	r30, 0x53	; 83
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	8c 93       	st	X, r24
    1450:	a3 e5       	ldi	r26, 0x53	; 83
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e3 e5       	ldi	r30, 0x53	; 83
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 62       	ori	r24, 0x20	; 32
    145c:	8c 93       	st	X, r24
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <TIMER0_u8SetCompareOutputMode+0x174>
	default: Local_u8ErrState= NOK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <TIMER1_u8Init>:

/* TIMER1*/

uint8 TIMER1_u8Init(const TIMER1_cfg_t  *Copy_suCfg){
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	60 97       	sbiw	r28, 0x10	; 16
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	9b 83       	std	Y+3, r25	; 0x03
    148a:	8a 83       	std	Y+2, r24	; 0x02

	uint8  Local_u8ErrState = OK;
    148c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_suCfg != NULL){
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	09 f4       	brne	.+2      	; 0x1498 <TIMER1_u8Init+0x24>
    1496:	da c3       	rjmp	.+1972   	; 0x1c4c <TIMER1_u8Init+0x7d8>

		/* MODE SELECT*/

		switch(Copy_suCfg->WFG_Mode){
    1498:	ea 81       	ldd	r30, Y+2	; 0x02
    149a:	fb 81       	ldd	r31, Y+3	; 0x03
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3f 87       	std	Y+15, r19	; 0x0f
    14a4:	2e 87       	std	Y+14, r18	; 0x0e
    14a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    14aa:	87 30       	cpi	r24, 0x07	; 7
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <TIMER1_u8Init+0x3e>
    14b0:	f2 c0       	rjmp	.+484    	; 0x1696 <TIMER1_u8Init+0x222>
    14b2:	2e 85       	ldd	r18, Y+14	; 0x0e
    14b4:	3f 85       	ldd	r19, Y+15	; 0x0f
    14b6:	28 30       	cpi	r18, 0x08	; 8
    14b8:	31 05       	cpc	r19, r1
    14ba:	4c f5       	brge	.+82     	; 0x150e <TIMER1_u8Init+0x9a>
    14bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14be:	9f 85       	ldd	r25, Y+15	; 0x0f
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <TIMER1_u8Init+0x54>
    14c6:	90 c0       	rjmp	.+288    	; 0x15e8 <TIMER1_u8Init+0x174>
    14c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    14ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    14cc:	24 30       	cpi	r18, 0x04	; 4
    14ce:	31 05       	cpc	r19, r1
    14d0:	8c f4       	brge	.+34     	; 0x14f4 <TIMER1_u8Init+0x80>
    14d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    14d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <TIMER1_u8Init+0x6a>
    14dc:	59 c0       	rjmp	.+178    	; 0x1590 <TIMER1_u8Init+0x11c>
    14de:	2e 85       	ldd	r18, Y+14	; 0x0e
    14e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	0c f0       	brlt	.+2      	; 0x14ea <TIMER1_u8Init+0x76>
    14e8:	69 c0       	rjmp	.+210    	; 0x15bc <TIMER1_u8Init+0x148>
    14ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	c9 f1       	breq	.+114    	; 0x1564 <TIMER1_u8Init+0xf0>
    14f2:	7e c1       	rjmp	.+764    	; 0x17f0 <TIMER1_u8Init+0x37c>
    14f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    14f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    14f8:	25 30       	cpi	r18, 0x05	; 5
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <TIMER1_u8Init+0x8c>
    14fe:	9f c0       	rjmp	.+318    	; 0x163e <TIMER1_u8Init+0x1ca>
    1500:	8e 85       	ldd	r24, Y+14	; 0x0e
    1502:	9f 85       	ldd	r25, Y+15	; 0x0f
    1504:	86 30       	cpi	r24, 0x06	; 6
    1506:	91 05       	cpc	r25, r1
    1508:	0c f0       	brlt	.+2      	; 0x150c <TIMER1_u8Init+0x98>
    150a:	af c0       	rjmp	.+350    	; 0x166a <TIMER1_u8Init+0x1f6>
    150c:	82 c0       	rjmp	.+260    	; 0x1612 <TIMER1_u8Init+0x19e>
    150e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1510:	3f 85       	ldd	r19, Y+15	; 0x0f
    1512:	2b 30       	cpi	r18, 0x0B	; 11
    1514:	31 05       	cpc	r19, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <TIMER1_u8Init+0xa6>
    1518:	15 c1       	rjmp	.+554    	; 0x1744 <TIMER1_u8Init+0x2d0>
    151a:	8e 85       	ldd	r24, Y+14	; 0x0e
    151c:	9f 85       	ldd	r25, Y+15	; 0x0f
    151e:	8c 30       	cpi	r24, 0x0C	; 12
    1520:	91 05       	cpc	r25, r1
    1522:	6c f4       	brge	.+26     	; 0x153e <TIMER1_u8Init+0xca>
    1524:	2e 85       	ldd	r18, Y+14	; 0x0e
    1526:	3f 85       	ldd	r19, Y+15	; 0x0f
    1528:	29 30       	cpi	r18, 0x09	; 9
    152a:	31 05       	cpc	r19, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <TIMER1_u8Init+0xbc>
    152e:	de c0       	rjmp	.+444    	; 0x16ec <TIMER1_u8Init+0x278>
    1530:	8e 85       	ldd	r24, Y+14	; 0x0e
    1532:	9f 85       	ldd	r25, Y+15	; 0x0f
    1534:	8a 30       	cpi	r24, 0x0A	; 10
    1536:	91 05       	cpc	r25, r1
    1538:	0c f0       	brlt	.+2      	; 0x153c <TIMER1_u8Init+0xc8>
    153a:	ee c0       	rjmp	.+476    	; 0x1718 <TIMER1_u8Init+0x2a4>
    153c:	c1 c0       	rjmp	.+386    	; 0x16c0 <TIMER1_u8Init+0x24c>
    153e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1540:	3f 85       	ldd	r19, Y+15	; 0x0f
    1542:	2d 30       	cpi	r18, 0x0D	; 13
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <TIMER1_u8Init+0xd6>
    1548:	28 c1       	rjmp	.+592    	; 0x179a <TIMER1_u8Init+0x326>
    154a:	8e 85       	ldd	r24, Y+14	; 0x0e
    154c:	9f 85       	ldd	r25, Y+15	; 0x0f
    154e:	8d 30       	cpi	r24, 0x0D	; 13
    1550:	91 05       	cpc	r25, r1
    1552:	0c f4       	brge	.+2      	; 0x1556 <TIMER1_u8Init+0xe2>
    1554:	0c c1       	rjmp	.+536    	; 0x176e <TIMER1_u8Init+0x2fa>
    1556:	2e 85       	ldd	r18, Y+14	; 0x0e
    1558:	3f 85       	ldd	r19, Y+15	; 0x0f
    155a:	2e 30       	cpi	r18, 0x0E	; 14
    155c:	31 05       	cpc	r19, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <TIMER1_u8Init+0xee>
    1560:	32 c1       	rjmp	.+612    	; 0x17c6 <TIMER1_u8Init+0x352>
    1562:	46 c1       	rjmp	.+652    	; 0x17f0 <TIMER1_u8Init+0x37c>
		case T1_NORMAL: TCCR1A &=0b11111100;CLR_BIT(TCCR1B, TCCR1B_WGM13);CLR_BIT(TCCR1B, TCCR1B_WGM12); break;
    1564:	af e4       	ldi	r26, 0x4F	; 79
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ef e4       	ldi	r30, 0x4F	; 79
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8c 7f       	andi	r24, 0xFC	; 252
    1570:	8c 93       	st	X, r24
    1572:	ae e4       	ldi	r26, 0x4E	; 78
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ee e4       	ldi	r30, 0x4E	; 78
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8f 7e       	andi	r24, 0xEF	; 239
    157e:	8c 93       	st	X, r24
    1580:	ae e4       	ldi	r26, 0x4E	; 78
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ee e4       	ldi	r30, 0x4E	; 78
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	87 7f       	andi	r24, 0xF7	; 247
    158c:	8c 93       	st	X, r24
    158e:	32 c1       	rjmp	.+612    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_CORRECT_8BIT:TCCR1A &=0b11111101;CLR_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    1590:	af e4       	ldi	r26, 0x4F	; 79
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ef e4       	ldi	r30, 0x4F	; 79
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8d 7f       	andi	r24, 0xFD	; 253
    159c:	8c 93       	st	X, r24
    159e:	ae e4       	ldi	r26, 0x4E	; 78
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ee e4       	ldi	r30, 0x4E	; 78
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	87 7f       	andi	r24, 0xF7	; 247
    15aa:	8c 93       	st	X, r24
    15ac:	ae e4       	ldi	r26, 0x4E	; 78
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ee e4       	ldi	r30, 0x4E	; 78
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 7e       	andi	r24, 0xEF	; 239
    15b8:	8c 93       	st	X, r24
    15ba:	1c c1       	rjmp	.+568    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_CORRECT_9BIT:TCCR1A &=0b11111110;CLR_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    15bc:	af e4       	ldi	r26, 0x4F	; 79
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ef e4       	ldi	r30, 0x4F	; 79
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	8c 93       	st	X, r24
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	8c 93       	st	X, r24
    15d8:	ae e4       	ldi	r26, 0x4E	; 78
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ee e4       	ldi	r30, 0x4E	; 78
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 7e       	andi	r24, 0xEF	; 239
    15e4:	8c 93       	st	X, r24
    15e6:	06 c1       	rjmp	.+524    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_CORRECT_10BIT:TCCR1A &=0b11111111;CLR_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    15e8:	af e4       	ldi	r26, 0x4F	; 79
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ef e4       	ldi	r30, 0x4F	; 79
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8c 93       	st	X, r24
    15f4:	ae e4       	ldi	r26, 0x4E	; 78
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ee e4       	ldi	r30, 0x4E	; 78
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	87 7f       	andi	r24, 0xF7	; 247
    1600:	8c 93       	st	X, r24
    1602:	ae e4       	ldi	r26, 0x4E	; 78
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e4       	ldi	r30, 0x4E	; 78
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8f 7e       	andi	r24, 0xEF	; 239
    160e:	8c 93       	st	X, r24
    1610:	f1 c0       	rjmp	.+482    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_CTC_TOP_OCRA1:TCCR1A &=0b11111100;SET_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    1612:	af e4       	ldi	r26, 0x4F	; 79
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e4       	ldi	r30, 0x4F	; 79
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8c 7f       	andi	r24, 0xFC	; 252
    161e:	8c 93       	st	X, r24
    1620:	ae e4       	ldi	r26, 0x4E	; 78
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ee e4       	ldi	r30, 0x4E	; 78
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
    162e:	ae e4       	ldi	r26, 0x4E	; 78
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ee e4       	ldi	r30, 0x4E	; 78
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8f 7e       	andi	r24, 0xEF	; 239
    163a:	8c 93       	st	X, r24
    163c:	db c0       	rjmp	.+438    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_FAST_PWM_8BIT:TCCR1A &=0b11111101;SET_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    163e:	af e4       	ldi	r26, 0x4F	; 79
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ef e4       	ldi	r30, 0x4F	; 79
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
    164c:	ae e4       	ldi	r26, 0x4E	; 78
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ee e4       	ldi	r30, 0x4E	; 78
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	8c 93       	st	X, r24
    165a:	ae e4       	ldi	r26, 0x4E	; 78
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ee e4       	ldi	r30, 0x4E	; 78
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 7e       	andi	r24, 0xEF	; 239
    1666:	8c 93       	st	X, r24
    1668:	c5 c0       	rjmp	.+394    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_FAST_PWM_9BIT:TCCR1A &=0b11111110;SET_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    166a:	af e4       	ldi	r26, 0x4F	; 79
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e4       	ldi	r30, 0x4F	; 79
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8e 7f       	andi	r24, 0xFE	; 254
    1676:	8c 93       	st	X, r24
    1678:	ae e4       	ldi	r26, 0x4E	; 78
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e4       	ldi	r30, 0x4E	; 78
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	8c 93       	st	X, r24
    1686:	ae e4       	ldi	r26, 0x4E	; 78
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ee e4       	ldi	r30, 0x4E	; 78
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8f 7e       	andi	r24, 0xEF	; 239
    1692:	8c 93       	st	X, r24
    1694:	af c0       	rjmp	.+350    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_FAST_PWM_10BIT:TCCR1A &=0b11111111;SET_BIT(TCCR1B, TCCR1B_WGM12);CLR_BIT(TCCR1B, TCCR1B_WGM13); break;
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8c 93       	st	X, r24
    16a2:	ae e4       	ldi	r26, 0x4E	; 78
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	88 60       	ori	r24, 0x08	; 8
    16ae:	8c 93       	st	X, r24
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7e       	andi	r24, 0xEF	; 239
    16bc:	8c 93       	st	X, r24
    16be:	9a c0       	rjmp	.+308    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_FREQENCY_CORRECT_TOP_ICR1:TCCR1A &=0b11111100;CLR_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    16c0:	af e4       	ldi	r26, 0x4F	; 79
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ef e4       	ldi	r30, 0x4F	; 79
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8c 7f       	andi	r24, 0xFC	; 252
    16cc:	8c 93       	st	X, r24
    16ce:	ae e4       	ldi	r26, 0x4E	; 78
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ee e4       	ldi	r30, 0x4E	; 78
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	87 7f       	andi	r24, 0xF7	; 247
    16da:	8c 93       	st	X, r24
    16dc:	ae e4       	ldi	r26, 0x4E	; 78
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ee e4       	ldi	r30, 0x4E	; 78
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 61       	ori	r24, 0x10	; 16
    16e8:	8c 93       	st	X, r24
    16ea:	84 c0       	rjmp	.+264    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_FREQENCY_CORRECT_TOP_OCR1A:TCCR1A &=0b11111101;CLR_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8d 7f       	andi	r24, 0xFD	; 253
    16f8:	8c 93       	st	X, r24
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	8c 93       	st	X, r24
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 61       	ori	r24, 0x10	; 16
    1714:	8c 93       	st	X, r24
    1716:	6e c0       	rjmp	.+220    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_CORRECT_TOP_ICR1: TCCR1A &=0b11111110;CLR_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13);break;
    1718:	af e4       	ldi	r26, 0x4F	; 79
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ef e4       	ldi	r30, 0x4F	; 79
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
    1726:	ae e4       	ldi	r26, 0x4E	; 78
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ee e4       	ldi	r30, 0x4E	; 78
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	87 7f       	andi	r24, 0xF7	; 247
    1732:	8c 93       	st	X, r24
    1734:	ae e4       	ldi	r26, 0x4E	; 78
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ee e4       	ldi	r30, 0x4E	; 78
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 61       	ori	r24, 0x10	; 16
    1740:	8c 93       	st	X, r24
    1742:	58 c0       	rjmp	.+176    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_PWM_PHASE_CORRECT_TOP_OCR1A:TCCR1A &=0b11111111;CLR_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8c 93       	st	X, r24
    1750:	ae e4       	ldi	r26, 0x4E	; 78
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ee e4       	ldi	r30, 0x4E	; 78
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	87 7f       	andi	r24, 0xF7	; 247
    175c:	8c 93       	st	X, r24
    175e:	ae e4       	ldi	r26, 0x4E	; 78
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ee e4       	ldi	r30, 0x4E	; 78
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 61       	ori	r24, 0x10	; 16
    176a:	8c 93       	st	X, r24
    176c:	43 c0       	rjmp	.+134    	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_CTC_TOP_ICR1:TCCR1A &=0b11111100;SET_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    176e:	af e4       	ldi	r26, 0x4F	; 79
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ef e4       	ldi	r30, 0x4F	; 79
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8c 7f       	andi	r24, 0xFC	; 252
    177a:	8c 93       	st	X, r24
    177c:	ae e4       	ldi	r26, 0x4E	; 78
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ee e4       	ldi	r30, 0x4E	; 78
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 60       	ori	r24, 0x08	; 8
    1788:	8c 93       	st	X, r24
    178a:	ae e4       	ldi	r26, 0x4E	; 78
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ee e4       	ldi	r30, 0x4E	; 78
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 61       	ori	r24, 0x10	; 16
    1796:	8c 93       	st	X, r24
    1798:	2d c0       	rjmp	.+90     	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_FAST_PWM_TOP_ICR1:TCCR1A &=0b11111110;SET_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    179a:	af e4       	ldi	r26, 0x4F	; 79
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ef e4       	ldi	r30, 0x4F	; 79
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8e 7f       	andi	r24, 0xFE	; 254
    17a6:	8c 93       	st	X, r24
    17a8:	ae e4       	ldi	r26, 0x4E	; 78
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ee e4       	ldi	r30, 0x4E	; 78
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 60       	ori	r24, 0x08	; 8
    17b4:	8c 93       	st	X, r24
    17b6:	ae e4       	ldi	r26, 0x4E	; 78
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ee e4       	ldi	r30, 0x4E	; 78
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 61       	ori	r24, 0x10	; 16
    17c2:	8c 93       	st	X, r24
    17c4:	17 c0       	rjmp	.+46     	; 0x17f4 <TIMER1_u8Init+0x380>
		case T1_FAST_PWM_TOP_OCR1A:TCCR1A &=0b11111111;SET_BIT(TCCR1B, TCCR1B_WGM12);SET_BIT(TCCR1B, TCCR1B_WGM13); break;
    17c6:	af e4       	ldi	r26, 0x4F	; 79
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ef e4       	ldi	r30, 0x4F	; 79
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8c 93       	st	X, r24
    17d2:	ae e4       	ldi	r26, 0x4E	; 78
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ee e4       	ldi	r30, 0x4E	; 78
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 60       	ori	r24, 0x08	; 8
    17de:	8c 93       	st	X, r24
    17e0:	ae e4       	ldi	r26, 0x4E	; 78
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ee e4       	ldi	r30, 0x4E	; 78
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	8c 93       	st	X, r24
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <TIMER1_u8Init+0x380>
		default: Local_u8ErrState = NOK;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Set HW Action On OC1A*/

		switch(Copy_suCfg->OC1A_Opt){
    17f4:	ea 81       	ldd	r30, Y+2	; 0x02
    17f6:	fb 81       	ldd	r31, Y+3	; 0x03
    17f8:	81 81       	ldd	r24, Z+1	; 0x01
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3d 87       	std	Y+13, r19	; 0x0d
    1800:	2c 87       	std	Y+12, r18	; 0x0c
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	9d 85       	ldd	r25, Y+13	; 0x0d
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <TIMER1_u8Init+0x39a>
    180c:	5a c0       	rjmp	.+180    	; 0x18c2 <TIMER1_u8Init+0x44e>
    180e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1810:	3d 85       	ldd	r19, Y+13	; 0x0d
    1812:	24 30       	cpi	r18, 0x04	; 4
    1814:	31 05       	cpc	r19, r1
    1816:	7c f4       	brge	.+30     	; 0x1836 <TIMER1_u8Init+0x3c2>
    1818:	8c 85       	ldd	r24, Y+12	; 0x0c
    181a:	9d 85       	ldd	r25, Y+13	; 0x0d
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	91 f1       	breq	.+100    	; 0x1886 <TIMER1_u8Init+0x412>
    1822:	2c 85       	ldd	r18, Y+12	; 0x0c
    1824:	3d 85       	ldd	r19, Y+13	; 0x0d
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	e4 f5       	brge	.+120    	; 0x18a4 <TIMER1_u8Init+0x430>
    182c:	8c 85       	ldd	r24, Y+12	; 0x0c
    182e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	d1 f0       	breq	.+52     	; 0x1868 <TIMER1_u8Init+0x3f4>
    1834:	91 c0       	rjmp	.+290    	; 0x1958 <TIMER1_u8Init+0x4e4>
    1836:	2c 85       	ldd	r18, Y+12	; 0x0c
    1838:	3d 85       	ldd	r19, Y+13	; 0x0d
    183a:	25 30       	cpi	r18, 0x05	; 5
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <TIMER1_u8Init+0x3ce>
    1840:	5e c0       	rjmp	.+188    	; 0x18fe <TIMER1_u8Init+0x48a>
    1842:	8c 85       	ldd	r24, Y+12	; 0x0c
    1844:	9d 85       	ldd	r25, Y+13	; 0x0d
    1846:	85 30       	cpi	r24, 0x05	; 5
    1848:	91 05       	cpc	r25, r1
    184a:	0c f4       	brge	.+2      	; 0x184e <TIMER1_u8Init+0x3da>
    184c:	49 c0       	rjmp	.+146    	; 0x18e0 <TIMER1_u8Init+0x46c>
    184e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1850:	3d 85       	ldd	r19, Y+13	; 0x0d
    1852:	26 30       	cpi	r18, 0x06	; 6
    1854:	31 05       	cpc	r19, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <TIMER1_u8Init+0x3e6>
    1858:	61 c0       	rjmp	.+194    	; 0x191c <TIMER1_u8Init+0x4a8>
    185a:	8c 85       	ldd	r24, Y+12	; 0x0c
    185c:	9d 85       	ldd	r25, Y+13	; 0x0d
    185e:	87 30       	cpi	r24, 0x07	; 7
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <TIMER1_u8Init+0x3f2>
    1864:	6a c0       	rjmp	.+212    	; 0x193a <TIMER1_u8Init+0x4c6>
    1866:	78 c0       	rjmp	.+240    	; 0x1958 <TIMER1_u8Init+0x4e4>
		case T1_OC1A_DISCONNECT:CLR_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);  break;
    1868:	af e4       	ldi	r26, 0x4F	; 79
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ef e4       	ldi	r30, 0x4F	; 79
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	8f 77       	andi	r24, 0x7F	; 127
    1874:	8c 93       	st	X, r24
    1876:	af e4       	ldi	r26, 0x4F	; 79
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ef e4       	ldi	r30, 0x4F	; 79
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
    1884:	6b c0       	rjmp	.+214    	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_NON_PWM_TOGGEL_ONCOMPARE:CLR_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0);break;
    1886:	af e4       	ldi	r26, 0x4F	; 79
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	ef e4       	ldi	r30, 0x4F	; 79
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 77       	andi	r24, 0x7F	; 127
    1892:	8c 93       	st	X, r24
    1894:	af e4       	ldi	r26, 0x4F	; 79
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ef e4       	ldi	r30, 0x4F	; 79
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 64       	ori	r24, 0x40	; 64
    18a0:	8c 93       	st	X, r24
    18a2:	5c c0       	rjmp	.+184    	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_NON_PWM_CLEAR_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0); break;
    18a4:	af e4       	ldi	r26, 0x4F	; 79
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ef e4       	ldi	r30, 0x4F	; 79
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	8c 93       	st	X, r24
    18b2:	af e4       	ldi	r26, 0x4F	; 79
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ef e4       	ldi	r30, 0x4F	; 79
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7b       	andi	r24, 0xBF	; 191
    18be:	8c 93       	st	X, r24
    18c0:	4d c0       	rjmp	.+154    	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_NON_PWM_SET_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0);break;
    18c2:	af e4       	ldi	r26, 0x4F	; 79
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ef e4       	ldi	r30, 0x4F	; 79
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 68       	ori	r24, 0x80	; 128
    18ce:	8c 93       	st	X, r24
    18d0:	af e4       	ldi	r26, 0x4F	; 79
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef e4       	ldi	r30, 0x4F	; 79
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 64       	ori	r24, 0x40	; 64
    18dc:	8c 93       	st	X, r24
    18de:	3e c0       	rjmp	.+124    	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_FAST_PWM_CLRON_COM_SETON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);break;
    18e0:	af e4       	ldi	r26, 0x4F	; 79
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ef e4       	ldi	r30, 0x4F	; 79
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	8c 93       	st	X, r24
    18ee:	af e4       	ldi	r26, 0x4F	; 79
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e4       	ldi	r30, 0x4F	; 79
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7b       	andi	r24, 0xBF	; 191
    18fa:	8c 93       	st	X, r24
    18fc:	2f c0       	rjmp	.+94     	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0); break;
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	8c 93       	st	X, r24
    190c:	af e4       	ldi	r26, 0x4F	; 79
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ef e4       	ldi	r30, 0x4F	; 79
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 64       	ori	r24, 0x40	; 64
    1918:	8c 93       	st	X, r24
    191a:	20 c0       	rjmp	.+64     	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);break;
    191c:	af e4       	ldi	r26, 0x4F	; 79
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ef e4       	ldi	r30, 0x4F	; 79
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 68       	ori	r24, 0x80	; 128
    1928:	8c 93       	st	X, r24
    192a:	af e4       	ldi	r26, 0x4F	; 79
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7b       	andi	r24, 0xBF	; 191
    1936:	8c 93       	st	X, r24
    1938:	11 c0       	rjmp	.+34     	; 0x195c <TIMER1_u8Init+0x4e8>
		case T1_OC1A_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0); break;
    193a:	af e4       	ldi	r26, 0x4F	; 79
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ef e4       	ldi	r30, 0x4F	; 79
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	8c 93       	st	X, r24
    1948:	af e4       	ldi	r26, 0x4F	; 79
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ef e4       	ldi	r30, 0x4F	; 79
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 64       	ori	r24, 0x40	; 64
    1954:	8c 93       	st	X, r24
    1956:	02 c0       	rjmp	.+4      	; 0x195c <TIMER1_u8Init+0x4e8>
		default: Local_u8ErrState = NOK;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Set HW Action On OC1B*/

		switch(Copy_suCfg->OC1B_Opt){
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3b 87       	std	Y+11, r19	; 0x0b
    1968:	2a 87       	std	Y+10, r18	; 0x0a
    196a:	8a 85       	ldd	r24, Y+10	; 0x0a
    196c:	9b 85       	ldd	r25, Y+11	; 0x0b
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <TIMER1_u8Init+0x502>
    1974:	5a c0       	rjmp	.+180    	; 0x1a2a <TIMER1_u8Init+0x5b6>
    1976:	2a 85       	ldd	r18, Y+10	; 0x0a
    1978:	3b 85       	ldd	r19, Y+11	; 0x0b
    197a:	24 30       	cpi	r18, 0x04	; 4
    197c:	31 05       	cpc	r19, r1
    197e:	7c f4       	brge	.+30     	; 0x199e <TIMER1_u8Init+0x52a>
    1980:	8a 85       	ldd	r24, Y+10	; 0x0a
    1982:	9b 85       	ldd	r25, Y+11	; 0x0b
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	91 f1       	breq	.+100    	; 0x19ee <TIMER1_u8Init+0x57a>
    198a:	2a 85       	ldd	r18, Y+10	; 0x0a
    198c:	3b 85       	ldd	r19, Y+11	; 0x0b
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	e4 f5       	brge	.+120    	; 0x1a0c <TIMER1_u8Init+0x598>
    1994:	8a 85       	ldd	r24, Y+10	; 0x0a
    1996:	9b 85       	ldd	r25, Y+11	; 0x0b
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <TIMER1_u8Init+0x55c>
    199c:	91 c0       	rjmp	.+290    	; 0x1ac0 <TIMER1_u8Init+0x64c>
    199e:	2a 85       	ldd	r18, Y+10	; 0x0a
    19a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    19a2:	25 30       	cpi	r18, 0x05	; 5
    19a4:	31 05       	cpc	r19, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <TIMER1_u8Init+0x536>
    19a8:	5e c0       	rjmp	.+188    	; 0x1a66 <TIMER1_u8Init+0x5f2>
    19aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ae:	85 30       	cpi	r24, 0x05	; 5
    19b0:	91 05       	cpc	r25, r1
    19b2:	0c f4       	brge	.+2      	; 0x19b6 <TIMER1_u8Init+0x542>
    19b4:	49 c0       	rjmp	.+146    	; 0x1a48 <TIMER1_u8Init+0x5d4>
    19b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    19b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    19ba:	26 30       	cpi	r18, 0x06	; 6
    19bc:	31 05       	cpc	r19, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <TIMER1_u8Init+0x54e>
    19c0:	61 c0       	rjmp	.+194    	; 0x1a84 <TIMER1_u8Init+0x610>
    19c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c6:	87 30       	cpi	r24, 0x07	; 7
    19c8:	91 05       	cpc	r25, r1
    19ca:	09 f4       	brne	.+2      	; 0x19ce <TIMER1_u8Init+0x55a>
    19cc:	6a c0       	rjmp	.+212    	; 0x1aa2 <TIMER1_u8Init+0x62e>
    19ce:	78 c0       	rjmp	.+240    	; 0x1ac0 <TIMER1_u8Init+0x64c>
		case T1_OC1B_DISCONNECT:CLR_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0);  break;
    19d0:	af e4       	ldi	r26, 0x4F	; 79
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ef e4       	ldi	r30, 0x4F	; 79
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7d       	andi	r24, 0xDF	; 223
    19dc:	8c 93       	st	X, r24
    19de:	af e4       	ldi	r26, 0x4F	; 79
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ef e4       	ldi	r30, 0x4F	; 79
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7e       	andi	r24, 0xEF	; 239
    19ea:	8c 93       	st	X, r24
    19ec:	6b c0       	rjmp	.+214    	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_NON_PWM_TOGGEL_ONCOMPARE:CLR_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7d       	andi	r24, 0xDF	; 223
    19fa:	8c 93       	st	X, r24
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 61       	ori	r24, 0x10	; 16
    1a08:	8c 93       	st	X, r24
    1a0a:	5c c0       	rjmp	.+184    	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_NON_PWM_CLEAR_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1a0c:	af e4       	ldi	r26, 0x4F	; 79
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ef e4       	ldi	r30, 0x4F	; 79
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 62       	ori	r24, 0x20	; 32
    1a18:	8c 93       	st	X, r24
    1a1a:	af e4       	ldi	r26, 0x4F	; 79
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ef e4       	ldi	r30, 0x4F	; 79
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 7e       	andi	r24, 0xEF	; 239
    1a26:	8c 93       	st	X, r24
    1a28:	4d c0       	rjmp	.+154    	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_NON_PWM_SET_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1a2a:	af e4       	ldi	r26, 0x4F	; 79
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ef e4       	ldi	r30, 0x4F	; 79
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 62       	ori	r24, 0x20	; 32
    1a36:	8c 93       	st	X, r24
    1a38:	af e4       	ldi	r26, 0x4F	; 79
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ef e4       	ldi	r30, 0x4F	; 79
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 61       	ori	r24, 0x10	; 16
    1a44:	8c 93       	st	X, r24
    1a46:	3e c0       	rjmp	.+124    	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_FAST_PWM_CLRON_COM_SETON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1a48:	af e4       	ldi	r26, 0x4F	; 79
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ef e4       	ldi	r30, 0x4F	; 79
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 62       	ori	r24, 0x20	; 32
    1a54:	8c 93       	st	X, r24
    1a56:	af e4       	ldi	r26, 0x4F	; 79
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ef e4       	ldi	r30, 0x4F	; 79
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 7e       	andi	r24, 0xEF	; 239
    1a62:	8c 93       	st	X, r24
    1a64:	2f c0       	rjmp	.+94     	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1a66:	af e4       	ldi	r26, 0x4F	; 79
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ef e4       	ldi	r30, 0x4F	; 79
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 62       	ori	r24, 0x20	; 32
    1a72:	8c 93       	st	X, r24
    1a74:	af e4       	ldi	r26, 0x4F	; 79
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	ef e4       	ldi	r30, 0x4F	; 79
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 61       	ori	r24, 0x10	; 16
    1a80:	8c 93       	st	X, r24
    1a82:	20 c0       	rjmp	.+64     	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1a84:	af e4       	ldi	r26, 0x4F	; 79
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 62       	ori	r24, 0x20	; 32
    1a90:	8c 93       	st	X, r24
    1a92:	af e4       	ldi	r26, 0x4F	; 79
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7e       	andi	r24, 0xEF	; 239
    1a9e:	8c 93       	st	X, r24
    1aa0:	11 c0       	rjmp	.+34     	; 0x1ac4 <TIMER1_u8Init+0x650>
		case T1_OC1B_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1aa2:	af e4       	ldi	r26, 0x4F	; 79
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ef e4       	ldi	r30, 0x4F	; 79
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 62       	ori	r24, 0x20	; 32
    1aae:	8c 93       	st	X, r24
    1ab0:	af e4       	ldi	r26, 0x4F	; 79
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ef e4       	ldi	r30, 0x4F	; 79
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 61       	ori	r24, 0x10	; 16
    1abc:	8c 93       	st	X, r24
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <TIMER1_u8Init+0x650>
		default: Local_u8ErrState = NOK;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 83       	std	Y+1, r24	; 0x01



		/*Set ICU Trigger Option*/

		switch(Copy_suCfg->ICU_Trigger_Opt){
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	39 87       	std	Y+9, r19	; 0x09
    1ad0:	28 87       	std	Y+8, r18	; 0x08
    1ad2:	88 85       	ldd	r24, Y+8	; 0x08
    1ad4:	99 85       	ldd	r25, Y+9	; 0x09
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	89 f0       	breq	.+34     	; 0x1afe <TIMER1_u8Init+0x68a>
    1adc:	28 85       	ldd	r18, Y+8	; 0x08
    1ade:	39 85       	ldd	r19, Y+9	; 0x09
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	b1 f0       	breq	.+44     	; 0x1b12 <TIMER1_u8Init+0x69e>
    1ae6:	88 85       	ldd	r24, Y+8	; 0x08
    1ae8:	99 85       	ldd	r25, Y+9	; 0x09
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	81 f4       	brne	.+32     	; 0x1b0e <TIMER1_u8Init+0x69a>
		case T1_ICU_FALLING_EDGE:CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    1aee:	ae e4       	ldi	r26, 0x4E	; 78
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7b       	andi	r24, 0xBF	; 191
    1afa:	8c 93       	st	X, r24
    1afc:	0a c0       	rjmp	.+20     	; 0x1b12 <TIMER1_u8Init+0x69e>
		case T1_ICU_RISING_EDGE:SET_BIT(TCCR1B,TCCR1B_ICES1);break;
    1afe:	ae e4       	ldi	r26, 0x4E	; 78
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ee e4       	ldi	r30, 0x4E	; 78
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8c 93       	st	X, r24
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <TIMER1_u8Init+0x69e>
		case T1_ICU_NONE: break;
		default:Local_u8ErrState = NOK;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Set ICU Noise Cancel State */

		switch(Copy_suCfg->ICU_Noise_State){
    1b12:	ea 81       	ldd	r30, Y+2	; 0x02
    1b14:	fb 81       	ldd	r31, Y+3	; 0x03
    1b16:	85 81       	ldd	r24, Z+5	; 0x05
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3f 83       	std	Y+7, r19	; 0x07
    1b1e:	2e 83       	std	Y+6, r18	; 0x06
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	9f 81       	ldd	r25, Y+7	; 0x07
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	31 f0       	breq	.+12     	; 0x1b34 <TIMER1_u8Init+0x6c0>
    1b28:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2c:	21 30       	cpi	r18, 0x01	; 1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	49 f0       	breq	.+18     	; 0x1b44 <TIMER1_u8Init+0x6d0>
    1b32:	10 c0       	rjmp	.+32     	; 0x1b54 <TIMER1_u8Init+0x6e0>
		case T1_ICU_ENABLED_NOISE_CANCELER: SET_BIT(TCCR1B,TCCR1B_ICNC1);break;
    1b34:	ae e4       	ldi	r26, 0x4E	; 78
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ee e4       	ldi	r30, 0x4E	; 78
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 68       	ori	r24, 0x80	; 128
    1b40:	8c 93       	st	X, r24
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <TIMER1_u8Init+0x6e4>
		case T1_ICU_DISABLED_NOISE_CANCELER:CLR_BIT(TCCR1B,TCCR1B_ICNC1); break;
    1b44:	ae e4       	ldi	r26, 0x4E	; 78
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ee e4       	ldi	r30, 0x4E	; 78
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	8c 93       	st	X, r24
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <TIMER1_u8Init+0x6e4>
		default: Local_u8ErrState = NOK;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Set Interrupt State */
		switch(Copy_suCfg->INT_State){
    1b58:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b5c:	86 81       	ldd	r24, Z+6	; 0x06
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3d 83       	std	Y+5, r19	; 0x05
    1b64:	2c 83       	std	Y+4, r18	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	79 f1       	breq	.+94     	; 0x1bce <TIMER1_u8Init+0x75a>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	54 f4       	brge	.+20     	; 0x1b8e <TIMER1_u8Init+0x71a>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	b1 f0       	breq	.+44     	; 0x1bae <TIMER1_u8Init+0x73a>
    1b82:	2c 81       	ldd	r18, Y+4	; 0x04
    1b84:	3d 81       	ldd	r19, Y+5	; 0x05
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	c9 f0       	breq	.+50     	; 0x1bbe <TIMER1_u8Init+0x74a>
    1b8c:	5c c0       	rjmp	.+184    	; 0x1c46 <TIMER1_u8Init+0x7d2>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	91 05       	cpc	r25, r1
    1b96:	91 f1       	breq	.+100    	; 0x1bfc <TIMER1_u8Init+0x788>
    1b98:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9c:	24 30       	cpi	r18, 0x04	; 4
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	f4 f0       	brlt	.+60     	; 0x1bde <TIMER1_u8Init+0x76a>
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	85 30       	cpi	r24, 0x05	; 5
    1ba8:	91 05       	cpc	r25, r1
    1baa:	81 f1       	breq	.+96     	; 0x1c0c <TIMER1_u8Init+0x798>
    1bac:	4c c0       	rjmp	.+152    	; 0x1c46 <TIMER1_u8Init+0x7d2>
		case T1_INT_ICU: SET_BIT(TIMSK, TIMSK_TICIE1);break;
    1bae:	a9 e5       	ldi	r26, 0x59	; 89
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e9 e5       	ldi	r30, 0x59	; 89
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 62       	ori	r24, 0x20	; 32
    1bba:	8c 93       	st	X, r24
    1bbc:	49 c0       	rjmp	.+146    	; 0x1c50 <TIMER1_u8Init+0x7dc>
		case T1_INT_COMPARE_OCIE1A:SET_BIT(TIMSK,TIMSK_OCIE1A); break;
    1bbe:	a9 e5       	ldi	r26, 0x59	; 89
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e9 e5       	ldi	r30, 0x59	; 89
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 61       	ori	r24, 0x10	; 16
    1bca:	8c 93       	st	X, r24
    1bcc:	41 c0       	rjmp	.+130    	; 0x1c50 <TIMER1_u8Init+0x7dc>
		case T1_INT_COMPARE_OCIE1B:SET_BIT(TIMSK,TIMSK_OCIE1B); break;
    1bce:	a9 e5       	ldi	r26, 0x59	; 89
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e9 e5       	ldi	r30, 0x59	; 89
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 60       	ori	r24, 0x08	; 8
    1bda:	8c 93       	st	X, r24
    1bdc:	39 c0       	rjmp	.+114    	; 0x1c50 <TIMER1_u8Init+0x7dc>
		case T1_INT_COMPARE_OCIE1A_B:SET_BIT(TIMSK,TIMSK_OCIE1A);SET_BIT(TIMSK,TIMSK_OCIE1B); break;
    1bde:	a9 e5       	ldi	r26, 0x59	; 89
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e9 e5       	ldi	r30, 0x59	; 89
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 61       	ori	r24, 0x10	; 16
    1bea:	8c 93       	st	X, r24
    1bec:	a9 e5       	ldi	r26, 0x59	; 89
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e9 e5       	ldi	r30, 0x59	; 89
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 60       	ori	r24, 0x08	; 8
    1bf8:	8c 93       	st	X, r24
    1bfa:	2a c0       	rjmp	.+84     	; 0x1c50 <TIMER1_u8Init+0x7dc>
		case T1_INT_OVERFLOW:SET_BIT(TIMSK,TIMSK_TOIE1); break;
    1bfc:	a9 e5       	ldi	r26, 0x59	; 89
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e9 e5       	ldi	r30, 0x59	; 89
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	84 60       	ori	r24, 0x04	; 4
    1c08:	8c 93       	st	X, r24
    1c0a:	22 c0       	rjmp	.+68     	; 0x1c50 <TIMER1_u8Init+0x7dc>
		case T1_INT_DISABLED:CLR_BIT(TIMSK, TIMSK_TICIE1);CLR_BIT(TIMSK,TIMSK_OCIE1A);CLR_BIT(TIMSK,TIMSK_OCIE1B);CLR_BIT(TIMSK,TIMSK_TOIE1); break;
    1c0c:	a9 e5       	ldi	r26, 0x59	; 89
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 e5       	ldi	r30, 0x59	; 89
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	8c 93       	st	X, r24
    1c1a:	a9 e5       	ldi	r26, 0x59	; 89
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 e5       	ldi	r30, 0x59	; 89
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	8c 93       	st	X, r24
    1c28:	a9 e5       	ldi	r26, 0x59	; 89
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e9 e5       	ldi	r30, 0x59	; 89
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	87 7f       	andi	r24, 0xF7	; 247
    1c34:	8c 93       	st	X, r24
    1c36:	a9 e5       	ldi	r26, 0x59	; 89
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e9 e5       	ldi	r30, 0x59	; 89
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8b 7f       	andi	r24, 0xFB	; 251
    1c42:	8c 93       	st	X, r24
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <TIMER1_u8Init+0x7dc>
		default: Local_u8ErrState = NOK;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <TIMER1_u8Init+0x7dc>
		}

	}else{
		Local_u8ErrState = NULL_PTR_ERR;
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	89 83       	std	Y+1, r24	; 0x01



	/* Set Prescaler */

	TCCR1B &= MASK_LEAST_3_BIT;
    1c50:	ae e4       	ldi	r26, 0x4E	; 78
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ee e4       	ldi	r30, 0x4E	; 78
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 7f       	andi	r24, 0xF8	; 248
    1c5c:	8c 93       	st	X, r24
	TCCR1B |= (Copy_suCfg->Prescaler);
    1c5e:	ae e4       	ldi	r26, 0x4E	; 78
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	ee e4       	ldi	r30, 0x4E	; 78
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	90 81       	ld	r25, Z
    1c68:	ea 81       	ldd	r30, Y+2	; 0x02
    1c6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6c:	83 81       	ldd	r24, Z+3	; 0x03
    1c6e:	89 2b       	or	r24, r25
    1c70:	8c 93       	st	X, r24


}
    1c72:	60 96       	adiw	r28, 0x10	; 16
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(uint16 Copy_u8TimerVal){
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <TIMER1_voidSetTimerValue+0x6>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =Copy_u8TimerVal;
    1c92:	ec e4       	ldi	r30, 0x4C	; 76
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <TIMER1_voidReadTimerVal>:

uint16 TIMER1_voidReadTimerVal(){
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1cb0:	ec e4       	ldi	r30, 0x4C	; 76
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <TIMER1_voidSetCompareValue>:

uint8 TIMER1_voidSetCompareValue(TIMER1_OUT_PIN Copy_OutPin,uint16 Copy_u16CompareVal){
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <TIMER1_voidSetCompareValue+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <TIMER1_voidSetCompareValue+0x8>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <TIMER1_voidSetCompareValue+0xa>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	7c 83       	std	Y+4, r23	; 0x04
    1cd0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrState = OK;
    1cd2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_OutPin){
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3e 83       	std	Y+6, r19	; 0x06
    1cdc:	2d 83       	std	Y+5, r18	; 0x05
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <TIMER1_voidSetCompareValue+0x34>
    1ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cea:	21 30       	cpi	r18, 0x01	; 1
    1cec:	31 05       	cpc	r19, r1
    1cee:	41 f0       	breq	.+16     	; 0x1d00 <TIMER1_voidSetCompareValue+0x42>
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <TIMER1_voidSetCompareValue+0x50>
	case TIMER1_OC1A:OCR1A = Copy_u16CompareVal; break;
    1cf2:	ea e4       	ldi	r30, 0x4A	; 74
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <TIMER1_voidSetCompareValue+0x54>
	case TIMER1_OC1B: OCR1B = Copy_u16CompareVal; break;
    1d00:	e8 e4       	ldi	r30, 0x48	; 72
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <TIMER1_voidSetCompareValue+0x54>
	default:Local_u8ErrState = NOK;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d14:	26 96       	adiw	r28, 0x06	; 6
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <TIMER1_voidSetTopValue>:

uint8 TIMER1_voidSetTopValue(TIMER1_Top_Opt Copy_u8TopOpt, uint16 Copy_u16TopValue){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <TIMER1_voidSetTopValue+0x6>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <TIMER1_voidSetTopValue+0x8>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <TIMER1_voidSetTopValue+0xa>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	7c 83       	std	Y+4, r23	; 0x04
    1d38:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrState = OK;
    1d3a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8TopOpt){
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3e 83       	std	Y+6, r19	; 0x06
    1d44:	2d 83       	std	Y+5, r18	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	31 f0       	breq	.+12     	; 0x1d5a <TIMER1_voidSetTopValue+0x34>
    1d4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d50:	3e 81       	ldd	r19, Y+6	; 0x06
    1d52:	21 30       	cpi	r18, 0x01	; 1
    1d54:	31 05       	cpc	r19, r1
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <TIMER1_voidSetTopValue+0x42>
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <TIMER1_voidSetTopValue+0x50>
	case T1_OCR1A_TOP:   OCR1A =Copy_u16TopValue; break;
    1d5a:	ea e4       	ldi	r30, 0x4A	; 74
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <TIMER1_voidSetTopValue+0x54>
	case T1_ICR1_TOP: ICR1=Copy_u16TopValue; break;
    1d68:	e6 e4       	ldi	r30, 0x46	; 70
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <TIMER1_voidSetTopValue+0x54>
	default: Local_u8ErrState = NOK;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7c:	26 96       	adiw	r28, 0x06	; 6
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <TIMER1_voidSetPrescaler>:

void TIMER1_voidSetPrescaler(TIMER_Prescaler_t  Copy_PrescalerVal){
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= MASK_LEAST_3_BIT;
    1d9a:	ae e4       	ldi	r26, 0x4E	; 78
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ee e4       	ldi	r30, 0x4E	; 78
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	88 7f       	andi	r24, 0xF8	; 248
    1da6:	8c 93       	st	X, r24
	TCCR1B |= Copy_PrescalerVal;
    1da8:	ae e4       	ldi	r26, 0x4E	; 78
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ee e4       	ldi	r30, 0x4E	; 78
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	90 81       	ld	r25, Z
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	89 2b       	or	r24, r25
    1db6:	8c 93       	st	X, r24
}
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <TIMER1_u8Set_OC1A_OutPinState>:


uint8 TIMER1_u8Set_OC1A_OutPinState(TIMER1_OC1A_OutPin_State Copy_u8OC1A_Opt){
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <TIMER1_u8Set_OC1A_OutPinState+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <TIMER1_u8Set_OC1A_OutPinState+0x8>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrState = OK;
    1dce:	19 82       	std	Y+1, r1	; 0x01

	/*Set HW Action On OC1A*/

	switch(Copy_u8OC1A_Opt){
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3c 83       	std	Y+4, r19	; 0x04
    1dd8:	2b 83       	std	Y+3, r18	; 0x03
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	91 05       	cpc	r25, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <TIMER1_u8Set_OC1A_OutPinState+0x26>
    1de4:	5a c0       	rjmp	.+180    	; 0x1e9a <TIMER1_u8Set_OC1A_OutPinState+0xda>
    1de6:	2b 81       	ldd	r18, Y+3	; 0x03
    1de8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dea:	24 30       	cpi	r18, 0x04	; 4
    1dec:	31 05       	cpc	r19, r1
    1dee:	7c f4       	brge	.+30     	; 0x1e0e <TIMER1_u8Set_OC1A_OutPinState+0x4e>
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	91 f1       	breq	.+100    	; 0x1e5e <TIMER1_u8Set_OC1A_OutPinState+0x9e>
    1dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	e4 f5       	brge	.+120    	; 0x1e7c <TIMER1_u8Set_OC1A_OutPinState+0xbc>
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	d1 f0       	breq	.+52     	; 0x1e40 <TIMER1_u8Set_OC1A_OutPinState+0x80>
    1e0c:	91 c0       	rjmp	.+290    	; 0x1f30 <TIMER1_u8Set_OC1A_OutPinState+0x170>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	25 30       	cpi	r18, 0x05	; 5
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <TIMER1_u8Set_OC1A_OutPinState+0x5a>
    1e18:	5e c0       	rjmp	.+188    	; 0x1ed6 <TIMER1_u8Set_OC1A_OutPinState+0x116>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	85 30       	cpi	r24, 0x05	; 5
    1e20:	91 05       	cpc	r25, r1
    1e22:	0c f4       	brge	.+2      	; 0x1e26 <TIMER1_u8Set_OC1A_OutPinState+0x66>
    1e24:	49 c0       	rjmp	.+146    	; 0x1eb8 <TIMER1_u8Set_OC1A_OutPinState+0xf8>
    1e26:	2b 81       	ldd	r18, Y+3	; 0x03
    1e28:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2a:	26 30       	cpi	r18, 0x06	; 6
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <TIMER1_u8Set_OC1A_OutPinState+0x72>
    1e30:	61 c0       	rjmp	.+194    	; 0x1ef4 <TIMER1_u8Set_OC1A_OutPinState+0x134>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	87 30       	cpi	r24, 0x07	; 7
    1e38:	91 05       	cpc	r25, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <TIMER1_u8Set_OC1A_OutPinState+0x7e>
    1e3c:	6a c0       	rjmp	.+212    	; 0x1f12 <TIMER1_u8Set_OC1A_OutPinState+0x152>
    1e3e:	78 c0       	rjmp	.+240    	; 0x1f30 <TIMER1_u8Set_OC1A_OutPinState+0x170>
	case T1_OC1A_DISCONNECT:CLR_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);  break;
    1e40:	af e4       	ldi	r26, 0x4F	; 79
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	ef e4       	ldi	r30, 0x4F	; 79
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 77       	andi	r24, 0x7F	; 127
    1e4c:	8c 93       	st	X, r24
    1e4e:	af e4       	ldi	r26, 0x4F	; 79
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ef e4       	ldi	r30, 0x4F	; 79
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8f 7b       	andi	r24, 0xBF	; 191
    1e5a:	8c 93       	st	X, r24
    1e5c:	6b c0       	rjmp	.+214    	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_NON_PWM_TOGGEL_ONCOMPARE:CLR_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0);break;
    1e5e:	af e4       	ldi	r26, 0x4F	; 79
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	ef e4       	ldi	r30, 0x4F	; 79
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	8f 77       	andi	r24, 0x7F	; 127
    1e6a:	8c 93       	st	X, r24
    1e6c:	af e4       	ldi	r26, 0x4F	; 79
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ef e4       	ldi	r30, 0x4F	; 79
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	80 64       	ori	r24, 0x40	; 64
    1e78:	8c 93       	st	X, r24
    1e7a:	5c c0       	rjmp	.+184    	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_NON_PWM_CLEAR_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0); break;
    1e7c:	af e4       	ldi	r26, 0x4F	; 79
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ef e4       	ldi	r30, 0x4F	; 79
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	80 68       	ori	r24, 0x80	; 128
    1e88:	8c 93       	st	X, r24
    1e8a:	af e4       	ldi	r26, 0x4F	; 79
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ef e4       	ldi	r30, 0x4F	; 79
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8f 7b       	andi	r24, 0xBF	; 191
    1e96:	8c 93       	st	X, r24
    1e98:	4d c0       	rjmp	.+154    	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_NON_PWM_SET_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0);break;
    1e9a:	af e4       	ldi	r26, 0x4F	; 79
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ef e4       	ldi	r30, 0x4F	; 79
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 68       	ori	r24, 0x80	; 128
    1ea6:	8c 93       	st	X, r24
    1ea8:	af e4       	ldi	r26, 0x4F	; 79
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ef e4       	ldi	r30, 0x4F	; 79
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 64       	ori	r24, 0x40	; 64
    1eb4:	8c 93       	st	X, r24
    1eb6:	3e c0       	rjmp	.+124    	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_FAST_PWM_CLRON_COM_SETON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);break;
    1eb8:	af e4       	ldi	r26, 0x4F	; 79
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ef e4       	ldi	r30, 0x4F	; 79
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 68       	ori	r24, 0x80	; 128
    1ec4:	8c 93       	st	X, r24
    1ec6:	af e4       	ldi	r26, 0x4F	; 79
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ef e4       	ldi	r30, 0x4F	; 79
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	8f 7b       	andi	r24, 0xBF	; 191
    1ed2:	8c 93       	st	X, r24
    1ed4:	2f c0       	rjmp	.+94     	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0); break;
    1ed6:	af e4       	ldi	r26, 0x4F	; 79
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	ef e4       	ldi	r30, 0x4F	; 79
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 68       	ori	r24, 0x80	; 128
    1ee2:	8c 93       	st	X, r24
    1ee4:	af e4       	ldi	r26, 0x4F	; 79
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	ef e4       	ldi	r30, 0x4F	; 79
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 64       	ori	r24, 0x40	; 64
    1ef0:	8c 93       	st	X, r24
    1ef2:	20 c0       	rjmp	.+64     	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1A1);CLR_BIT(TCCR1A, TCCR1A_COM1A0);break;
    1ef4:	af e4       	ldi	r26, 0x4F	; 79
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ef e4       	ldi	r30, 0x4F	; 79
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	8c 93       	st	X, r24
    1f02:	af e4       	ldi	r26, 0x4F	; 79
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ef e4       	ldi	r30, 0x4F	; 79
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8f 7b       	andi	r24, 0xBF	; 191
    1f0e:	8c 93       	st	X, r24
    1f10:	11 c0       	rjmp	.+34     	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	case T1_OC1A_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1A1);SET_BIT(TCCR1A, TCCR1A_COM1A0); break;
    1f12:	af e4       	ldi	r26, 0x4F	; 79
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ef e4       	ldi	r30, 0x4F	; 79
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	8c 93       	st	X, r24
    1f20:	af e4       	ldi	r26, 0x4F	; 79
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ef e4       	ldi	r30, 0x4F	; 79
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 64       	ori	r24, 0x40	; 64
    1f2c:	8c 93       	st	X, r24
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <TIMER1_u8Set_OC1A_OutPinState+0x174>
	default: Local_u8ErrState = NOK;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrState;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <TIMER1_u8Set_OC1B_OutPinState>:
uint8 TIMER1_u8Set_OC1B_OutPinState(TIMER1_OC1B_OutPin_State Copy_u8OC1B_Opt){
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <TIMER1_u8Set_OC1B_OutPinState+0x6>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <TIMER1_u8Set_OC1B_OutPinState+0x8>
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrState = OK;
    1f52:	19 82       	std	Y+1, r1	; 0x01


	/*Set HW Action On OC1B*/

	switch(Copy_u8OC1B_Opt){
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3c 83       	std	Y+4, r19	; 0x04
    1f5c:	2b 83       	std	Y+3, r18	; 0x03
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <TIMER1_u8Set_OC1B_OutPinState+0x26>
    1f68:	5a c0       	rjmp	.+180    	; 0x201e <TIMER1_u8Set_OC1B_OutPinState+0xda>
    1f6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6e:	24 30       	cpi	r18, 0x04	; 4
    1f70:	31 05       	cpc	r19, r1
    1f72:	7c f4       	brge	.+30     	; 0x1f92 <TIMER1_u8Set_OC1B_OutPinState+0x4e>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	91 f1       	breq	.+100    	; 0x1fe2 <TIMER1_u8Set_OC1B_OutPinState+0x9e>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	e4 f5       	brge	.+120    	; 0x2000 <TIMER1_u8Set_OC1B_OutPinState+0xbc>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	d1 f0       	breq	.+52     	; 0x1fc4 <TIMER1_u8Set_OC1B_OutPinState+0x80>
    1f90:	91 c0       	rjmp	.+290    	; 0x20b4 <TIMER1_u8Set_OC1B_OutPinState+0x170>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	25 30       	cpi	r18, 0x05	; 5
    1f98:	31 05       	cpc	r19, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <TIMER1_u8Set_OC1B_OutPinState+0x5a>
    1f9c:	5e c0       	rjmp	.+188    	; 0x205a <TIMER1_u8Set_OC1B_OutPinState+0x116>
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	85 30       	cpi	r24, 0x05	; 5
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	0c f4       	brge	.+2      	; 0x1faa <TIMER1_u8Set_OC1B_OutPinState+0x66>
    1fa8:	49 c0       	rjmp	.+146    	; 0x203c <TIMER1_u8Set_OC1B_OutPinState+0xf8>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	26 30       	cpi	r18, 0x06	; 6
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <TIMER1_u8Set_OC1B_OutPinState+0x72>
    1fb4:	61 c0       	rjmp	.+194    	; 0x2078 <TIMER1_u8Set_OC1B_OutPinState+0x134>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	87 30       	cpi	r24, 0x07	; 7
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <TIMER1_u8Set_OC1B_OutPinState+0x7e>
    1fc0:	6a c0       	rjmp	.+212    	; 0x2096 <TIMER1_u8Set_OC1B_OutPinState+0x152>
    1fc2:	78 c0       	rjmp	.+240    	; 0x20b4 <TIMER1_u8Set_OC1B_OutPinState+0x170>
	case T1_OC1B_DISCONNECT:CLR_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0);  break;
    1fc4:	af e4       	ldi	r26, 0x4F	; 79
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	ef e4       	ldi	r30, 0x4F	; 79
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 7d       	andi	r24, 0xDF	; 223
    1fd0:	8c 93       	st	X, r24
    1fd2:	af e4       	ldi	r26, 0x4F	; 79
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ef e4       	ldi	r30, 0x4F	; 79
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 7e       	andi	r24, 0xEF	; 239
    1fde:	8c 93       	st	X, r24
    1fe0:	6b c0       	rjmp	.+214    	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_NON_PWM_TOGGEL_ONCOMPARE:CLR_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    1fe2:	af e4       	ldi	r26, 0x4F	; 79
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ef e4       	ldi	r30, 0x4F	; 79
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7d       	andi	r24, 0xDF	; 223
    1fee:	8c 93       	st	X, r24
    1ff0:	af e4       	ldi	r26, 0x4F	; 79
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ef e4       	ldi	r30, 0x4F	; 79
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 61       	ori	r24, 0x10	; 16
    1ffc:	8c 93       	st	X, r24
    1ffe:	5c c0       	rjmp	.+184    	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_NON_PWM_CLEAR_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    2000:	af e4       	ldi	r26, 0x4F	; 79
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ef e4       	ldi	r30, 0x4F	; 79
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 62       	ori	r24, 0x20	; 32
    200c:	8c 93       	st	X, r24
    200e:	af e4       	ldi	r26, 0x4F	; 79
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ef e4       	ldi	r30, 0x4F	; 79
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8f 7e       	andi	r24, 0xEF	; 239
    201a:	8c 93       	st	X, r24
    201c:	4d c0       	rjmp	.+154    	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_NON_PWM_SET_ONCOMPARE:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    201e:	af e4       	ldi	r26, 0x4F	; 79
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ef e4       	ldi	r30, 0x4F	; 79
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 62       	ori	r24, 0x20	; 32
    202a:	8c 93       	st	X, r24
    202c:	af e4       	ldi	r26, 0x4F	; 79
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ef e4       	ldi	r30, 0x4F	; 79
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 61       	ori	r24, 0x10	; 16
    2038:	8c 93       	st	X, r24
    203a:	3e c0       	rjmp	.+124    	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_FAST_PWM_CLRON_COM_SETON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    203c:	af e4       	ldi	r26, 0x4F	; 79
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ef e4       	ldi	r30, 0x4F	; 79
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 62       	ori	r24, 0x20	; 32
    2048:	8c 93       	st	X, r24
    204a:	af e4       	ldi	r26, 0x4F	; 79
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	ef e4       	ldi	r30, 0x4F	; 79
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 7e       	andi	r24, 0xEF	; 239
    2056:	8c 93       	st	X, r24
    2058:	2f c0       	rjmp	.+94     	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_FAST_PWM_SETON_COM_CLRON_TOP:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    205a:	af e4       	ldi	r26, 0x4F	; 79
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	ef e4       	ldi	r30, 0x4F	; 79
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 62       	ori	r24, 0x20	; 32
    2066:	8c 93       	st	X, r24
    2068:	af e4       	ldi	r26, 0x4F	; 79
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ef e4       	ldi	r30, 0x4F	; 79
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 61       	ori	r24, 0x10	; 16
    2074:	8c 93       	st	X, r24
    2076:	20 c0       	rjmp	.+64     	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_PHASE_CORRECT_PWM_CLRON_UPCOUNTCOM_SETON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1B1);CLR_BIT(TCCR1A, TCCR1A_COM1B0); break;
    2078:	af e4       	ldi	r26, 0x4F	; 79
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	ef e4       	ldi	r30, 0x4F	; 79
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	80 62       	ori	r24, 0x20	; 32
    2084:	8c 93       	st	X, r24
    2086:	af e4       	ldi	r26, 0x4F	; 79
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	ef e4       	ldi	r30, 0x4F	; 79
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 7e       	andi	r24, 0xEF	; 239
    2092:	8c 93       	st	X, r24
    2094:	11 c0       	rjmp	.+34     	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	case T1_OC1B_PHASE_CORRECT_PWM_SETON_UPCOUNTCOM_CLRON_DOWNCOUNTCOM:SET_BIT(TCCR1A, TCCR1A_COM1B1);SET_BIT(TCCR1A, TCCR1A_COM1B0); break;
    2096:	af e4       	ldi	r26, 0x4F	; 79
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	ef e4       	ldi	r30, 0x4F	; 79
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 62       	ori	r24, 0x20	; 32
    20a2:	8c 93       	st	X, r24
    20a4:	af e4       	ldi	r26, 0x4F	; 79
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ef e4       	ldi	r30, 0x4F	; 79
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 61       	ori	r24, 0x10	; 16
    20b0:	8c 93       	st	X, r24
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <TIMER1_u8Set_OC1B_OutPinState+0x174>
	default: Local_u8ErrState = NOK;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <TIMER1_u8Set_ICU_Edge_Trigger>:


uint8 TIMER1_u8Set_ICU_Edge_Trigger(TIMER1_ICU_Edge_Opt  Copy_u8ICU_Trigger_Opt){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <TIMER1_u8Set_ICU_Edge_Trigger+0x6>
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <TIMER1_u8Set_ICU_Edge_Trigger+0x8>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8ErrState = OK;
    20d6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ICU_Trigger_Opt){
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	3c 83       	std	Y+4, r19	; 0x04
    20e0:	2b 83       	std	Y+3, r18	; 0x03
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	89 f0       	breq	.+34     	; 0x210e <TIMER1_u8Set_ICU_Edge_Trigger+0x46>
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	b1 f0       	breq	.+44     	; 0x2122 <TIMER1_u8Set_ICU_Edge_Trigger+0x5a>
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	81 f4       	brne	.+32     	; 0x211e <TIMER1_u8Set_ICU_Edge_Trigger+0x56>
	case T1_ICU_FALLING_EDGE:CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    20fe:	ae e4       	ldi	r26, 0x4E	; 78
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ee e4       	ldi	r30, 0x4E	; 78
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7b       	andi	r24, 0xBF	; 191
    210a:	8c 93       	st	X, r24
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <TIMER1_u8Set_ICU_Edge_Trigger+0x5a>
	case T1_ICU_RISING_EDGE:SET_BIT(TCCR1B,TCCR1B_ICES1);break;
    210e:	ae e4       	ldi	r26, 0x4E	; 78
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ee e4       	ldi	r30, 0x4E	; 78
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 64       	ori	r24, 0x40	; 64
    211a:	8c 93       	st	X, r24
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <TIMER1_u8Set_ICU_Edge_Trigger+0x5a>
	case T1_ICU_NONE: break;
	default:Local_u8ErrState = NOK;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrState;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <__vector_11>:
/* Timer 0  Overflow ISR */

__attribute__((signal))  void __vector_11(void);

void __vector_11(void){
    2132:	1f 92       	push	r1
    2134:	0f 92       	push	r0
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	0f 92       	push	r0
    213a:	11 24       	eor	r1, r1
    213c:	2f 93       	push	r18
    213e:	3f 93       	push	r19
    2140:	4f 93       	push	r20
    2142:	5f 93       	push	r21
    2144:	6f 93       	push	r22
    2146:	7f 93       	push	r23
    2148:	8f 93       	push	r24
    214a:	9f 93       	push	r25
    214c:	af 93       	push	r26
    214e:	bf 93       	push	r27
    2150:	ef 93       	push	r30
    2152:	ff 93       	push	r31
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62

	if(GlobalCallBackFucn[TIMER0_OV_INT] != NULL){
    215c:	80 91 80 00 	lds	r24, 0x0080
    2160:	90 91 81 00 	lds	r25, 0x0081
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	29 f0       	breq	.+10     	; 0x2172 <__vector_11+0x40>
		GlobalCallBackFucn[TIMER0_OV_INT]();
    2168:	e0 91 80 00 	lds	r30, 0x0080
    216c:	f0 91 81 00 	lds	r31, 0x0081
    2170:	09 95       	icall
	}

}
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	ff 91       	pop	r31
    2178:	ef 91       	pop	r30
    217a:	bf 91       	pop	r27
    217c:	af 91       	pop	r26
    217e:	9f 91       	pop	r25
    2180:	8f 91       	pop	r24
    2182:	7f 91       	pop	r23
    2184:	6f 91       	pop	r22
    2186:	5f 91       	pop	r21
    2188:	4f 91       	pop	r20
    218a:	3f 91       	pop	r19
    218c:	2f 91       	pop	r18
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <__vector_10>:

/* Timer 0  Out Compare match ISR */

__attribute__((signal))  void __vector_10(void);

void __vector_10(void){
    2198:	1f 92       	push	r1
    219a:	0f 92       	push	r0
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	0f 92       	push	r0
    21a0:	11 24       	eor	r1, r1
    21a2:	2f 93       	push	r18
    21a4:	3f 93       	push	r19
    21a6:	4f 93       	push	r20
    21a8:	5f 93       	push	r21
    21aa:	6f 93       	push	r22
    21ac:	7f 93       	push	r23
    21ae:	8f 93       	push	r24
    21b0:	9f 93       	push	r25
    21b2:	af 93       	push	r26
    21b4:	bf 93       	push	r27
    21b6:	ef 93       	push	r30
    21b8:	ff 93       	push	r31
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62

	if(GlobalCallBackFucn[TIMER0_OC_INT] != NULL){
    21c2:	80 91 82 00 	lds	r24, 0x0082
    21c6:	90 91 83 00 	lds	r25, 0x0083
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	29 f0       	breq	.+10     	; 0x21d8 <__vector_10+0x40>
		GlobalCallBackFucn[TIMER0_OC_INT]();
    21ce:	e0 91 82 00 	lds	r30, 0x0082
    21d2:	f0 91 83 00 	lds	r31, 0x0083
    21d6:	09 95       	icall
	}

}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	ff 91       	pop	r31
    21de:	ef 91       	pop	r30
    21e0:	bf 91       	pop	r27
    21e2:	af 91       	pop	r26
    21e4:	9f 91       	pop	r25
    21e6:	8f 91       	pop	r24
    21e8:	7f 91       	pop	r23
    21ea:	6f 91       	pop	r22
    21ec:	5f 91       	pop	r21
    21ee:	4f 91       	pop	r20
    21f0:	3f 91       	pop	r19
    21f2:	2f 91       	pop	r18
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	0f 90       	pop	r0
    21fa:	1f 90       	pop	r1
    21fc:	18 95       	reti

000021fe <__vector_9>:


/*TIMER1 OVF*/
__attribute__((signal)) void __vector_9(void);
void __vector_9(void){
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	0f 92       	push	r0
    2206:	11 24       	eor	r1, r1
    2208:	2f 93       	push	r18
    220a:	3f 93       	push	r19
    220c:	4f 93       	push	r20
    220e:	5f 93       	push	r21
    2210:	6f 93       	push	r22
    2212:	7f 93       	push	r23
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	af 93       	push	r26
    221a:	bf 93       	push	r27
    221c:	ef 93       	push	r30
    221e:	ff 93       	push	r31
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62

	if(GlobalCallBackFucn[TIMER1_OV_INT] != NULL){
    2228:	80 91 84 00 	lds	r24, 0x0084
    222c:	90 91 85 00 	lds	r25, 0x0085
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	29 f0       	breq	.+10     	; 0x223e <__vector_9+0x40>
		GlobalCallBackFucn[TIMER1_OV_INT]();
    2234:	e0 91 84 00 	lds	r30, 0x0084
    2238:	f0 91 85 00 	lds	r31, 0x0085
    223c:	09 95       	icall
	}
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	bf 91       	pop	r27
    2248:	af 91       	pop	r26
    224a:	9f 91       	pop	r25
    224c:	8f 91       	pop	r24
    224e:	7f 91       	pop	r23
    2250:	6f 91       	pop	r22
    2252:	5f 91       	pop	r21
    2254:	4f 91       	pop	r20
    2256:	3f 91       	pop	r19
    2258:	2f 91       	pop	r18
    225a:	0f 90       	pop	r0
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	0f 90       	pop	r0
    2260:	1f 90       	pop	r1
    2262:	18 95       	reti

00002264 <__vector_8>:
/*TIMER1 COMPB*/
__attribute__((signal)) void __vector_8(void);
void __vector_8(void){
    2264:	1f 92       	push	r1
    2266:	0f 92       	push	r0
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	0f 92       	push	r0
    226c:	11 24       	eor	r1, r1
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62

	if(GlobalCallBackFucn[TIMER1_OC1B_INT] != NULL){
    228e:	80 91 88 00 	lds	r24, 0x0088
    2292:	90 91 89 00 	lds	r25, 0x0089
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	29 f0       	breq	.+10     	; 0x22a4 <__vector_8+0x40>
		GlobalCallBackFucn[TIMER1_OC1B_INT]();
    229a:	e0 91 88 00 	lds	r30, 0x0088
    229e:	f0 91 89 00 	lds	r31, 0x0089
    22a2:	09 95       	icall
	}
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	ff 91       	pop	r31
    22aa:	ef 91       	pop	r30
    22ac:	bf 91       	pop	r27
    22ae:	af 91       	pop	r26
    22b0:	9f 91       	pop	r25
    22b2:	8f 91       	pop	r24
    22b4:	7f 91       	pop	r23
    22b6:	6f 91       	pop	r22
    22b8:	5f 91       	pop	r21
    22ba:	4f 91       	pop	r20
    22bc:	3f 91       	pop	r19
    22be:	2f 91       	pop	r18
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	0f 90       	pop	r0
    22c6:	1f 90       	pop	r1
    22c8:	18 95       	reti

000022ca <__vector_7>:

/*TIMER1 COMPA*/
__attribute__((signal)) void __vector_7(void);
void __vector_7(void){
    22ca:	1f 92       	push	r1
    22cc:	0f 92       	push	r0
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	0f 92       	push	r0
    22d2:	11 24       	eor	r1, r1
    22d4:	2f 93       	push	r18
    22d6:	3f 93       	push	r19
    22d8:	4f 93       	push	r20
    22da:	5f 93       	push	r21
    22dc:	6f 93       	push	r22
    22de:	7f 93       	push	r23
    22e0:	8f 93       	push	r24
    22e2:	9f 93       	push	r25
    22e4:	af 93       	push	r26
    22e6:	bf 93       	push	r27
    22e8:	ef 93       	push	r30
    22ea:	ff 93       	push	r31
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCallBackFucn[TIMER1_OC1A_INT] != NULL){
    22f4:	80 91 86 00 	lds	r24, 0x0086
    22f8:	90 91 87 00 	lds	r25, 0x0087
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	29 f0       	breq	.+10     	; 0x230a <__vector_7+0x40>
		GlobalCallBackFucn[TIMER1_OC1A_INT]();
    2300:	e0 91 86 00 	lds	r30, 0x0086
    2304:	f0 91 87 00 	lds	r31, 0x0087
    2308:	09 95       	icall
	}
}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	ff 91       	pop	r31
    2310:	ef 91       	pop	r30
    2312:	bf 91       	pop	r27
    2314:	af 91       	pop	r26
    2316:	9f 91       	pop	r25
    2318:	8f 91       	pop	r24
    231a:	7f 91       	pop	r23
    231c:	6f 91       	pop	r22
    231e:	5f 91       	pop	r21
    2320:	4f 91       	pop	r20
    2322:	3f 91       	pop	r19
    2324:	2f 91       	pop	r18
    2326:	0f 90       	pop	r0
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	0f 90       	pop	r0
    232c:	1f 90       	pop	r1
    232e:	18 95       	reti

00002330 <__vector_6>:


/*TIMER1 ICU Int  CAPT*/
__attribute__((signal)) void __vector_6(void);
void __vector_6(void){
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	0f 92       	push	r0
    2338:	11 24       	eor	r1, r1
    233a:	2f 93       	push	r18
    233c:	3f 93       	push	r19
    233e:	4f 93       	push	r20
    2340:	5f 93       	push	r21
    2342:	6f 93       	push	r22
    2344:	7f 93       	push	r23
    2346:	8f 93       	push	r24
    2348:	9f 93       	push	r25
    234a:	af 93       	push	r26
    234c:	bf 93       	push	r27
    234e:	ef 93       	push	r30
    2350:	ff 93       	push	r31
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCallBackFucn[TIMER1_ICU_INT] != NULL){
    235a:	80 91 8a 00 	lds	r24, 0x008A
    235e:	90 91 8b 00 	lds	r25, 0x008B
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	29 f0       	breq	.+10     	; 0x2370 <__vector_6+0x40>
		GlobalCallBackFucn[TIMER1_ICU_INT]();
    2366:	e0 91 8a 00 	lds	r30, 0x008A
    236a:	f0 91 8b 00 	lds	r31, 0x008B
    236e:	09 95       	icall
	}
}
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	ff 91       	pop	r31
    2376:	ef 91       	pop	r30
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	0f 90       	pop	r0
    2392:	1f 90       	pop	r1
    2394:	18 95       	reti

00002396 <main>:
		.SWITCH_u8Pin = DIO_u8PIN2
};

static uint8 BtnState = SW_RELEASES;

void main(void){
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <main+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <main+0x8>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_cfg_t  Local_sTimer0_Cfg = { .WFG_Mode = T0_COMPARE_MATCH,
			.Prescaler = TIMER_PRESCALER_DIVISION_1024,
			.Out_HW_Opt = T0_OC0_DISCONNECT,
			.INT_State =  T0_INT_COMPARE,
	};
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	85 e0       	ldi	r24, 0x05	; 5
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	1b 82       	std	Y+3, r1	; 0x03
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	8c 83       	std	Y+4, r24	; 0x04


	PORT_voidInit();
    23b0:	0e 94 32 07 	call	0xe64	; 0xe64 <PORT_voidInit>
	TIMER0_u8Init(&Local_sTimer0_Cfg);
    23b4:	ce 01       	movw	r24, r28
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TIMER0_u8Init>
	TIMER0_voidSetCompareValue(210);
    23bc:	82 ed       	ldi	r24, 0xD2	; 210
    23be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <TIMER0_voidSetCompareValue>
	TIMER_u8SetCallBackFunc(TIMER0_OC_INT,Timer0_Traffic);
    23c2:	21 ef       	ldi	r18, 0xF1	; 241
    23c4:	31 e1       	ldi	r19, 0x11	; 17
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	b9 01       	movw	r22, r18
    23ca:	0e 94 1e 09 	call	0x123c	; 0x123c <TIMER_u8SetCallBackFunc>
	GIE_voidEnableGlobal();
    23ce:	0e 94 90 06 	call	0xd20	; 0xd20 <GIE_voidEnableGlobal>

	while(1){


		SWITCH_u8GetState(&Local_sBtn,&BtnState);
    23d2:	82 e7       	ldi	r24, 0x72	; 114
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	25 e7       	ldi	r18, 0x75	; 117
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	b9 01       	movw	r22, r18
    23dc:	0e 94 56 07 	call	0xeac	; 0xeac <SWITCH_u8GetState>
    23e0:	f8 cf       	rjmp	.-16     	; 0x23d2 <main+0x3c>

000023e2 <Timer0_Traffic>:

}



void Timer0_Traffic(void){
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	volatile static uint16 Ccomp = 371;
	volatile static uint32 Ccomp2 = 0;
	static uint8 BtnFlag = NORMAL_MODE;
	volatile static uint8 CarLedFlag = RED_LED;

	Ccomp++;
    23ea:	80 91 77 00 	lds	r24, 0x0077
    23ee:	90 91 78 00 	lds	r25, 0x0078
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	90 93 78 00 	sts	0x0078, r25
    23f8:	80 93 77 00 	sts	0x0077, r24
	Ccomp2++;
    23fc:	80 91 93 00 	lds	r24, 0x0093
    2400:	90 91 94 00 	lds	r25, 0x0094
    2404:	a0 91 95 00 	lds	r26, 0x0095
    2408:	b0 91 96 00 	lds	r27, 0x0096
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	a1 1d       	adc	r26, r1
    2410:	b1 1d       	adc	r27, r1
    2412:	80 93 93 00 	sts	0x0093, r24
    2416:	90 93 94 00 	sts	0x0094, r25
    241a:	a0 93 95 00 	sts	0x0095, r26
    241e:	b0 93 96 00 	sts	0x0096, r27



	if(BtnState == SW_PRESSED){
    2422:	80 91 75 00 	lds	r24, 0x0075
    2426:	88 23       	and	r24, r24
    2428:	51 f4       	brne	.+20     	; 0x243e <Timer0_Traffic+0x5c>
		BtnFlag = PRESSED_MODE;
    242a:	10 92 76 00 	sts	0x0076, r1
		Ccomp2 = 0;
    242e:	10 92 93 00 	sts	0x0093, r1
    2432:	10 92 94 00 	sts	0x0094, r1
    2436:	10 92 95 00 	sts	0x0095, r1
    243a:	10 92 96 00 	sts	0x0096, r1
	}


	if(BtnFlag == PRESSED_MODE){
    243e:	80 91 76 00 	lds	r24, 0x0076
    2442:	88 23       	and	r24, r24
    2444:	09 f0       	breq	.+2      	; 0x2448 <Timer0_Traffic+0x66>
    2446:	f4 c0       	rjmp	.+488    	; 0x2630 <Timer0_Traffic+0x24e>

		if(CarLedFlag == RED_LED){
    2448:	80 91 92 00 	lds	r24, 0x0092
    244c:	88 23       	and	r24, r24
    244e:	59 f5       	brne	.+86     	; 0x24a6 <Timer0_Traffic+0xc4>

			LED_u8SetOn(&Local_u8RedLed);
    2450:	80 e6       	ldi	r24, 0x60	; 96
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			LED_u8SetOn(&Local_s8PedGreenLed);
    2458:	8c e6       	ldi	r24, 0x6C	; 108
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>

			if(Ccomp2 == 372){  /* After 5 Second */
    2460:	80 91 93 00 	lds	r24, 0x0093
    2464:	90 91 94 00 	lds	r25, 0x0094
    2468:	a0 91 95 00 	lds	r26, 0x0095
    246c:	b0 91 96 00 	lds	r27, 0x0096
    2470:	84 37       	cpi	r24, 0x74	; 116
    2472:	21 e0       	ldi	r18, 0x01	; 1
    2474:	92 07       	cpc	r25, r18
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	a2 07       	cpc	r26, r18
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	b2 07       	cpc	r27, r18
    247e:	09 f0       	breq	.+2      	; 0x2482 <Timer0_Traffic+0xa0>
    2480:	d7 c0       	rjmp	.+430    	; 0x2630 <Timer0_Traffic+0x24e>

				Ccomp = 1488; /* Go to ON Yellow for 5 Second*/
    2482:	80 ed       	ldi	r24, 0xD0	; 208
    2484:	95 e0       	ldi	r25, 0x05	; 5
    2486:	90 93 78 00 	sts	0x0078, r25
    248a:	80 93 77 00 	sts	0x0077, r24
				BtnFlag  = NORMAL_MODE;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	80 93 76 00 	sts	0x0076, r24
				Ccomp2 = 0;
    2494:	10 92 93 00 	sts	0x0093, r1
    2498:	10 92 94 00 	sts	0x0094, r1
    249c:	10 92 95 00 	sts	0x0095, r1
    24a0:	10 92 96 00 	sts	0x0096, r1
    24a4:	c5 c0       	rjmp	.+394    	; 0x2630 <Timer0_Traffic+0x24e>
			}

		}else if( (CarLedFlag == YELLOW_LED) || (CarLedFlag == GREEN_LED) ){
    24a6:	80 91 92 00 	lds	r24, 0x0092
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <Timer0_Traffic+0xd6>
    24ae:	80 91 92 00 	lds	r24, 0x0092
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <Timer0_Traffic+0xd6>
    24b6:	bc c0       	rjmp	.+376    	; 0x2630 <Timer0_Traffic+0x24e>
			LED_u8SetOff(&Local_u8YellowLed);
    24b8:	86 e6       	ldi	r24, 0x66	; 102
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_sPedYellowLed);
    24c0:	8f e6       	ldi	r24, 0x6F	; 111
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_u8RedLed);
    24c8:	80 e6       	ldi	r24, 0x60	; 96
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_u8GreenLed);
    24d0:	83 e6       	ldi	r24, 0x63	; 99
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_s8PedGreenLed);
    24d8:	8c e6       	ldi	r24, 0x6C	; 108
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOn(&Local_s8PedRedLed);
    24e0:	89 e6       	ldi	r24, 0x69	; 105
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			/*Blink Yellow every 1 Second */
			if(Ccomp2 == 74){
    24e8:	80 91 93 00 	lds	r24, 0x0093
    24ec:	90 91 94 00 	lds	r25, 0x0094
    24f0:	a0 91 95 00 	lds	r26, 0x0095
    24f4:	b0 91 96 00 	lds	r27, 0x0096
    24f8:	8a 34       	cpi	r24, 0x4A	; 74
    24fa:	91 05       	cpc	r25, r1
    24fc:	a1 05       	cpc	r26, r1
    24fe:	b1 05       	cpc	r27, r1
    2500:	49 f4       	brne	.+18     	; 0x2514 <Timer0_Traffic+0x132>
				LED_u8Toggle(&Local_u8YellowLed);
    2502:	86 e6       	ldi	r24, 0x66	; 102
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
				LED_u8Toggle(&Local_sPedYellowLed);
    250a:	8f e6       	ldi	r24, 0x6F	; 111
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
    2512:	8e c0       	rjmp	.+284    	; 0x2630 <Timer0_Traffic+0x24e>
			}else if (Ccomp2 == 148){
    2514:	80 91 93 00 	lds	r24, 0x0093
    2518:	90 91 94 00 	lds	r25, 0x0094
    251c:	a0 91 95 00 	lds	r26, 0x0095
    2520:	b0 91 96 00 	lds	r27, 0x0096
    2524:	84 39       	cpi	r24, 0x94	; 148
    2526:	91 05       	cpc	r25, r1
    2528:	a1 05       	cpc	r26, r1
    252a:	b1 05       	cpc	r27, r1
    252c:	49 f4       	brne	.+18     	; 0x2540 <Timer0_Traffic+0x15e>

				LED_u8Toggle(&Local_u8YellowLed);
    252e:	86 e6       	ldi	r24, 0x66	; 102
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
				LED_u8Toggle(&Local_sPedYellowLed);
    2536:	8f e6       	ldi	r24, 0x6F	; 111
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
    253e:	78 c0       	rjmp	.+240    	; 0x2630 <Timer0_Traffic+0x24e>
			}else if(Ccomp2 == 222){
    2540:	80 91 93 00 	lds	r24, 0x0093
    2544:	90 91 94 00 	lds	r25, 0x0094
    2548:	a0 91 95 00 	lds	r26, 0x0095
    254c:	b0 91 96 00 	lds	r27, 0x0096
    2550:	8e 3d       	cpi	r24, 0xDE	; 222
    2552:	91 05       	cpc	r25, r1
    2554:	a1 05       	cpc	r26, r1
    2556:	b1 05       	cpc	r27, r1
    2558:	49 f4       	brne	.+18     	; 0x256c <Timer0_Traffic+0x18a>
				LED_u8Toggle(&Local_u8YellowLed);
    255a:	86 e6       	ldi	r24, 0x66	; 102
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
				LED_u8Toggle(&Local_sPedYellowLed);
    2562:	8f e6       	ldi	r24, 0x6F	; 111
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
    256a:	62 c0       	rjmp	.+196    	; 0x2630 <Timer0_Traffic+0x24e>
			}else if(Ccomp2 == 296){
    256c:	80 91 93 00 	lds	r24, 0x0093
    2570:	90 91 94 00 	lds	r25, 0x0094
    2574:	a0 91 95 00 	lds	r26, 0x0095
    2578:	b0 91 96 00 	lds	r27, 0x0096
    257c:	88 32       	cpi	r24, 0x28	; 40
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	92 07       	cpc	r25, r18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	a2 07       	cpc	r26, r18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	b2 07       	cpc	r27, r18
    258a:	49 f4       	brne	.+18     	; 0x259e <Timer0_Traffic+0x1bc>
				LED_u8Toggle(&Local_u8YellowLed);
    258c:	86 e6       	ldi	r24, 0x66	; 102
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
				LED_u8Toggle(&Local_sPedYellowLed);
    2594:	8f e6       	ldi	r24, 0x6F	; 111
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
    259c:	49 c0       	rjmp	.+146    	; 0x2630 <Timer0_Traffic+0x24e>
			}else if(Ccomp2 == 370){
    259e:	80 91 93 00 	lds	r24, 0x0093
    25a2:	90 91 94 00 	lds	r25, 0x0094
    25a6:	a0 91 95 00 	lds	r26, 0x0095
    25aa:	b0 91 96 00 	lds	r27, 0x0096
    25ae:	82 37       	cpi	r24, 0x72	; 114
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	92 07       	cpc	r25, r18
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	a2 07       	cpc	r26, r18
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	b2 07       	cpc	r27, r18
    25bc:	49 f4       	brne	.+18     	; 0x25d0 <Timer0_Traffic+0x1ee>
				LED_u8Toggle(&Local_u8YellowLed);
    25be:	86 e6       	ldi	r24, 0x66	; 102
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
				LED_u8Toggle(&Local_sPedYellowLed);
    25c6:	8f e6       	ldi	r24, 0x6F	; 111
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 12 07 	call	0xe24	; 0xe24 <LED_u8Toggle>
    25ce:	30 c0       	rjmp	.+96     	; 0x2630 <Timer0_Traffic+0x24e>
			}else if(Ccomp2 == 371){ /* After 5 Second*/
    25d0:	80 91 93 00 	lds	r24, 0x0093
    25d4:	90 91 94 00 	lds	r25, 0x0094
    25d8:	a0 91 95 00 	lds	r26, 0x0095
    25dc:	b0 91 96 00 	lds	r27, 0x0096
    25e0:	83 37       	cpi	r24, 0x73	; 115
    25e2:	21 e0       	ldi	r18, 0x01	; 1
    25e4:	92 07       	cpc	r25, r18
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	a2 07       	cpc	r26, r18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	b2 07       	cpc	r27, r18
    25ee:	01 f5       	brne	.+64     	; 0x2630 <Timer0_Traffic+0x24e>
				LED_u8SetOff(&Local_s8PedRedLed);
    25f0:	89 e6       	ldi	r24, 0x69	; 105
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
				LED_u8SetOff(&Local_u8YellowLed);
    25f8:	86 e6       	ldi	r24, 0x66	; 102
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
				LED_u8SetOff(&Local_sPedYellowLed);
    2600:	8f e6       	ldi	r24, 0x6F	; 111
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
				CarLedFlag = YELLOW_LED;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	80 93 92 00 	sts	0x0092, r24
				Ccomp = 1116;   /* Go to ON Yellow for 5 Second*/
    260e:	8c e5       	ldi	r24, 0x5C	; 92
    2610:	94 e0       	ldi	r25, 0x04	; 4
    2612:	90 93 78 00 	sts	0x0078, r25
    2616:	80 93 77 00 	sts	0x0077, r24
				BtnFlag  = NORMAL_MODE;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	80 93 76 00 	sts	0x0076, r24
				Ccomp2 = 0;
    2620:	10 92 93 00 	sts	0x0093, r1
    2624:	10 92 94 00 	sts	0x0094, r1
    2628:	10 92 95 00 	sts	0x0095, r1
    262c:	10 92 96 00 	sts	0x0096, r1
	}


/* 5 Second Take 372 Count*/

	if(BtnFlag == NORMAL_MODE){
    2630:	80 91 76 00 	lds	r24, 0x0076
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	09 f0       	breq	.+2      	; 0x263a <Timer0_Traffic+0x258>
    2638:	73 c0       	rjmp	.+230    	; 0x2720 <Timer0_Traffic+0x33e>
		if(Ccomp == 372){
    263a:	80 91 77 00 	lds	r24, 0x0077
    263e:	90 91 78 00 	lds	r25, 0x0078
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	84 37       	cpi	r24, 0x74	; 116
    2646:	92 07       	cpc	r25, r18
    2648:	a1 f4       	brne	.+40     	; 0x2672 <Timer0_Traffic+0x290>
			LED_u8SetOff(&Local_u8YellowLed);
    264a:	86 e6       	ldi	r24, 0x66	; 102
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_sPedYellowLed);
    2652:	8f e6       	ldi	r24, 0x6F	; 111
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOn(&Local_u8GreenLed);
    265a:	83 e6       	ldi	r24, 0x63	; 99
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			LED_u8SetOn(&Local_s8PedRedLed);
    2662:	89 e6       	ldi	r24, 0x69	; 105
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>

			CarLedFlag = GREEN_LED;
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	80 93 92 00 	sts	0x0092, r24
    2670:	5b c0       	rjmp	.+182    	; 0x2728 <Timer0_Traffic+0x346>

		}else if(Ccomp == 744){
    2672:	80 91 77 00 	lds	r24, 0x0077
    2676:	90 91 78 00 	lds	r25, 0x0078
    267a:	22 e0       	ldi	r18, 0x02	; 2
    267c:	88 3e       	cpi	r24, 0xE8	; 232
    267e:	92 07       	cpc	r25, r18
    2680:	a1 f4       	brne	.+40     	; 0x26aa <Timer0_Traffic+0x2c8>
			LED_u8SetOff(&Local_u8GreenLed);
    2682:	83 e6       	ldi	r24, 0x63	; 99
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_s8PedRedLed);
    268a:	89 e6       	ldi	r24, 0x69	; 105
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOn(&Local_u8YellowLed);
    2692:	86 e6       	ldi	r24, 0x66	; 102
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			LED_u8SetOn(&Local_sPedYellowLed);
    269a:	8f e6       	ldi	r24, 0x6F	; 111
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			CarLedFlag = YELLOW_LED;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 92 00 	sts	0x0092, r24
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <Timer0_Traffic+0x346>

		}else if(Ccomp == 1116){
    26aa:	80 91 77 00 	lds	r24, 0x0077
    26ae:	90 91 78 00 	lds	r25, 0x0078
    26b2:	24 e0       	ldi	r18, 0x04	; 4
    26b4:	8c 35       	cpi	r24, 0x5C	; 92
    26b6:	92 07       	cpc	r25, r18
    26b8:	99 f4       	brne	.+38     	; 0x26e0 <Timer0_Traffic+0x2fe>
			LED_u8SetOff(&Local_u8YellowLed);
    26ba:	86 e6       	ldi	r24, 0x66	; 102
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_sPedYellowLed);
    26c2:	8f e6       	ldi	r24, 0x6F	; 111
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOn(&Local_u8RedLed);
    26ca:	80 e6       	ldi	r24, 0x60	; 96
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			LED_u8SetOn(&Local_s8PedGreenLed);
    26d2:	8c e6       	ldi	r24, 0x6C	; 108
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			CarLedFlag = RED_LED;
    26da:	10 92 92 00 	sts	0x0092, r1
    26de:	24 c0       	rjmp	.+72     	; 0x2728 <Timer0_Traffic+0x346>
		}else if(Ccomp ==1488){
    26e0:	80 91 77 00 	lds	r24, 0x0077
    26e4:	90 91 78 00 	lds	r25, 0x0078
    26e8:	25 e0       	ldi	r18, 0x05	; 5
    26ea:	80 3d       	cpi	r24, 0xD0	; 208
    26ec:	92 07       	cpc	r25, r18
    26ee:	e1 f4       	brne	.+56     	; 0x2728 <Timer0_Traffic+0x346>
			LED_u8SetOff(&Local_u8RedLed);
    26f0:	80 e6       	ldi	r24, 0x60	; 96
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOff(&Local_s8PedGreenLed);
    26f8:	8c e6       	ldi	r24, 0x6C	; 108
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LED_u8SetOff>
			LED_u8SetOn(&Local_u8YellowLed);
    2700:	86 e6       	ldi	r24, 0x66	; 102
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			LED_u8SetOn(&Local_sPedYellowLed);
    2708:	8f e6       	ldi	r24, 0x6F	; 111
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 a0 06 	call	0xd40	; 0xd40 <LED_u8SetOn>
			CarLedFlag = YELLOW_LED;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	80 93 92 00 	sts	0x0092, r24
			Ccomp = 0;
    2716:	10 92 78 00 	sts	0x0078, r1
    271a:	10 92 77 00 	sts	0x0077, r1
    271e:	04 c0       	rjmp	.+8      	; 0x2728 <Timer0_Traffic+0x346>

		}

	}else{
		Ccomp = 0;
    2720:	10 92 78 00 	sts	0x0078, r1
    2724:	10 92 77 00 	sts	0x0077, r1
	}


}
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <_exit>:
    272e:	f8 94       	cli

00002730 <__stop_program>:
    2730:	ff cf       	rjmp	.-2      	; 0x2730 <__stop_program>
