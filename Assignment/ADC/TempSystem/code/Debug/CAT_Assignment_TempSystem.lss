
CAT_Assignment_TempSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001e78  00001f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007c  0080007c  00001f28  2**0
                  ALLOC
  3 .stab         00001b90  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e5c  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000680d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000084a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008895  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <main>
      8a:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static uint16* ADC_pu16Result = NULL;
static void (*ADC_pvNotificationFunc)(void) = NULL;

static uint8 ADC_u8BusyFlag = IDEL;

void ADC_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX, ADMUX_REFS1);
	CLR_BIT(ADMUX, ADMUX_REFS0);

#elif ADC_REF_SELECTION == AVCC

	CLR_BIT(ADMUX, ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#endif

	/* ADC Adjust Selections */

#if ADC_ADJUST_SELECTION == _8BIT   /* LEFT ADjust */
	SET_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#else
#error Wrong ADC Adjust Configuration Option
#endif

	/* Disable Auto Trigger Mode */
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	/* Disable interrupt  */

	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24


	/* Cofigure the Prescaler Division Factor */

	ADCSRA &= PRESCALER_BIT_MASK;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PRESCALER_DIVISION_FACTOR <<PRESCALER_BIT_POS;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24

	/* ADC Active */
#if ADC_ACTIVE == ENABLED
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
#error Wrong ADC Activation Configuration Option
#endif



}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartConversionSynch>:


uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_u8StartConversionSynch+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <ADC_u8StartConversionSynch+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	7d 83       	std	Y+5, r23	; 0x05
     bd6:	6c 83       	std	Y+4, r22	; 0x04

	uint8 Local_u8Err_State = OK;
     bd8:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0u;
     bda:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16Result != NULL){
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	09 f4       	brne	.+2      	; 0xbe6 <ADC_u8StartConversionSynch+0x22>
     be4:	43 c0       	rjmp	.+134    	; 0xc6c <ADC_u8StartConversionSynch+0xa8>

		/*check if ADC is IDEL  */
		if(ADC_u8BusyFlag == IDEL){
     be6:	80 91 7a 00 	lds	r24, 0x007A
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	e1 f5       	brne	.+120    	; 0xc66 <ADC_u8StartConversionSynch+0xa2>

			/* ADC Now Is Busy*/
			ADC_u8BusyFlag = BUSY;
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	80 93 7a 00 	sts	0x007A, r24



			/* Select Channel  */

			ADMUX &= ANALOG_CHANNEL_BIT_MASK;  /*Clear The Channel Selection bits */
     bf4:	a7 e2       	ldi	r26, 0x27	; 39
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e7 e2       	ldi	r30, 0x27	; 39
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 7e       	andi	r24, 0xE0	; 224
     c00:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	90 81       	ld	r25, Z
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	89 2b       	or	r24, r25
     c10:	8c 93       	st	X, r24


			/* Enable Start Conversion */

			SET_BIT(ADCSRA, ADCSRA_ADSC);
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 64       	ori	r24, 0x40	; 64
     c1e:	8c 93       	st	X, r24



			/* Pooling (Blocking) on the conversion Complete on this condition, Timeout not passed Yet */
			while(((GET_BIT(ADCSRA, ADCSRA_ADIF)) == 0) && (Local_u8Counter <  ADC_u8TIMEOUT)){
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	21 f4       	brne	.+8      	; 0xc3e <ADC_u8StartConversionSynch+0x7a>
				Local_u8Counter++;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	f1 cf       	rjmp	.-30     	; 0xc20 <ADC_u8StartConversionSynch+0x5c>
			}else{

				/*Flag is raised before time out */

				/* Disable ADC Interrupt Flag */
				SET_BIT(ADCSRA, ADCSRA_ADIF);
     c3e:	a6 e2       	ldi	r26, 0x26	; 38
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e6 e2       	ldi	r30, 0x26	; 38
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	8c 93       	st	X, r24

				/* get conversion  Result */
#if ADC_ADJUST_SELECTION == _8BIT   /* LEFT ADjust */
				*Copy_pu16Result =  ADCH;
     c4c:	e5 e2       	ldi	r30, 0x25	; 37
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	ec 81       	ldd	r30, Y+4	; 0x04
     c58:	fd 81       	ldd	r31, Y+5	; 0x05
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
#error Wrong ADC Adjust Configuration Option
#endif


				/* ADC Now Is IDEL*/
				ADC_u8BusyFlag = IDEL;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 7a 00 	sts	0x007A, r24
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <ADC_u8StartConversionSynch+0xac>

			}

		}else{
			/*ADC is Busy, update error state */
			Local_u8Err_State = BUSY_ERR;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	8a 83       	std	Y+2, r24	; 0x02
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <ADC_u8StartConversionSynch+0xac>
		}
	}else{

		Local_u8Err_State= NULL_PTR_ERR;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8Err_State;
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <ADC_u8StartConversionAsynch>:




uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result,  void (*Copy_pvNotificationFunc)()){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <ADC_u8StartConversionAsynch+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <ADC_u8StartConversionAsynch+0x8>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <ADC_u8StartConversionAsynch+0xa>
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	8a 83       	std	Y+2, r24	; 0x02
     c92:	7c 83       	std	Y+4, r23	; 0x04
     c94:	6b 83       	std	Y+3, r22	; 0x03
     c96:	5e 83       	std	Y+6, r21	; 0x06
     c98:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8Err_State = OK;
     c9a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL)){
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	c1 f1       	breq	.+112    	; 0xd14 <ADC_u8StartConversionAsynch+0x92>
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	a1 f1       	breq	.+104    	; 0xd14 <ADC_u8StartConversionAsynch+0x92>

		/*check if ADC is IDEL  */
		if(ADC_u8BusyFlag == IDEL){
     cac:	80 91 7a 00 	lds	r24, 0x007A
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	69 f5       	brne	.+90     	; 0xd0e <ADC_u8StartConversionAsynch+0x8c>

			/* ADC Now Is Busy*/
			ADC_u8BusyFlag = BUSY;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 7a 00 	sts	0x007A, r24


			/* Convert Local Result to Global Result for ISR */
			ADC_pu16Result = Copy_pu16Result;
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	90 93 7d 00 	sts	0x007D, r25
     cc2:	80 93 7c 00 	sts	0x007C, r24

			/* Convert Local Notification Function to Global Notification Function for ISR */
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	90 93 7f 00 	sts	0x007F, r25
     cce:	80 93 7e 00 	sts	0x007E, r24

			/* Select Channel  */

			ADMUX &= ANALOG_CHANNEL_BIT_MASK;  /*Clear The Channel Selection bits */
     cd2:	a7 e2       	ldi	r26, 0x27	; 39
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e2       	ldi	r30, 0x27	; 39
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 7e       	andi	r24, 0xE0	; 224
     cde:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     ce0:	a7 e2       	ldi	r26, 0x27	; 39
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e7 e2       	ldi	r30, 0x27	; 39
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	90 81       	ld	r25, Z
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	89 2b       	or	r24, r25
     cee:	8c 93       	st	X, r24

			/* Enable Start Conversion */

			SET_BIT(ADCSRA, ADCSRA_ADSC);
     cf0:	a6 e2       	ldi	r26, 0x26	; 38
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e6 e2       	ldi	r30, 0x26	; 38
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 64       	ori	r24, 0x40	; 64
     cfc:	8c 93       	st	X, r24

			/* Enable ADC Interrupt */

			SET_BIT(ADCSRA, ADCSRA_ADIE);
     cfe:	a6 e2       	ldi	r26, 0x26	; 38
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e6 e2       	ldi	r30, 0x26	; 38
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 60       	ori	r24, 0x08	; 8
     d0a:	8c 93       	st	X, r24
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <ADC_u8StartConversionAsynch+0x96>



		}else{
			/*ADC is Busy, update error state */
			Local_u8Err_State = BUSY_ERR;
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <ADC_u8StartConversionAsynch+0x96>



	}else{

		Local_u8Err_State= NULL_PTR_ERR;
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Err_State;
     d18:	89 81       	ldd	r24, Y+1	; 0x01

}
     d1a:	26 96       	adiw	r28, 0x06	; 6
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <__vector_16>:


__attribute__((signal)) void __vector_16(void);

/* Page 42 on datasheet*/
void __vector_16(void){
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62

	if(ADC_pu16Result != NULL){
     d56:	80 91 7c 00 	lds	r24, 0x007C
     d5a:	90 91 7d 00 	lds	r25, 0x007D
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	91 f0       	breq	.+36     	; 0xd86 <__vector_16+0x5a>

		/* get conversion  Result */
#if ADC_ADJUST_SELECTION == _8BIT   /* LEFT ADjust */
		*ADC_pu16Result =  ADCH;
     d62:	a0 91 7c 00 	lds	r26, 0x007C
     d66:	b0 91 7d 00 	lds	r27, 0x007D
     d6a:	e5 e2       	ldi	r30, 0x25	; 37
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	8d 93       	st	X+, r24
     d76:	9c 93       	st	X, r25
		*ADC_pu16Result =  ADC;
#endif

		/* Disable ADC conversion complete Interrupt */

		CLR_BIT(ADCSRA, ADCSRA_ADIE);
     d78:	a6 e2       	ldi	r26, 0x26	; 38
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	8c 93       	st	X, r24
	}

/* Should be here because Call Back function may call ADC  */
	/* ADC Now Is IDEL*/
	ADC_u8BusyFlag = IDEL;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 7a 00 	sts	0x007A, r24



	/*Invoke the call back notification Function */

	if(ADC_pvNotificationFunc != NULL){
     d8c:	80 91 7e 00 	lds	r24, 0x007E
     d90:	90 91 7f 00 	lds	r25, 0x007F
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	29 f0       	breq	.+10     	; 0xda2 <__vector_16+0x76>
		ADC_pvNotificationFunc();
     d98:	e0 91 7e 00 	lds	r30, 0x007E
     d9c:	f0 91 7f 00 	lds	r31, 0x007F
     da0:	09 95       	icall
	}



}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <voidSetHalfDataPort>:
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

#if CLCD_u8BIT_MODE == FOUR_BIT

static void voidSetHalfDataPort(uint8 Copy_u8Data){
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01


	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D4, GET_BIT(Copy_u8Data, 0));
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	98 2f       	mov	r25, r24
     dd8:	91 70       	andi	r25, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	63 e0       	ldi	r22, 0x03	; 3
     dde:	49 2f       	mov	r20, r25
     de0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D5, GET_BIT(Copy_u8Data, 1));
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	86 95       	lsr	r24
     de8:	98 2f       	mov	r25, r24
     dea:	91 70       	andi	r25, 0x01	; 1
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	64 e0       	ldi	r22, 0x04	; 4
     df0:	49 2f       	mov	r20, r25
     df2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D6, GET_BIT(Copy_u8Data, 2));
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	86 95       	lsr	r24
     dfa:	86 95       	lsr	r24
     dfc:	98 2f       	mov	r25, r24
     dfe:	91 70       	andi	r25, 0x01	; 1
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	65 e0       	ldi	r22, 0x05	; 5
     e04:	49 2f       	mov	r20, r25
     e06:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D7, GET_BIT(Copy_u8Data, 3));
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	86 95       	lsr	r24
     e0e:	86 95       	lsr	r24
     e10:	86 95       	lsr	r24
     e12:	98 2f       	mov	r25, r24
     e14:	91 70       	andi	r25, 0x01	; 1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	66 e0       	ldi	r22, 0x06	; 6
     e1a:	49 2f       	mov	r20, r25
     e1c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>

}
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <voidSendEnablePulse>:


#endif

static void voidSendEnablePulse(void){
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	2e 97       	sbiw	r28, 0x0e	; 14
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_HIGH);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e4       	ldi	r27, 0x40	; 64
     e4e:	8b 87       	std	Y+11, r24	; 0x0b
     e50:	9c 87       	std	Y+12, r25	; 0x0c
     e52:	ad 87       	std	Y+13, r26	; 0x0d
     e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e56:	6b 85       	ldd	r22, Y+11	; 0x0b
     e58:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a e7       	ldi	r20, 0x7A	; 122
     e64:	55 e4       	ldi	r21, 0x45	; 69
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8f 83       	std	Y+7, r24	; 0x07
     e70:	98 87       	std	Y+8, r25	; 0x08
     e72:	a9 87       	std	Y+9, r26	; 0x09
     e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <voidSendEnablePulse+0x70>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <voidSendEnablePulse+0xd0>
     eda:	80 e9       	ldi	r24, 0x90	; 144
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	9c 83       	std	Y+4, r25	; 0x04
     ee0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <voidSendEnablePulse+0xbe>
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	69 f7       	brne	.-38     	; 0xeda <voidSendEnablePulse+0xb2>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e 83       	std	Y+6, r25	; 0x06
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <voidSendEnablePulse+0xfa>
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_LOW);
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
}
     f34:	2e 96       	adiw	r28, 0x0e	; 14
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS pin to Low for command */
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
#endif

	/* Send Command */
#if CLCD_u8BIT_MODE == FOUR_BIT
	/* Send the 4 most significant bit of the command */
	voidSetHalfDataPort(Copy_u8Cmd>>4);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	82 95       	swap	r24
     f60:	8f 70       	andi	r24, 0x0F	; 15
     f62:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f66:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>
	/* Send the 4 least significant bit of the command */
	voidSetHalfDataPort(Copy_u8Cmd);
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f70:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>

#else
#error Wrong CLCD_u8BIT_MODE Configuration
#endif

}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01

	/* Set RS pin to Low for Data */

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_u8SetPinValue>
#endif

	/* Send Data */
#if CLCD_u8BIT_MODE == FOUR_BIT
	/* Send the 4 most significant bit of the command */
	voidSetHalfDataPort(Copy_u8Data>>4);
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	82 95       	swap	r24
     f96:	8f 70       	andi	r24, 0x0F	; 15
     f98:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f9c:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>
	/* Send the 4 least significant bit of the command */
	voidSetHalfDataPort(Copy_u8Data);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
     fa6:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>
#else
#error Wrong CLCD_u8BIT_MODE Configuration
#endif


}
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <CLCD_voidInit>:


void CLCD_voidInit(void){
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2e 97       	sbiw	r28, 0x0e	; 14
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e2       	ldi	r26, 0x20	; 32
     fcc:	b2 e4       	ldi	r27, 0x42	; 66
     fce:	8b 87       	std	Y+11, r24	; 0x0b
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	ad 87       	std	Y+13, r26	; 0x0d
     fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a e7       	ldi	r20, 0x7A	; 122
     fe4:	55 e4       	ldi	r21, 0x45	; 69
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8f 83       	std	Y+7, r24	; 0x07
     ff0:	98 87       	std	Y+8, r25	; 0x08
     ff2:	a9 87       	std	Y+9, r26	; 0x09
     ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <CLCD_voidInit+0x66>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	57 e4       	ldi	r21, 0x47	; 71
    1028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	6b 85       	ldd	r22, Y+11	; 0x0b
    1032:	7c 85       	ldd	r23, Y+12	; 0x0c
    1034:	8d 85       	ldd	r24, Y+13	; 0x0d
    1036:	9e 85       	ldd	r25, Y+14	; 0x0e
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <CLCD_voidInit+0xc6>
    105a:	80 e9       	ldi	r24, 0x90	; 144
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <CLCD_voidInit+0xb4>
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <CLCD_voidInit+0xa8>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <CLCD_voidInit+0xf0>
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01



#elif CLCD_u8BIT_MODE == FOUR_BIT

	voidSetHalfDataPort(0b0010);
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
    10b0:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
    10ba:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <voidSetHalfDataPort>
	voidSendEnablePulse();
    10c4:	0e 94 14 07 	call	0xe28	; 0xe28 <voidSendEnablePulse>


#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
	CLCD_voidSendCmd(0b00001100);
    10c8:	8c e0       	ldi	r24, 0x0C	; 12
    10ca:	0e 94 a3 07 	call	0xf46	; 0xf46 <CLCD_voidSendCmd>

	/*Clear display*/
	CLCD_voidSendCmd(1);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0e 94 a3 07 	call	0xf46	; 0xf46 <CLCD_voidSendCmd>

}
    10d4:	2e 96       	adiw	r28, 0x0e	; 14
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char *Copy_pcharString){
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <CLCD_u8SendString+0x6>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <CLCD_u8SendString+0x8>
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Local_u8ErrState = OK;
    10f6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Copy_u8Counter = 0u;
    10f8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcharString != NULL){
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	f1 f0       	breq	.+60     	; 0x113e <CLCD_u8SendString+0x58>
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <CLCD_u8SendString+0x3c>

		while(Copy_pcharString[Copy_u8Counter] != NULL){

			CLCD_voidSendData(Copy_pcharString[Copy_u8Counter++]);
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	fc 01       	movw	r30, r24
    1110:	e2 0f       	add	r30, r18
    1112:	f3 1f       	adc	r31, r19
    1114:	90 81       	ld	r25, Z
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	89 2f       	mov	r24, r25
    111e:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>

	uint8 Local_u8ErrState = OK;
	uint8 Copy_u8Counter = 0u;
	if(Copy_pcharString != NULL){

		while(Copy_pcharString[Copy_u8Counter] != NULL){
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	80 81       	ld	r24, Z
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	21 f7       	brne	.-56     	; 0x1104 <CLCD_u8SendString+0x1e>
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <CLCD_u8SendString+0x5c>


	}else{


		Local_u8ErrState = NULL_PTR_ERR;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_u8ErrState;
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <CLCD_u8SendNumber>:


void CLCD_u8SendNumber(sint32 Copy_s32Number){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	2f 97       	sbiw	r28, 0x0f	; 15
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	6c 87       	std	Y+12, r22	; 0x0c
    1168:	7d 87       	std	Y+13, r23	; 0x0d
    116a:	8e 87       	std	Y+14, r24	; 0x0e
    116c:	9f 87       	std	Y+15, r25	; 0x0f


	uint8  Local_u8NumberOfDigits = 0u;
    116e:	1b 86       	std	Y+11, r1	; 0x0b
	uint8 Local_u32Digits;
	uint32 Local_u32OriginalNumber;
	uint32 Local_u32Divider = 1u;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	ac 83       	std	Y+4, r26	; 0x04
    117e:	bd 83       	std	Y+5, r27	; 0x05
	uint8 Copy_u8Counter = 0u;
    1180:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Number == 0){
    1182:	8c 85       	ldd	r24, Y+12	; 0x0c
    1184:	9d 85       	ldd	r25, Y+13	; 0x0d
    1186:	ae 85       	ldd	r26, Y+14	; 0x0e
    1188:	bf 85       	ldd	r27, Y+15	; 0x0f
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	a1 05       	cpc	r26, r1
    118e:	b1 05       	cpc	r27, r1
    1190:	21 f4       	brne	.+8      	; 0x119a <CLCD_u8SendNumber+0x48>
		CLCD_voidSendData('0');
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>
    1198:	a7 c0       	rjmp	.+334    	; 0x12e8 <CLCD_u8SendNumber+0x196>
	}else{

		if(Copy_s32Number < 0){
    119a:	8c 85       	ldd	r24, Y+12	; 0x0c
    119c:	9d 85       	ldd	r25, Y+13	; 0x0d
    119e:	ae 85       	ldd	r26, Y+14	; 0x0e
    11a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    11a2:	bb 23       	and	r27, r27
    11a4:	94 f4       	brge	.+36     	; 0x11ca <CLCD_u8SendNumber+0x78>
			CLCD_voidSendData('-');
    11a6:	8d e2       	ldi	r24, 0x2D	; 45
    11a8:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>
			Copy_s32Number*=-1;
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b0:	ae 85       	ldd	r26, Y+14	; 0x0e
    11b2:	bf 85       	ldd	r27, Y+15	; 0x0f
    11b4:	b0 95       	com	r27
    11b6:	a0 95       	com	r26
    11b8:	90 95       	com	r25
    11ba:	81 95       	neg	r24
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	af 4f       	sbci	r26, 0xFF	; 255
    11c0:	bf 4f       	sbci	r27, 0xFF	; 255
    11c2:	8c 87       	std	Y+12, r24	; 0x0c
    11c4:	9d 87       	std	Y+13, r25	; 0x0d
    11c6:	ae 87       	std	Y+14, r26	; 0x0e
    11c8:	bf 87       	std	Y+15, r27	; 0x0f
		}

		Local_u32OriginalNumber = Copy_s32Number;
    11ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    11cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ce:	ae 85       	ldd	r26, Y+14	; 0x0e
    11d0:	bf 85       	ldd	r27, Y+15	; 0x0f
    11d2:	8e 83       	std	Y+6, r24	; 0x06
    11d4:	9f 83       	std	Y+7, r25	; 0x07
    11d6:	a8 87       	std	Y+8, r26	; 0x08
    11d8:	b9 87       	std	Y+9, r27	; 0x09
    11da:	15 c0       	rjmp	.+42     	; 0x1206 <CLCD_u8SendNumber+0xb4>
		/*get number of digits */
		while(Local_u32OriginalNumber> 0){
			Local_u8NumberOfDigits++;
    11dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
			Local_u32OriginalNumber/=10;
    11e2:	8e 81       	ldd	r24, Y+6	; 0x06
    11e4:	9f 81       	ldd	r25, Y+7	; 0x07
    11e6:	a8 85       	ldd	r26, Y+8	; 0x08
    11e8:	b9 85       	ldd	r27, Y+9	; 0x09
    11ea:	2a e0       	ldi	r18, 0x0A	; 10
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18
    11fe:	8e 83       	std	Y+6, r24	; 0x06
    1200:	9f 83       	std	Y+7, r25	; 0x07
    1202:	a8 87       	std	Y+8, r26	; 0x08
    1204:	b9 87       	std	Y+9, r27	; 0x09
			Copy_s32Number*=-1;
		}

		Local_u32OriginalNumber = Copy_s32Number;
		/*get number of digits */
		while(Local_u32OriginalNumber> 0){
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	a8 85       	ldd	r26, Y+8	; 0x08
    120c:	b9 85       	ldd	r27, Y+9	; 0x09
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	a1 05       	cpc	r26, r1
    1212:	b1 05       	cpc	r27, r1
    1214:	19 f7       	brne	.-58     	; 0x11dc <CLCD_u8SendNumber+0x8a>
			Local_u8NumberOfDigits++;
			Local_u32OriginalNumber/=10;
		}

		/*get 10 multiplied number of digits */
		for(Copy_u8Counter = 0;Copy_u8Counter <Local_u8NumberOfDigits-1;Copy_u8Counter++){
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	15 c0       	rjmp	.+42     	; 0x1244 <CLCD_u8SendNumber+0xf2>
			Local_u32Divider*=10;
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	ac 81       	ldd	r26, Y+4	; 0x04
    1220:	bd 81       	ldd	r27, Y+5	; 0x05
    1222:	2a e0       	ldi	r18, 0x0A	; 10
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__mulsi3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	ac 83       	std	Y+4, r26	; 0x04
    123c:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8NumberOfDigits++;
			Local_u32OriginalNumber/=10;
		}

		/*get 10 multiplied number of digits */
		for(Copy_u8Counter = 0;Copy_u8Counter <Local_u8NumberOfDigits-1;Copy_u8Counter++){
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 85       	ldd	r24, Y+11	; 0x0b
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	28 17       	cp	r18, r24
    1254:	39 07       	cpc	r19, r25
    1256:	0c f3       	brlt	.-62     	; 0x121a <CLCD_u8SendNumber+0xc8>
			Local_u32Divider*=10;
		}
		Local_u32OriginalNumber = Copy_s32Number;
    1258:	8c 85       	ldd	r24, Y+12	; 0x0c
    125a:	9d 85       	ldd	r25, Y+13	; 0x0d
    125c:	ae 85       	ldd	r26, Y+14	; 0x0e
    125e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1260:	8e 83       	std	Y+6, r24	; 0x06
    1262:	9f 83       	std	Y+7, r25	; 0x07
    1264:	a8 87       	std	Y+8, r26	; 0x08
    1266:	b9 87       	std	Y+9, r27	; 0x09
    1268:	37 c0       	rjmp	.+110    	; 0x12d8 <CLCD_u8SendNumber+0x186>

		/*get digits form first, divide by Local_u32Divider, and Local_u32Divider/10 on each step */
		while(Local_u32Divider > 0){
			/*48 is Ascci of zero*/
			Local_u32Digits =  (Local_u32OriginalNumber/Local_u32Divider)+48;
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	9f 81       	ldd	r25, Y+7	; 0x07
    126e:	a8 85       	ldd	r26, Y+8	; 0x08
    1270:	b9 85       	ldd	r27, Y+9	; 0x09
    1272:	2a 81       	ldd	r18, Y+2	; 0x02
    1274:	3b 81       	ldd	r19, Y+3	; 0x03
    1276:	4c 81       	ldd	r20, Y+4	; 0x04
    1278:	5d 81       	ldd	r21, Y+5	; 0x05
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    1282:	da 01       	movw	r26, r20
    1284:	c9 01       	movw	r24, r18
    1286:	80 5d       	subi	r24, 0xD0	; 208
    1288:	8a 87       	std	Y+10, r24	; 0x0a
			CLCD_voidSendData(Local_u32Digits);
    128a:	8a 85       	ldd	r24, Y+10	; 0x0a
    128c:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>
			Local_u32OriginalNumber%=Local_u32Divider;
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	a8 85       	ldd	r26, Y+8	; 0x08
    1296:	b9 85       	ldd	r27, Y+9	; 0x09
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	4c 81       	ldd	r20, Y+4	; 0x04
    129e:	5d 81       	ldd	r21, Y+5	; 0x05
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8e 83       	std	Y+6, r24	; 0x06
    12ae:	9f 83       	std	Y+7, r25	; 0x07
    12b0:	a8 87       	std	Y+8, r26	; 0x08
    12b2:	b9 87       	std	Y+9, r27	; 0x09
			Local_u32Divider/=10;
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	ac 81       	ldd	r26, Y+4	; 0x04
    12ba:	bd 81       	ldd	r27, Y+5	; 0x05
    12bc:	2a e0       	ldi	r18, 0x0A	; 10
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    12cc:	da 01       	movw	r26, r20
    12ce:	c9 01       	movw	r24, r18
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	9b 83       	std	Y+3, r25	; 0x03
    12d4:	ac 83       	std	Y+4, r26	; 0x04
    12d6:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Divider*=10;
		}
		Local_u32OriginalNumber = Copy_s32Number;

		/*get digits form first, divide by Local_u32Divider, and Local_u32Divider/10 on each step */
		while(Local_u32Divider > 0){
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	ac 81       	ldd	r26, Y+4	; 0x04
    12de:	bd 81       	ldd	r27, Y+5	; 0x05
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	a1 05       	cpc	r26, r1
    12e4:	b1 05       	cpc	r27, r1
    12e6:	09 f6       	brne	.-126    	; 0x126a <CLCD_u8SendNumber+0x118>
			Local_u32Divider/=10;

		}

	}
}
    12e8:	2f 96       	adiw	r28, 0x0f	; 15
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <CLCD_voidGoToXY+0x6>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8Adress;
	if(Copy_u8YPos == 0u){
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	19 f4       	brne	.+6      	; 0x1316 <CLCD_voidGoToXY+0x1c>

		Local_u8Adress = Copy_u8XPos;
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <CLCD_voidGoToXY+0x28>
	}else if(Copy_u8YPos == 1u){
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	19 f4       	brne	.+6      	; 0x1322 <CLCD_voidGoToXY+0x28>

		Local_u8Adress = 0x40 + Copy_u8XPos;
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 5c       	subi	r24, 0xC0	; 192
    1320:	89 83       	std	Y+1, r24	; 0x01
	}

	/* 		Local_u8Adress = 0x40 * Copy_u8YPos  + Copy_u8XPos; */

	/*Set bit 7 for SetDDRAM Address command (on CLCD memory) */
	SET_BIT(Local_u8Adress, 7);
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	89 83       	std	Y+1, r24	; 0x01

	/*Execute Set DDRAM Address command (on CLCD memory)*/
	CLCD_voidSendCmd(Local_u8Adress);
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	0e 94 a3 07 	call	0xf46	; 0xf46 <CLCD_voidSendCmd>

}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <CLCD_u8SendSpecialCharacter>:


uint8 CLCD_u8SendSpecialCharacter(uint8 Copy_u8LocationNum, uint8 *Copy_pu8Pattern, uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	28 97       	sbiw	r28, 0x08	; 8
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	7e 83       	std	Y+6, r23	; 0x06
    1352:	6d 83       	std	Y+5, r22	; 0x05
    1354:	4f 83       	std	Y+7, r20	; 0x07
    1356:	28 87       	std	Y+8, r18	; 0x08

	uint8 Local_u8ErrorState = OK;
    1358:	1b 82       	std	Y+3, r1	; 0x03

	if(Copy_pu8Pattern != NULL){
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	59 f1       	breq	.+86     	; 0x13b8 <CLCD_u8SendSpecialCharacter+0x7e>

		uint8 Local_u8LocationAddress = Copy_u8LocationNum * 8;
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8Counter;
		/*Set Bit 6 on CGRAM */
		SET_BIT(Local_u8LocationAddress, 6);
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	8a 83       	std	Y+2, r24	; 0x02

		/* Set CGRAM address in address counter.   */
		CLCD_voidSendCmd(Local_u8LocationAddress);
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	0e 94 a3 07 	call	0xf46	; 0xf46 <CLCD_voidSendCmd>

		/* Write data into internal CGRAM). */

		for(Local_u8Counter = 0; Local_u8Counter < 8u;Local_u8Counter++){
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <CLCD_u8SendSpecialCharacter+0x68>
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);  /* Send byte by byte to location */
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	fc 01       	movw	r30, r24
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	80 81       	ld	r24, Z
    1398:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>
		/* Set CGRAM address in address counter.   */
		CLCD_voidSendCmd(Local_u8LocationAddress);

		/* Write data into internal CGRAM). */

		for(Local_u8Counter = 0; Local_u8Counter < 8u;Local_u8Counter++){
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 30       	cpi	r24, 0x08	; 8
    13a6:	78 f3       	brcs	.-34     	; 0x1386 <CLCD_u8SendSpecialCharacter+0x4c>
		}


		/* Set DDRAM address in address counter to display pattern   */

		CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	68 85       	ldd	r22, Y+8	; 0x08
    13ac:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidGoToXY>

		/* * Display the special pattern inside CGRAM
           * send location of pattern, 0 - 7 */

		CLCD_voidSendData(Copy_u8LocationNum);
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	0e 94 be 07 	call	0xf7c	; 0xf7c <CLCD_voidSendData>
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <CLCD_u8SendSpecialCharacter+0x82>


	}else{
		Local_u8ErrorState = NULL_PTR_ERR;
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	8b 83       	std	Y+3, r24	; 0x03
	}


	return Local_u8ErrorState;
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13be:	28 96       	adiw	r28, 0x08	; 8
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <DIO_u8SetPinDirection>:
#include "DIO_reg.h"
#include "DIO_cfg.h"



uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	28 97       	sbiw	r28, 0x08	; 8
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	6b 83       	std	Y+3, r22	; 0x03
    13e8:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
    13ea:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 30       	cpi	r24, 0x08	; 8
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <DIO_u8SetPinDirection+0x24>
    13f2:	eb c0       	rjmp	.+470    	; 0x15ca <DIO_u8SetPinDirection+0x1fa>


		if(Copy_u8Direction == DIO_u8PIN_OUTPUT){
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <DIO_u8SetPinDirection+0x2c>
    13fa:	6e c0       	rjmp	.+220    	; 0x14d8 <DIO_u8SetPinDirection+0x108>

			switch(Copy_u8Port){
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	38 87       	std	Y+8, r19	; 0x08
    1404:	2f 83       	std	Y+7, r18	; 0x07
    1406:	8f 81       	ldd	r24, Y+7	; 0x07
    1408:	98 85       	ldd	r25, Y+8	; 0x08
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	41 f1       	breq	.+80     	; 0x1460 <DIO_u8SetPinDirection+0x90>
    1410:	2f 81       	ldd	r18, Y+7	; 0x07
    1412:	38 85       	ldd	r19, Y+8	; 0x08
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <DIO_u8SetPinDirection+0x54>
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	61 f0       	breq	.+24     	; 0x143a <DIO_u8SetPinDirection+0x6a>
    1422:	57 c0       	rjmp	.+174    	; 0x14d2 <DIO_u8SetPinDirection+0x102>
    1424:	2f 81       	ldd	r18, Y+7	; 0x07
    1426:	38 85       	ldd	r19, Y+8	; 0x08
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	61 f1       	breq	.+88     	; 0x1486 <DIO_u8SetPinDirection+0xb6>
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	98 85       	ldd	r25, Y+8	; 0x08
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	d1 f1       	breq	.+116    	; 0x14ac <DIO_u8SetPinDirection+0xdc>
    1438:	4c c0       	rjmp	.+152    	; 0x14d2 <DIO_u8SetPinDirection+0x102>

			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    143a:	aa e3       	ldi	r26, 0x3A	; 58
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ea e3       	ldi	r30, 0x3A	; 58
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	40 81       	ld	r20, Z
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8SetPinDirection+0x86>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8SetPinDirection+0x82>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	b7 c0       	rjmp	.+366    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
    1460:	a7 e3       	ldi	r26, 0x37	; 55
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	40 81       	ld	r20, Z
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_u8SetPinDirection+0xac>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_u8SetPinDirection+0xa8>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	a4 c0       	rjmp	.+328    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    1486:	a4 e3       	ldi	r26, 0x34	; 52
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e4 e3       	ldi	r30, 0x34	; 52
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	40 81       	ld	r20, Z
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_u8SetPinDirection+0xd2>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_u8SetPinDirection+0xce>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	91 c0       	rjmp	.+290    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    14ac:	a1 e3       	ldi	r26, 0x31	; 49
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e1 e3       	ldi	r30, 0x31	; 49
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	40 81       	ld	r20, Z
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_u8SetPinDirection+0xf8>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_u8SetPinDirection+0xf4>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	7e c0       	rjmp	.+252    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK; break;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	7b c0       	rjmp	.+246    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			}

		}else if(Copy_u8Direction == DIO_u8PIN_INPUT){
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	88 23       	and	r24, r24
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <DIO_u8SetPinDirection+0x110>
    14de:	72 c0       	rjmp	.+228    	; 0x15c4 <DIO_u8SetPinDirection+0x1f4>

			switch(Copy_u8Port){
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	2d 83       	std	Y+5, r18	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	49 f1       	breq	.+82     	; 0x1546 <DIO_u8SetPinDirection+0x176>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_u8SetPinDirection+0x138>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_u8SetPinDirection+0x14e>
    1506:	5b c0       	rjmp	.+182    	; 0x15be <DIO_u8SetPinDirection+0x1ee>
    1508:	2d 81       	ldd	r18, Y+5	; 0x05
    150a:	3e 81       	ldd	r19, Y+6	; 0x06
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	71 f1       	breq	.+92     	; 0x156e <DIO_u8SetPinDirection+0x19e>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	e9 f1       	breq	.+122    	; 0x1596 <DIO_u8SetPinDirection+0x1c6>
    151c:	50 c0       	rjmp	.+160    	; 0x15be <DIO_u8SetPinDirection+0x1ee>

			case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    151e:	aa e3       	ldi	r26, 0x3A	; 58
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ea e3       	ldi	r30, 0x3A	; 58
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	40 81       	ld	r20, Z
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinDirection+0x16a>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinDirection+0x166>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	44 c0       	rjmp	.+136    	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
    1546:	a7 e3       	ldi	r26, 0x37	; 55
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e7 e3       	ldi	r30, 0x37	; 55
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	40 81       	ld	r20, Z
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_u8SetPinDirection+0x192>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_u8SetPinDirection+0x18e>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	30 c0       	rjmp	.+96     	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    156e:	a4 e3       	ldi	r26, 0x34	; 52
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	40 81       	ld	r20, Z
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_u8SetPinDirection+0x1ba>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_u8SetPinDirection+0x1b6>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	1c c0       	rjmp	.+56     	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    1596:	a1 e3       	ldi	r26, 0x31	; 49
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	40 81       	ld	r20, Z
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8SetPinDirection+0x1e2>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_u8SetPinDirection+0x1de>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			default: Local_u8ErrState = NOK;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_u8SetPinDirection+0x1fe>
		}

	}else{

		Local_u8ErrState = NOK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrState;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d0:	28 96       	adiw	r28, 0x08	; 8
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	28 97       	sbiw	r28, 0x08	; 8
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
    15fa:	4c 83       	std	Y+4, r20	; 0x04


	uint8 Local_u8ErrState = OK;
    15fc:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin <= DIO_u8PIN7){
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 30       	cpi	r24, 0x08	; 8
    1602:	08 f0       	brcs	.+2      	; 0x1606 <DIO_u8SetPinValue+0x24>
    1604:	eb c0       	rjmp	.+470    	; 0x17dc <DIO_u8SetPinValue+0x1fa>


		if(Copy_u8Value == DIO_u8PIN_HIGH){
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_u8SetPinValue+0x2c>
    160c:	6e c0       	rjmp	.+220    	; 0x16ea <DIO_u8SetPinValue+0x108>
			switch(Copy_u8Port){
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	38 87       	std	Y+8, r19	; 0x08
    1616:	2f 83       	std	Y+7, r18	; 0x07
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	41 f1       	breq	.+80     	; 0x1672 <DIO_u8SetPinValue+0x90>
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <DIO_u8SetPinValue+0x54>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <DIO_u8SetPinValue+0x6a>
    1634:	57 c0       	rjmp	.+174    	; 0x16e4 <DIO_u8SetPinValue+0x102>
    1636:	2f 81       	ldd	r18, Y+7	; 0x07
    1638:	38 85       	ldd	r19, Y+8	; 0x08
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	61 f1       	breq	.+88     	; 0x1698 <DIO_u8SetPinValue+0xb6>
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	98 85       	ldd	r25, Y+8	; 0x08
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	d1 f1       	breq	.+116    	; 0x16be <DIO_u8SetPinValue+0xdc>
    164a:	4c c0       	rjmp	.+152    	; 0x16e4 <DIO_u8SetPinValue+0x102>

			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    164c:	ab e3       	ldi	r26, 0x3B	; 59
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e3       	ldi	r30, 0x3B	; 59
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	40 81       	ld	r20, Z
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_u8SetPinValue+0x86>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_u8SetPinValue+0x82>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	b7 c0       	rjmp	.+366    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	40 81       	ld	r20, Z
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_u8SetPinValue+0xac>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_u8SetPinValue+0xa8>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	a4 c0       	rjmp	.+328    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	40 81       	ld	r20, Z
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_u8SetPinValue+0xd2>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_u8SetPinValue+0xce>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	91 c0       	rjmp	.+290    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    16be:	a2 e3       	ldi	r26, 0x32	; 50
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e2 e3       	ldi	r30, 0x32	; 50
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	40 81       	ld	r20, Z
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_u8SetPinValue+0xf8>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_u8SetPinValue+0xf4>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	7e c0       	rjmp	.+252    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	7b c0       	rjmp	.+246    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			}
		}else if(Copy_u8Value == DIO_u8PIN_LOW ){
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	88 23       	and	r24, r24
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <DIO_u8SetPinValue+0x110>
    16f0:	72 c0       	rjmp	.+228    	; 0x17d6 <DIO_u8SetPinValue+0x1f4>

			switch(Copy_u8Port){
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3e 83       	std	Y+6, r19	; 0x06
    16fa:	2d 83       	std	Y+5, r18	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	49 f1       	breq	.+82     	; 0x1758 <DIO_u8SetPinValue+0x176>
    1706:	2d 81       	ldd	r18, Y+5	; 0x05
    1708:	3e 81       	ldd	r19, Y+6	; 0x06
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <DIO_u8SetPinValue+0x138>
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <DIO_u8SetPinValue+0x14e>
    1718:	5b c0       	rjmp	.+182    	; 0x17d0 <DIO_u8SetPinValue+0x1ee>
    171a:	2d 81       	ldd	r18, Y+5	; 0x05
    171c:	3e 81       	ldd	r19, Y+6	; 0x06
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	71 f1       	breq	.+92     	; 0x1780 <DIO_u8SetPinValue+0x19e>
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	e9 f1       	breq	.+122    	; 0x17a8 <DIO_u8SetPinValue+0x1c6>
    172e:	50 c0       	rjmp	.+160    	; 0x17d0 <DIO_u8SetPinValue+0x1ee>

			case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	40 81       	ld	r20, Z
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8SetPinValue+0x16a>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8SetPinValue+0x166>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	44 c0       	rjmp	.+136    	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
    1758:	a8 e3       	ldi	r26, 0x38	; 56
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e3       	ldi	r30, 0x38	; 56
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	40 81       	ld	r20, Z
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_u8SetPinValue+0x192>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_u8SetPinValue+0x18e>
    1778:	80 95       	com	r24
    177a:	84 23       	and	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	30 c0       	rjmp	.+96     	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    1780:	a5 e3       	ldi	r26, 0x35	; 53
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e3       	ldi	r30, 0x35	; 53
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	40 81       	ld	r20, Z
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_u8SetPinValue+0x1ba>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_u8SetPinValue+0x1b6>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	1c c0       	rjmp	.+56     	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    17a8:	a2 e3       	ldi	r26, 0x32	; 50
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e3       	ldi	r30, 0x32	; 50
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	40 81       	ld	r20, Z
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8SetPinValue+0x1e2>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_u8SetPinValue+0x1de>
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			default: Local_u8ErrState = NOK; break;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
			}

		}else{
			Local_u8ErrState = NOK;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_u8SetPinValue+0x1fe>
		}
	}else{
		Local_u8ErrState = NOK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e2:	28 96       	adiw	r28, 0x08	; 8
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value){
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	27 97       	sbiw	r28, 0x07	; 7
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	6b 83       	std	Y+3, r22	; 0x03
    180c:	5d 83       	std	Y+5, r21	; 0x05
    180e:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrState = OK;
    1810:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	08 f0       	brcs	.+2      	; 0x181a <DIO_u8ReadPinValue+0x26>
    1818:	7c c0       	rjmp	.+248    	; 0x1912 <DIO_u8ReadPinValue+0x11e>

		if(Copy_pu8Value != NULL){
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	09 f4       	brne	.+2      	; 0x1824 <DIO_u8ReadPinValue+0x30>
    1822:	74 c0       	rjmp	.+232    	; 0x190c <DIO_u8ReadPinValue+0x118>

			switch(Copy_u8Port){
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3f 83       	std	Y+7, r19	; 0x07
    182c:	2e 83       	std	Y+6, r18	; 0x06
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	41 30       	cpi	r20, 0x01	; 1
    1834:	51 05       	cpc	r21, r1
    1836:	59 f1       	breq	.+86     	; 0x188e <DIO_u8ReadPinValue+0x9a>
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	91 05       	cpc	r25, r1
    1840:	34 f4       	brge	.+12     	; 0x184e <DIO_u8ReadPinValue+0x5a>
    1842:	2e 81       	ldd	r18, Y+6	; 0x06
    1844:	3f 81       	ldd	r19, Y+7	; 0x07
    1846:	21 15       	cp	r18, r1
    1848:	31 05       	cpc	r19, r1
    184a:	69 f0       	breq	.+26     	; 0x1866 <DIO_u8ReadPinValue+0x72>
    184c:	5c c0       	rjmp	.+184    	; 0x1906 <DIO_u8ReadPinValue+0x112>
    184e:	4e 81       	ldd	r20, Y+6	; 0x06
    1850:	5f 81       	ldd	r21, Y+7	; 0x07
    1852:	42 30       	cpi	r20, 0x02	; 2
    1854:	51 05       	cpc	r21, r1
    1856:	79 f1       	breq	.+94     	; 0x18b6 <DIO_u8ReadPinValue+0xc2>
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
    185a:	9f 81       	ldd	r25, Y+7	; 0x07
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <DIO_u8ReadPinValue+0x70>
    1862:	3d c0       	rjmp	.+122    	; 0x18de <DIO_u8ReadPinValue+0xea>
    1864:	50 c0       	rjmp	.+160    	; 0x1906 <DIO_u8ReadPinValue+0x112>

			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    1866:	e9 e3       	ldi	r30, 0x39	; 57
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_u8ReadPinValue+0x8a>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_u8ReadPinValue+0x86>
    1882:	ca 01       	movw	r24, r20
    1884:	81 70       	andi	r24, 0x01	; 1
    1886:	ec 81       	ldd	r30, Y+4	; 0x04
    1888:	fd 81       	ldd	r31, Y+5	; 0x05
    188a:	80 83       	st	Z, r24
    188c:	44 c0       	rjmp	.+136    	; 0x1916 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    188e:	e6 e3       	ldi	r30, 0x36	; 54
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8ReadPinValue+0xb2>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8ReadPinValue+0xae>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	ec 81       	ldd	r30, Y+4	; 0x04
    18b0:	fd 81       	ldd	r31, Y+5	; 0x05
    18b2:	80 83       	st	Z, r24
    18b4:	30 c0       	rjmp	.+96     	; 0x1916 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    18b6:	e3 e3       	ldi	r30, 0x33	; 51
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_u8ReadPinValue+0xda>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_u8ReadPinValue+0xd6>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	ec 81       	ldd	r30, Y+4	; 0x04
    18d8:	fd 81       	ldd	r31, Y+5	; 0x05
    18da:	80 83       	st	Z, r24
    18dc:	1c c0       	rjmp	.+56     	; 0x1916 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_u8ReadPinValue+0x102>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_u8ReadPinValue+0xfe>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1900:	fd 81       	ldd	r31, Y+5	; 0x05
    1902:	80 83       	st	Z, r24
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <DIO_u8ReadPinValue+0x122>
			default: Local_u8ErrState = NOK; break;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	05 c0       	rjmp	.+10     	; 0x1916 <DIO_u8ReadPinValue+0x122>
			}
		}else{
			Local_u8ErrState = NULL_PTR_ERR;
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8ReadPinValue+0x122>

		}
	}else{
		Local_u8ErrState = NOK;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
	}
	// check if valid pin

	return Local_u8ErrState;
    1916:	89 81       	ldd	r24, Y+1	; 0x01

}
    1918:	27 96       	adiw	r28, 0x07	; 7
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction){
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <DIO_u8SetPortDirection+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <DIO_u8SetPortDirection+0x8>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8a 83       	std	Y+2, r24	; 0x02
    193a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    193c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3d 83       	std	Y+5, r19	; 0x05
    1946:	2c 83       	std	Y+4, r18	; 0x04
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	d1 f0       	breq	.+52     	; 0x1986 <DIO_u8SetPortDirection+0x5c>
    1952:	2c 81       	ldd	r18, Y+4	; 0x04
    1954:	3d 81       	ldd	r19, Y+5	; 0x05
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	2c f4       	brge	.+10     	; 0x1966 <DIO_u8SetPortDirection+0x3c>
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f0       	breq	.+24     	; 0x197c <DIO_u8SetPortDirection+0x52>
    1964:	1f c0       	rjmp	.+62     	; 0x19a4 <DIO_u8SetPortDirection+0x7a>
    1966:	2c 81       	ldd	r18, Y+4	; 0x04
    1968:	3d 81       	ldd	r19, Y+5	; 0x05
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <DIO_u8SetPortDirection+0x66>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <DIO_u8SetPortDirection+0x70>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <DIO_u8SetPortDirection+0x7a>

	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    197c:	ea e3       	ldi	r30, 0x3A	; 58
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	80 83       	st	Z, r24
    1984:	11 c0       	rjmp	.+34     	; 0x19a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    1986:	e7 e3       	ldi	r30, 0x37	; 55
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	80 83       	st	Z, r24
    198e:	0c c0       	rjmp	.+24     	; 0x19a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    1990:	e4 e3       	ldi	r30, 0x34	; 52
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	80 83       	st	Z, r24
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    199a:	e1 e3       	ldi	r30, 0x31	; 49
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	80 83       	st	Z, r24
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrState = NOK;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrState;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <DIO_u8SetPortValue>:
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_u8SetPortValue+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_u8SetPortValue+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    19cc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	d1 f0       	breq	.+52     	; 0x1a16 <DIO_u8SetPortValue+0x5c>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <DIO_u8SetPortValue+0x3c>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <DIO_u8SetPortValue+0x52>
    19f4:	1f c0       	rjmp	.+62     	; 0x1a34 <DIO_u8SetPortValue+0x7a>
    19f6:	2c 81       	ldd	r18, Y+4	; 0x04
    19f8:	3d 81       	ldd	r19, Y+5	; 0x05
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <DIO_u8SetPortValue+0x66>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <DIO_u8SetPortValue+0x70>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <DIO_u8SetPortValue+0x7a>

	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	80 83       	st	Z, r24
    1a14:	11 c0       	rjmp	.+34     	; 0x1a38 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	80 83       	st	Z, r24
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	80 83       	st	Z, r24
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	80 83       	st	Z, r24
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrState = NOK;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrState;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <DIO_u8TogglePinValue>:
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <DIO_u8TogglePinValue+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <DIO_u8TogglePinValue+0x8>
    1a52:	0f 92       	push	r0
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrState = OK;
    1a5c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7){
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 30       	cpi	r24, 0x08	; 8
    1a62:	08 f0       	brcs	.+2      	; 0x1a66 <DIO_u8TogglePinValue+0x1c>
    1a64:	6e c0       	rjmp	.+220    	; 0x1b42 <DIO_u8TogglePinValue+0xf8>


		switch(Copy_u8Port){
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	41 f1       	breq	.+80     	; 0x1aca <DIO_u8TogglePinValue+0x80>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <DIO_u8TogglePinValue+0x44>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <DIO_u8TogglePinValue+0x5a>
    1a8c:	57 c0       	rjmp	.+174    	; 0x1b3c <DIO_u8TogglePinValue+0xf2>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	61 f1       	breq	.+88     	; 0x1af0 <DIO_u8TogglePinValue+0xa6>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	d1 f1       	breq	.+116    	; 0x1b16 <DIO_u8TogglePinValue+0xcc>
    1aa2:	4c c0       	rjmp	.+152    	; 0x1b3c <DIO_u8TogglePinValue+0xf2>

		case DIO_u8PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
    1aa4:	ab e3       	ldi	r26, 0x3B	; 59
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	eb e3       	ldi	r30, 0x3B	; 59
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	40 81       	ld	r20, Z
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_u8TogglePinValue+0x76>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_u8TogglePinValue+0x72>
    1ac4:	84 27       	eor	r24, r20
    1ac6:	8c 93       	st	X, r24
    1ac8:	3e c0       	rjmp	.+124    	; 0x1b46 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTB: TOG_BIT(PORTB, Copy_u8Pin); break;
    1aca:	a8 e3       	ldi	r26, 0x38	; 56
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e8 e3       	ldi	r30, 0x38	; 56
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	40 81       	ld	r20, Z
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_u8TogglePinValue+0x9c>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_u8TogglePinValue+0x98>
    1aea:	84 27       	eor	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	2b c0       	rjmp	.+86     	; 0x1b46 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	40 81       	ld	r20, Z
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_u8TogglePinValue+0xc2>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_u8TogglePinValue+0xbe>
    1b10:	84 27       	eor	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	18 c0       	rjmp	.+48     	; 0x1b46 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
    1b16:	a2 e3       	ldi	r26, 0x32	; 50
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e2 e3       	ldi	r30, 0x32	; 50
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	40 81       	ld	r20, Z
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_u8TogglePinValue+0xe8>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_u8TogglePinValue+0xe4>
    1b36:	84 27       	eor	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <DIO_u8TogglePinValue+0xfc>
		default: Local_u8ErrState = NOK;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_u8TogglePinValue+0xfc>
		}
	}else{
		Local_u8ErrState = NOK;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <LM34_u8GetTempInC>:





uint8 LM34_u8GetTempInC(uint8 Copy_u8ADCChannel){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <LM34_u8GetTempInC+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <LM34_u8GetTempInC+0x8>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8c 83       	std	Y+4, r24	; 0x04



	 uint8 Local_u8TempVal= 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01

	uint16 Local_u8DigitalVal   = 0;
    1b68:	1b 82       	std	Y+3, r1	; 0x03
    1b6a:	1a 82       	std	Y+2, r1	; 0x02

	ADC_u8StartConversionSynch(Copy_u8ADCChannel, &Local_u8DigitalVal);
    1b6c:	9e 01       	movw	r18, r28
    1b6e:	2e 5f       	subi	r18, 0xFE	; 254
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	b9 01       	movw	r22, r18
    1b76:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
   /* Anlaog = Digital  * Step
    * Step = Vref / 2^resolution  --> resolution 8
    * Temp = Analog / 10
    * */
	Local_u8TempVal =(uint8)((((uint32)Local_u8DigitalVal) * 500UL) / 256UL);
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	cc 01       	movw	r24, r24
    1b80:	a0 e0       	ldi	r26, 0x00	; 0
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	24 ef       	ldi	r18, 0xF4	; 244
    1b86:	31 e0       	ldi	r19, 0x01	; 1
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__mulsi3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	89 2f       	mov	r24, r25
    1b9a:	9a 2f       	mov	r25, r26
    1b9c:	ab 2f       	mov	r26, r27
    1b9e:	bb 27       	eor	r27, r27
    1ba0:	89 83       	std	Y+1, r24	; 0x01


  return Local_u8TempVal;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <PORT_voidInit>:
#include "PORT_prv.h"
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = PORTA_DIR;
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8e e7       	ldi	r24, 0x7E	; 126
    1bc0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1bc2:	e7 e3       	ldi	r30, 0x37	; 55
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1bca:	e4 e3       	ldi	r30, 0x34	; 52
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8f e3       	ldi	r24, 0x3F	; 63
    1bd0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1bd2:	e1 e3       	ldi	r30, 0x31	; 49
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	88 e3       	ldi	r24, 0x38	; 56
    1bd8:	80 83       	st	Z, r24
	
	PORTA = PORTA_INIT_VAL;
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
    1be6:	e5 e3       	ldi	r30, 0x35	; 53
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	84 e0       	ldi	r24, 0x04	; 4
    1bf2:	80 83       	st	Z, r24

}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <main>:
#include "ADC_interface.h"
#include "LM35_interface.h"
#include <util/delay.h>
#include "ErrType.h"
#include "CLCD_interface.h"
void main(void){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2f 97       	sbiw	r28, 0x0f	; 15
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    1c0e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <PORT_voidInit>
	ADC_voidInit();
    1c12:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    1c16:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <CLCD_voidInit>

	uint8 TempVal = 0;
    1c1a:	1f 86       	std	Y+15, r1	; 0x0f
	CLCD_u8SendString("Temperature= ");
    1c1c:	80 e6       	ldi	r24, 0x60	; 96
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
	while(1){
		TempVal = LM34_u8GetTempInC(ADC_u8SINGLE_ENDED_ADC7);
    1c24:	87 e0       	ldi	r24, 0x07	; 7
    1c26:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LM34_u8GetTempInC>
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
		CLCD_voidGoToXY(12,0);
    1c2c:	8c e0       	ldi	r24, 0x0C	; 12
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidGoToXY>
		if(TempVal<10){
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	8a 30       	cpi	r24, 0x0A	; 10
    1c38:	f0 f4       	brcc	.+60     	; 0x1c76 <main+0x7c>
			CLCD_u8SendString(" ");
    1c3a:	8e e6       	ldi	r24, 0x6E	; 110
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
			CLCD_u8SendString(" ");
    1c42:	8e e6       	ldi	r24, 0x6E	; 110
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
			CLCD_u8SendString(" ");
    1c4a:	8e e6       	ldi	r24, 0x6E	; 110
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
			CLCD_voidGoToXY(12,0);
    1c52:	8c e0       	ldi	r24, 0x0C	; 12
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidGoToXY>
			CLCD_u8SendNumber((uint32)TempVal);
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e0       	ldi	r26, 0x00	; 0
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 a9 08 	call	0x1152	; 0x1152 <CLCD_u8SendNumber>
			CLCD_u8SendString("C");
    1c6c:	80 e7       	ldi	r24, 0x70	; 112
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <main+0xa4>
		}else if(TempVal >= 10){
    1c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c78:	8a 30       	cpi	r24, 0x0A	; 10
    1c7a:	88 f0       	brcs	.+34     	; 0x1c9e <main+0xa4>
			CLCD_voidGoToXY(12,0);
    1c7c:	8c e0       	ldi	r24, 0x0C	; 12
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidGoToXY>
			CLCD_u8SendNumber((uint32)TempVal);
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e0       	ldi	r26, 0x00	; 0
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 a9 08 	call	0x1152	; 0x1152 <CLCD_u8SendNumber>
			CLCD_u8SendString("C");
    1c96:	80 e7       	ldi	r24, 0x70	; 112
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLCD_u8SendString>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	aa e7       	ldi	r26, 0x7A	; 122
    1ca4:	b4 e4       	ldi	r27, 0x44	; 68
    1ca6:	8b 87       	std	Y+11, r24	; 0x0b
    1ca8:	9c 87       	std	Y+12, r25	; 0x0c
    1caa:	ad 87       	std	Y+13, r26	; 0x0d
    1cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	55 e4       	ldi	r21, 0x45	; 69
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <main+0xf6>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <main+0x174>
	else if (__tmp > 65535)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <main+0x156>
    1d32:	80 e9       	ldi	r24, 0x90	; 144
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <main+0x144>
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <main+0x138>
    1d58:	65 cf       	rjmp	.-310    	; 0x1c24 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0x180>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	50 cf       	rjmp	.-352    	; 0x1c24 <main+0x2a>

00001d84 <__mulsi3>:
    1d84:	62 9f       	mul	r22, r18
    1d86:	d0 01       	movw	r26, r0
    1d88:	73 9f       	mul	r23, r19
    1d8a:	f0 01       	movw	r30, r0
    1d8c:	82 9f       	mul	r24, r18
    1d8e:	e0 0d       	add	r30, r0
    1d90:	f1 1d       	adc	r31, r1
    1d92:	64 9f       	mul	r22, r20
    1d94:	e0 0d       	add	r30, r0
    1d96:	f1 1d       	adc	r31, r1
    1d98:	92 9f       	mul	r25, r18
    1d9a:	f0 0d       	add	r31, r0
    1d9c:	83 9f       	mul	r24, r19
    1d9e:	f0 0d       	add	r31, r0
    1da0:	74 9f       	mul	r23, r20
    1da2:	f0 0d       	add	r31, r0
    1da4:	65 9f       	mul	r22, r21
    1da6:	f0 0d       	add	r31, r0
    1da8:	99 27       	eor	r25, r25
    1daa:	72 9f       	mul	r23, r18
    1dac:	b0 0d       	add	r27, r0
    1dae:	e1 1d       	adc	r30, r1
    1db0:	f9 1f       	adc	r31, r25
    1db2:	63 9f       	mul	r22, r19
    1db4:	b0 0d       	add	r27, r0
    1db6:	e1 1d       	adc	r30, r1
    1db8:	f9 1f       	adc	r31, r25
    1dba:	bd 01       	movw	r22, r26
    1dbc:	cf 01       	movw	r24, r30
    1dbe:	11 24       	eor	r1, r1
    1dc0:	08 95       	ret

00001dc2 <__udivmodsi4>:
    1dc2:	a1 e2       	ldi	r26, 0x21	; 33
    1dc4:	1a 2e       	mov	r1, r26
    1dc6:	aa 1b       	sub	r26, r26
    1dc8:	bb 1b       	sub	r27, r27
    1dca:	fd 01       	movw	r30, r26
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <__udivmodsi4_ep>

00001dce <__udivmodsi4_loop>:
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	ee 1f       	adc	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	a2 17       	cp	r26, r18
    1dd8:	b3 07       	cpc	r27, r19
    1dda:	e4 07       	cpc	r30, r20
    1ddc:	f5 07       	cpc	r31, r21
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__udivmodsi4_ep>
    1de0:	a2 1b       	sub	r26, r18
    1de2:	b3 0b       	sbc	r27, r19
    1de4:	e4 0b       	sbc	r30, r20
    1de6:	f5 0b       	sbc	r31, r21

00001de8 <__udivmodsi4_ep>:
    1de8:	66 1f       	adc	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	1a 94       	dec	r1
    1df2:	69 f7       	brne	.-38     	; 0x1dce <__udivmodsi4_loop>
    1df4:	60 95       	com	r22
    1df6:	70 95       	com	r23
    1df8:	80 95       	com	r24
    1dfa:	90 95       	com	r25
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	bd 01       	movw	r22, r26
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret

00001e06 <__prologue_saves__>:
    1e06:	2f 92       	push	r2
    1e08:	3f 92       	push	r3
    1e0a:	4f 92       	push	r4
    1e0c:	5f 92       	push	r5
    1e0e:	6f 92       	push	r6
    1e10:	7f 92       	push	r7
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	ca 1b       	sub	r28, r26
    1e30:	db 0b       	sbc	r29, r27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	09 94       	ijmp

00001e3e <__epilogue_restores__>:
    1e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e40:	39 88       	ldd	r3, Y+17	; 0x11
    1e42:	48 88       	ldd	r4, Y+16	; 0x10
    1e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e50:	b9 84       	ldd	r11, Y+9	; 0x09
    1e52:	c8 84       	ldd	r12, Y+8	; 0x08
    1e54:	df 80       	ldd	r13, Y+7	; 0x07
    1e56:	ee 80       	ldd	r14, Y+6	; 0x06
    1e58:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e60:	b9 81       	ldd	r27, Y+1	; 0x01
    1e62:	ce 0f       	add	r28, r30
    1e64:	d1 1d       	adc	r29, r1
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	ed 01       	movw	r28, r26
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
